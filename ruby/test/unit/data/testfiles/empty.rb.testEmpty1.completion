Code completion result for source line:

(QueryType=COMPLETION, prefixSearch=true, caseSensitive=true)
------------------------------------
METHOD     abort                                      Kernel
METHOD     alias_method(new_name, old_nam             Module
METHOD     allocate                                   Class
METHOD     ancestors                                  Module
METHOD     append_features(mod)                       Module
METHOD     at_exit { }                                Kernel
METHOD     attr(symbol, writable)                     Module
METHOD     attr_accessor(symbol)                      Module
METHOD     attr_reader(symbol)                        Module
METHOD     attr_writer(symbol)                        Module
METHOD     autoload(module_, filename)                Kernel
METHOD     autoload(name, filename)                   Module
METHOD     autoload?(name)                            Module
METHOD     binding                                    Kernel
METHOD     block_given?                               Kernel
METHOD     callcc { }                                 Kernel
METHOD     caller(start)                              Kernel
METHOD     catch(symbol) { }                          Kernel
METHOD     chomp!(string)                             Kernel
METHOD     chomp(string)                              Kernel
METHOD     chop                                       Kernel
METHOD     chop!                                      Kernel
METHOD     class                                      Object
METHOD     class_eval(string, filename, l             Module
METHOD     class_exec(arg) { }                        Module
METHOD     class_variable_defined?(symbol             Module
METHOD     class_variable_get(symbol)                 Module
METHOD     class_variable_set(symbol, obj             Module
METHOD     class_variables                            Module
METHOD     clone                                      Object
METHOD     const_defined?(sym)                        Module
METHOD     const_get(sym)                             Module
METHOD     const_missing(sym)                         Module
METHOD     const_set(sym, obj)                        Module
METHOD     constants                       [STATIC]   Module
METHOD     constants                                  Module
METHOD     define_method(symbol)                      Module
METHOD     define_method(symbol, method)              Module
METHOD     display(port)                              Object
METHOD     dup                                        Object
METHOD     enum_for(method, *args)                    Object
METHOD     eql?(other)                                Module
METHOD     eql?(other)                                Object
METHOD     equal?(other)                              Module
METHOD     equal?(other)                              Object
METHOD     eval(string, binding, filename             Kernel
METHOD     exec(command, arg)                         Kernel
METHOD     exit!(fixnum)                              Kernel
METHOD     exit(integer)                              Kernel
METHOD     extend(module_)                            Object
METHOD     extend_object(obj)                         Module
METHOD     extended(p1)                               Module
METHOD     fail(exception, string, array)             Kernel
METHOD     fail(string)                               Kernel
METHOD     fork { }                                   Kernel
METHOD     format(format_string, argument             Kernel
METHOD     freeze                                     Module
METHOD     freeze                                     Object
METHOD     frozen?                                    Object
METHOD     getc                                       Kernel
METHOD     gets(separator)                            Kernel
METHOD     global_variables                           Kernel
METHOD     gsub!(pattern)                             Kernel
METHOD     gsub!(pattern, replacement)                Kernel
METHOD     gsub(pattern)                              Kernel
METHOD     gsub(pattern, replacement)                 Kernel
METHOD     hash                                       Object
METHOD     id                                         Object
METHOD     include(module_)                           Module
METHOD     include?(module_name)                      Module
METHOD     included(othermod)                         Module
METHOD     included_modules                           Module
METHOD     inherited(subclass)                        Class
METHOD     inspect                                    Object
METHOD     instance_eval(string, filename             Object
METHOD     instance_exec(arg) { }                     Object
METHOD     instance_method(symbol)                    Module
METHOD     instance_methods(include_super             Module
METHOD     instance_of?(class_name)                   Object
METHOD     instance_variable_defined?(sym             Object
METHOD     instance_variable_get(symbol)              Object
METHOD     instance_variable_set(symbol,              Object
METHOD     instance_variables                         Object
METHOD     is_a?(class_name)                          Object
METHOD     iterator?                                  Kernel
METHOD     kind_of?(class_name)                       Object
METHOD     lambda { }                                 Kernel
METHOD     load(filename, wrap)                       Kernel
METHOD     local_variables                            Kernel
METHOD     loop { }                                   Kernel
METHOD     method(sym)                                Object
METHOD     method_added(p1)                           Module
METHOD     method_defined?(symbol)                    Module
METHOD     method_missing(symbol, *args)              Kernel
METHOD     method_removed(p1)                         Module
METHOD     method_undefined(p1)                       Module
METHOD     methods                                    Object
METHOD     module_exec(arg) { }                       Module
METHOD     module_function(symbol)                    Module
METHOD     name                                       Module
METHOD     nesting                         [STATIC]   Module
METHOD     new                             [STATIC]   Module
METHOD     new                             [STATIC]   Object
METHOD     new(args)                                  Class
METHOD     new(super_class)                [STATIC]   Class
METHOD     nil?                                       Object
METHOD     object_id                                  Object
METHOD     open(path, mode, perm)                     Kernel
METHOD     p(obj)                                     Kernel
METHOD     print(obj)                                 Kernel
METHOD     printf(io, string, obj)                    Kernel
METHOD     printf(string, obj)                        Kernel
METHOD     private(symbol)                            Module
METHOD     private_class_method(symbol)               Module
METHOD     private_instance_methods(inclu             Module
METHOD     private_method_defined?(symbol             Module
METHOD     private_methods(all)                       Object
METHOD     proc { }                                   Kernel
METHOD     protected(symbol)                          Module
METHOD     protected_instance_methods(inc             Module
METHOD     protected_method_defined?(symb             Module
METHOD     protected_methods(all)                     Object
METHOD     public(symbol)                             Module
METHOD     public_class_method(symbol)                Module
METHOD     public_instance_methods(includ             Module
METHOD     public_method_defined?(symbol)             Module
METHOD     public_methods(all)                        Object
METHOD     putc(int)                                  Kernel
METHOD     puts(obj)                                  Kernel
METHOD     raise(exception, string, array             Kernel
METHOD     raise(string)                              Kernel
METHOD     rand(max)                                  Kernel
METHOD     readline(separator)                        Kernel
METHOD     readlines(separator)                       Kernel
METHOD     remove_class_variable(sym)                 Module
METHOD     remove_const(sym)                          Module
METHOD     remove_instance_variable(symbo             Object
METHOD     remove_method(symbol)                      Module
METHOD     require(string)                            Kernel
METHOD     respond_to?(symbol, include_pr             Object
METHOD     scan(pattern)                              Kernel
METHOD     select                                     Kernel
METHOD     send(symbol, args)                         Object
METHOD     set_trace_func(proc)                       Kernel
METHOD     singleton_method_added(symbol)             Object
METHOD     singleton_method_removed(symbo             Object
METHOD     singleton_method_undefined(sym             Object
METHOD     singleton_methods(all)                     Object
METHOD     sleep(duration)                            Kernel
METHOD     split(pattern, limit)                      Kernel
METHOD     sprintf(format_string, argumen             Kernel
METHOD     srand(number)                              Kernel
METHOD     sub!(pattern)                              Kernel
METHOD     sub!(pattern, replacement)                 Kernel
METHOD     sub(pattern)                               Kernel
METHOD     sub(pattern, replacement)                  Kernel
METHOD     superclass                                 Class
METHOD     syscall(fixnum, args)                      Kernel
METHOD     system(cmd, arg)                           Kernel
METHOD     taint                                      Object
METHOD     tainted?                                   Object
METHOD     tap { }                                    Object
METHOD     test(int_cmd, file1, file2)                Kernel
METHOD     throw(symbol, obj)                         Kernel
METHOD     to_a                                       Object
METHOD     to_enum(method, *args)                     Object
METHOD     to_s                                       Module
METHOD     to_s                                       Object
METHOD     trace_var(symbol)                          Kernel
METHOD     trace_var(symbol, cmd)                     Kernel
METHOD     trap(signal)                               Kernel
METHOD     trap(signal, proc)                         Kernel
METHOD     type                                       Object
METHOD     undef_method(symbol)                       Module
METHOD     untaint                                    Object
METHOD     untrace_var(symbol, cmd)                   Kernel
METHOD     warn(msg)                                  Kernel
KEYWORD    ARGF                                       null
KEYWORD    ARGV                                       null
KEYWORD    BEGIN                                      null
KEYWORD    DATA                                       null
KEYWORD    DATA                                       null
KEYWORD    END                                        null
KEYWORD    ENV                                        null
KEYWORD    FALSE                                      null
KEYWORD    NIL                                        null
KEYWORD    RUBY_PLATFORM                              null
KEYWORD    RUBY_RELEASE_DATE                          null
KEYWORD    RUBY_VERSION                               null
KEYWORD    SCRIPT_LINES__                             null
KEYWORD    STDERR                                     null
KEYWORD    STDIN                                      null
KEYWORD    STDOUT                                     null
KEYWORD    TOPLEVEL_BINDING                           null
KEYWORD    TRUE                                       null
KEYWORD    __FILE__                                   null
KEYWORD    __LINE__                                   null
KEYWORD    alias                                      null
KEYWORD    and                                        null
KEYWORD    begin                                      null
KEYWORD    break                                      null
KEYWORD    case                                       null
KEYWORD    class                                      null
KEYWORD    def                                        null
KEYWORD    defined?                                   null
KEYWORD    do                                         null
KEYWORD    else                                       null
KEYWORD    elsif                                      null
KEYWORD    end                                        null
KEYWORD    ensure                                     null
KEYWORD    false                                      null
KEYWORD    for                                        null
KEYWORD    if                                         null
KEYWORD    in                                         null
KEYWORD    module                                     null
KEYWORD    next                                       null
KEYWORD    nil                                        null
KEYWORD    not                                        null
KEYWORD    or                                         null
KEYWORD    redo                                       null
KEYWORD    rescue                                     null
KEYWORD    retry                                      null
KEYWORD    return                                     null
KEYWORD    self                                       null
KEYWORD    super                                      null
KEYWORD    then                                       null
KEYWORD    true                                       null
KEYWORD    undef                                      null
KEYWORD    unless                                     null
KEYWORD    until                                      null
KEYWORD    when                                       null
KEYWORD    while                                      null
KEYWORD    yield                                      null
