Code completion result for source line:
puts Outer::|OUTER_CONST
(QueryType=COMPLETION, prefixSearch=true, caseSensitive=true)
MODULE     Inner                                      Outer
CONSTANT   OUTER_CONST                                null
------------------------------------
METHOD     alias_attribute(new_name, old_             Module
METHOD     alias_method(new_name, old_nam             Module
METHOD     alias_method_chain(target, fea             Module
METHOD     ancestors                                  Module
METHOD     append_features(mod)                       Module
METHOD     attr(symbol, writable)                     Module
METHOD     attr_accessor(symbol)                      Module
METHOD     attr_reader(symbol)                        Module
METHOD     attr_writer(symbol)                        Module
METHOD     autoload(name, filename)                   Module
METHOD     autoload?(name)                            Module
METHOD     class_eval(string, filename, l             Module
METHOD     class_exec(arg) { }                        Module
METHOD     class_variable_defined?(symbol             Module
METHOD     class_variable_get(symbol)                 Module
METHOD     class_variable_set(symbol, obj             Module
METHOD     class_variables                            Module
METHOD     const_defined?(sym)                        Module
METHOD     const_get(sym)                             Module
METHOD     const_missing(sym)                         Module
METHOD     const_set(sym, obj)                        Module
METHOD     constants                       [STATIC]   Module
METHOD     constants                                  Module
METHOD     define_method(symbol)                      Module
METHOD     define_method(symbol, method)              Module
METHOD     eql?(other)                                Module
METHOD     equal?(other)                              Module
METHOD     extend_object(obj)                         Module
METHOD     extended(p1)                               Module
METHOD     freeze                                     Module
METHOD     include(module_)                           Module
METHOD     include?(module_name)                      Module
METHOD     included(othermod)                         Module
METHOD     included_modules                           Module
METHOD     instance_method(symbol)                    Module
METHOD     instance_methods(include_super             Module
METHOD     method_added(p1)                           Module
METHOD     method_defined?(symbol)                    Module
METHOD     method_removed(p1)                         Module
METHOD     method_undefined(p1)                       Module
METHOD     module_exec(arg) { }                       Module
METHOD     module_function(symbol)                    Module
METHOD     name                                       Module
METHOD     nesting                         [STATIC]   Module
METHOD     new                             [STATIC]   Module
METHOD     new                             [STATIC]   Object
METHOD     new(super_class)                [STATIC]   Class
METHOD     private(symbol)                            Module
METHOD     private_class_method(symbol)               Module
METHOD     private_instance_methods(inclu             Module
METHOD     private_method_defined?(symbol             Module
METHOD     protected(symbol)                          Module
METHOD     protected_instance_methods(inc             Module
METHOD     protected_method_defined?(symb             Module
METHOD     public(symbol)                             Module
METHOD     public_class_method(symbol)                Module
METHOD     public_instance_methods(includ             Module
METHOD     public_method_defined?(symbol)             Module
METHOD     remove_class_variable(sym)                 Module
METHOD     remove_const(sym)                          Module
METHOD     remove_method(symbol)                      Module
METHOD     to_s                                       Module
METHOD     undef_method(symbol)                       Module
