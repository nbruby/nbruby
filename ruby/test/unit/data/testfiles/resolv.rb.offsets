
=begin
= resolv library
resolv.rb is a resolver library written in Ruby.
Since it is written in Ruby, it is thread-aware.
I.e. it can resolv many hostnames concurrently.

It is possible to lookup various resources of DNS using DNS module directly.

== example
  p Resolv.getaddress("www.ruby-lang.org")
  p Resolv.getname("210.251.121.214")

  Resolv::DNS.open {|dns|
    p dns.getresources("www.ruby-lang.org", Resolv::DNS::Resource::IN::A).collect {|r| r.address}
    p dns.getresources("ruby-lang.org", Resolv::DNS::Resource::IN::MX).collect {|r| [r.exchange.to_s, r.preference]}
  }

== Resolv class

=== class methods
--- Resolv.getaddress(name)
--- Resolv.getaddresses(name)
--- Resolv.each_address(name) {|address| ...}
    They lookups IP addresses of ((|name|)) which represents a hostname
    as a string by default resolver.

    getaddress returns first entry of lookupped addresses.
    getaddresses returns lookupped addresses as an array.
    each_address iterates over lookupped addresses.

--- Resolv.getname(address)
--- Resolv.getnames(address)
--- Resolv.each_name(address) {|name| ...}
    lookups hostnames of ((|address|)) which represents IP address as a string.

    getname returns first entry of lookupped names.
    getnames returns lookupped names as an array.
    each_names iterates over lookupped names.

== Resolv::Hosts class
hostname resolver using /etc/hosts format.

=== class methods
--- Resolv::Hosts.new(hosts='/etc/hosts')

=== methods
--- Resolv::Hosts#getaddress(name)
--- Resolv::Hosts#getaddresses(name)
--- Resolv::Hosts#each_address(name) {|address| ...}
    address lookup methods.

--- Resolv::Hosts#getname(address)
--- Resolv::Hosts#getnames(address)
--- Resolv::Hosts#each_name(address) {|name| ...}
    hostnames lookup methods.

== Resolv::DNS class
DNS stub resolver.

=== class methods
--- Resolv::DNS.new(config_info=nil)

    ((|config_info|)) should be nil, a string or a hash.
    If nil is given, /etc/resolv.conf and platform specific information is used.
    If a string is given, it should be a filename which format is same as /etc/resolv.conf.
    If a hash is given, it may contains information for nameserver, search and ndots as follows.

      Resolv::DNS.new({:nameserver=&gt;["210.251.121.21"], :search=&gt;["ruby-lang.org"], :ndots=&gt;1})

--- Resolv::DNS.open(config_info=nil)
--- Resolv::DNS.open(config_info=nil) {|dns| ...}

=== methods
--- Resolv::DNS#close

--- Resolv::DNS#getaddress(name)
--- Resolv::DNS#getaddresses(name)
--- Resolv::DNS#each_address(name) {|address| ...}
    address lookup methods.

    ((|name|)) must be a instance of Resolv::DNS::Name or String.  Lookupped
    address is represented as an instance of Resolv::IPv4 or Resolv::IPv6.

--- Resolv::DNS#getname(address)
--- Resolv::DNS#getnames(address)
--- Resolv::DNS#each_name(address) {|name| ...}
    hostnames lookup methods.

    ((|address|)) must be a instance of Resolv::IPv4, Resolv::IPv6 or String.
    Lookupped name is represented as an instance of Resolv::DNS::Name.

--- Resolv::DNS#getresource(name, typeclass)
--- Resolv::DNS#getresources(name, typeclass)
--- Resolv::DNS#each_resource(name, typeclass) {|resource| ...}
    They lookup DNS resources of ((|name|)).
    ((|name|)) must be a instance of Resolv::Name or String.

    ((|typeclass|)) should be one of follows:
    * Resolv::DNS::Resource::IN::ANY
    * Resolv::DNS::Resource::IN::NS
    * Resolv::DNS::Resource::IN::CNAME
    * Resolv::DNS::Resource::IN::SOA
    * Resolv::DNS::Resource::IN::HINFO
    * Resolv::DNS::Resource::IN::MINFO
    * Resolv::DNS::Resource::IN::MX
    * Resolv::DNS::Resource::IN::TXT
    * Resolv::DNS::Resource::IN::ANY
    * Resolv::DNS::Resource::IN::A
    * Resolv::DNS::Resource::IN::WKS
    * Resolv::DNS::Resource::IN::PTR
    * Resolv::DNS::Resource::IN::AAAA

    Lookupped resource is represented as an instance of (a subclass of)
    Resolv::DNS::Resource. 
    (Resolv::DNS::Resource::IN::A, etc.)

== Resolv::DNS::Resource::IN::NS class
--- name
== Resolv::DNS::Resource::IN::CNAME class
--- name
== Resolv::DNS::Resource::IN::SOA class
--- mname
--- rname
--- serial
--- refresh
--- retry
--- expire
--- minimum
== Resolv::DNS::Resource::IN::HINFO class
--- cpu
--- os
== Resolv::DNS::Resource::IN::MINFO class
--- rmailbx
--- emailbx
== Resolv::DNS::Resource::IN::MX class
--- preference
--- exchange
== Resolv::DNS::Resource::IN::TXT class
--- data
== Resolv::DNS::Resource::IN::A class
--- address
== Resolv::DNS::Resource::IN::WKS class
--- address
--- protocol
--- bitmap
== Resolv::DNS::Resource::IN::PTR class
--- name
== Resolv::DNS::Resource::IN::AAAA class
--- address

== Resolv::DNS::Name class

=== class methods
--- Resolv::DNS::Name.create(name)

=== methods
--- Resolv::DNS::Name#to_s

== Resolv::DNS::Resource class

== Resolv::IPv4 class
=== class methods
--- Resolv::IPv4.create(address)

=== methods
--- Resolv::IPv4#to_s
--- Resolv::IPv4#to_name

=== constants
--- Resolv::IPv4::Regex
    regular expression for IPv4 address.

== Resolv::IPv6 class
=== class methods
--- Resolv::IPv6.create(address)

=== methods
--- Resolv::IPv6#to_s
--- Resolv::IPv6#to_name

=== constants
--- Resolv::IPv6::Regex
    regular expression for IPv6 address.

== Bugs
* NIS is not supported.
* /etc/nsswitch.conf is not supported.
* IPv6 is not supported.

=end

<BLOCKNODE><FCALLNODE>require <ARRAYNODE><STRNODE>'socket'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'fcntl'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'timeout'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'thread'</STRNODE></ARRAYNODE></FCALLNODE>

<CLASSNODE>class <COLON2NODE>Resolv</COLON2NODE>
  <BLOCKNODE><DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>getaddress</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <CALLNODE><CONSTNODE>DefaultResolver</CONSTNODE>.getaddress<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
  end</DEFSNODE>

  <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>getaddresses</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <CALLNODE><CONSTNODE>DefaultResolver</CONSTNODE>.getaddresses<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
  end</DEFSNODE>

  <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>each_address</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>, <BLOCKARGNODE>&amp;block</BLOCKARGNODE>)</ARGSNODE>
    <CALLNODE><CONSTNODE>DefaultResolver</CONSTNODE>.each_address<BLOCKPASSNODE>(<ARRAYNODE><LOCALVARNODE>name</LOCALVARNODE></ARRAYNODE>, &amp;<LOCALVARNODE>block</LOCALVARNODE>)</BLOCKPASSNODE></CALLNODE>
  end</DEFSNODE>

  <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>getname</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <CALLNODE><CONSTNODE>DefaultResolver</CONSTNODE>.getname<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
  end</DEFSNODE>

  <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>getnames</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <CALLNODE><CONSTNODE>DefaultResolver</CONSTNODE>.getnames<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
  end</DEFSNODE>

  <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>each_name</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>, <BLOCKARGNODE>&amp;proc</BLOCKARGNODE>)</ARGSNODE>
    <CALLNODE><CONSTNODE>DefaultResolver</CONSTNODE>.each_name<BLOCKPASSNODE>(<ARRAYNODE><LOCALVARNODE>address</LOCALVARNODE></ARRAYNODE>, &amp;<LOCALVARNODE>proc</LOCALVARNODE>)</BLOCKPASSNODE></CALLNODE>
  end</DEFSNODE>

  <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>resolvers=<ARRAYNODE>[<CALLNODE><CONSTNODE>Hosts</CONSTNODE>.new</CALLNODE>, <CALLNODE><CONSTNODE>DNS</CONSTNODE>.new</CALLNODE>]</ARRAYNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <INSTASGNNODE>@resolvers = <LOCALVARNODE>resolvers</LOCALVARNODE></INSTASGNNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>getaddress</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><FCALLNODE>each_address<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>address</DASGNNODE>| <RETURNNODE>return <DVARNODE>address</DVARNODE></RETURNNODE>}</ITERNODE></FCALLNODE>
    <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"no address for </STRNODE><EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>getaddresses</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>ret = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
    <FCALLNODE>each_address<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>address</DASGNNODE>| <CALLNODE><LOCALVARNODE>ret</LOCALVARNODE> &lt;&lt; <ARRAYNODE><DVARNODE>address</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></FCALLNODE>
    <RETURNNODE>return <LOCALVARNODE>ret</LOCALVARNODE></RETURNNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>each_address</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><IFNODE>if <CALLNODE><CONSTNODE>AddressRegex</CONSTNODE> =~ <ARRAYNODE><LOCALVARNODE>name</LOCALVARNODE></ARRAYNODE></CALLNODE>
      <BLOCKNODE><YIELDNODE>yield <LOCALVARNODE>name</LOCALVARNODE></YIELDNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>
    <LOCALASGNNODE>yielded = <FALSENODE>false</FALSENODE></LOCALASGNNODE>
    <CALLNODE><INSTVARNODE>@resolvers</INSTVARNODE>.each <ITERNODE>{|<DASGNNODE>r</DASGNNODE>|
      <BLOCKNODE><CALLNODE><DVARNODE>r</DVARNODE>.each_address<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>address</DASGNNODE>|
        <BLOCKNODE><YIELDNODE>yield <CALLNODE><DVARNODE>address</DVARNODE>.to_s</CALLNODE></YIELDNODE>
        <LOCALASGNNODE>yielded = <TRUENODE>true</TRUENODE></LOCALASGNNODE></BLOCKNODE>
      }</ITERNODE></CALLNODE>
      <IFNODE><RETURNNODE>return</RETURNNODE> if <LOCALVARNODE>yielded</LOCALVARNODE></IFNODE></BLOCKNODE>
    }</ITERNODE></CALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>getname</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><FCALLNODE>each_name<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <RETURNNODE>return <DVARNODE>name</DVARNODE></RETURNNODE>}</ITERNODE></FCALLNODE>
    <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"no name for </STRNODE><EVSTRNODE>#{<LOCALVARNODE>address</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>getnames</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>ret = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
    <FCALLNODE>each_name<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <CALLNODE><LOCALVARNODE>ret</LOCALVARNODE> &lt;&lt; <ARRAYNODE><DVARNODE>name</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></FCALLNODE>
    <RETURNNODE>return <LOCALVARNODE>ret</LOCALVARNODE></RETURNNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>each_name</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>yielded = <FALSENODE>false</FALSENODE></LOCALASGNNODE>
    <CALLNODE><INSTVARNODE>@resolvers</INSTVARNODE>.each <ITERNODE>{|<DASGNNODE>r</DASGNNODE>|
      <BLOCKNODE><CALLNODE><DVARNODE>r</DVARNODE>.each_name<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>name</DASGNNODE>|
        <BLOCKNODE><YIELDNODE>yield <CALLNODE><DVARNODE>name</DVARNODE>.to_s</CALLNODE></YIELDNODE>
        <LOCALASGNNODE>yielded = <TRUENODE>true</TRUENODE></LOCALASGNNODE></BLOCKNODE>
      }</ITERNODE></CALLNODE>
      <IFNODE><RETURNNODE>return</RETURNNODE> if <LOCALVARNODE>yielded</LOCALVARNODE></IFNODE></BLOCKNODE>
    }</ITERNODE></CALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <CLASSNODE>class <COLON2NODE>ResolvError</COLON2NODE> &lt; <CONSTNODE>StandardError</CONSTNODE>
  end</CLASSNODE>

  <CLASSNODE>class <COLON2NODE>ResolvTimeout</COLON2NODE> &lt; <CONSTNODE>TimeoutError</CONSTNODE>
  end</CLASSNODE>

  <CLASSNODE>class <COLON2NODE>Hosts</COLON2NODE>
    <BLOCKNODE><IFNODE>if /<MATCH2NODE><REGEXPNODE>mswin32|cygwin|mingw|bccwin</REGEXPNODE></MATCH2NODE>/ =~ <CONSTNODE>RUBY_PLATFORM</CONSTNODE>
      <BLOCKNODE><FCALLNODE>require <ARRAYNODE><STRNODE>'win32/resolv'</STRNODE></ARRAYNODE></FCALLNODE>
      <CONSTDECLNODE>DefaultFileName = <CALLNODE><COLON2NODE><CONSTNODE>Win32</CONSTNODE>::Resolv</COLON2NODE>.get_hosts_path</CALLNODE></CONSTDECLNODE></BLOCKNODE>
    else
      <CONSTDECLNODE>DefaultFileName = <STRNODE>'/etc/hosts'</STRNODE></CONSTDECLNODE>
    end</IFNODE>

    <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>filename = <CONSTNODE>DefaultFileName</CONSTNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
      <BLOCKNODE><INSTASGNNODE>@filename = <LOCALVARNODE>filename</LOCALVARNODE></INSTASGNNODE>
      <INSTASGNNODE>@mutex = <CALLNODE><CONSTNODE>Mutex</CONSTNODE>.new</CALLNODE></INSTASGNNODE>
      <INSTASGNNODE>@initialized = <NILNODE>nil</NILNODE></INSTASGNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>lazy_initialize</ARGUMENTNODE><ARGSNODE/>
      <BLOCKNODE><CALLNODE><INSTVARNODE>@mutex</INSTVARNODE>.synchronize <ITERNODE>{
        <IFNODE>unless <INSTVARNODE>@initialized</INSTVARNODE>
          <BLOCKNODE><INSTASGNNODE>@name2addr = <HASHNODE>{}</HASHNODE></INSTASGNNODE><ARRAYNODE/>
          <INSTASGNNODE>@addr2name = <HASHNODE>{}</HASHNODE></INSTASGNNODE><ARRAYNODE/>
          <FCALLNODE>open<ARRAYNODE>(<INSTVARNODE>@filename</INSTVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>f</DASGNNODE>|
            <CALLNODE><DVARNODE>f</DVARNODE>.each <ITERNODE>{|<DASGNNODE>line</DASGNNODE>|
              <BLOCKNODE><CALLNODE><DVARNODE>line</DVARNODE>.sub!<ARRAYNODE>(/<REGEXPNODE>#.*</REGEXPNODE>/, <STRNODE>''</STRNODE>)</ARRAYNODE></CALLNODE>
              <ARRAYNODE><DASGNNODE>addr</DASGNNODE>, <DASGNNODE>hostname</DASGNNODE></ARRAYNODE><MULTIPLEASGNNODE>, *<DASGNNODE>aliases</DASGNNODE> =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><DVARNODE>line</DVARNODE>.split<ARRAYNODE>(/<REGEXPNODE>\s+</REGEXPNODE>/)</ARRAYNODE></CALLNODE>
</TOARYNODE>              <IFNODE><NEXTNODE>next</NEXTNODE> unless <DVARNODE>addr</DVARNODE></IFNODE>
              <CALLNODE><DVARNODE>addr</DVARNODE>.untaint</CALLNODE>
              <CALLNODE><DVARNODE>hostname</DVARNODE>.untaint</CALLNODE>
              <IFNODE><ATTRASSIGNNODE><INSTVARNODE>@addr2name</INSTVARNODE>[<ARRAYNODE><DVARNODE>addr</DVARNODE>] = <ZARRAYNODE>[]</ZARRAYNODE></ARRAYNODE></ATTRASSIGNNODE> unless <CALLNODE><INSTVARNODE>@addr2name</INSTVARNODE>.include? <ARRAYNODE><DVARNODE>addr</DVARNODE></ARRAYNODE></CALLNODE></IFNODE>
              <CALLNODE><CALLNODE><INSTVARNODE>@addr2name</INSTVARNODE>[<ARRAYNODE><DVARNODE>addr</DVARNODE></ARRAYNODE></CALLNODE>] &lt;&lt; <ARRAYNODE><DVARNODE>hostname</DVARNODE></ARRAYNODE></CALLNODE>
              <INSTVARNODE>@addr2name</INSTVARNODE><OPELEMENTASGNNODE>[<ARRAYNODE><DVARNODE>addr</DVARNODE></ARRAYNODE>] += <DVARNODE>aliases</DVARNODE>
</OPELEMENTASGNNODE>              <IFNODE><ATTRASSIGNNODE><INSTVARNODE>@name2addr</INSTVARNODE>[<ARRAYNODE><DVARNODE>hostname</DVARNODE>] = <ZARRAYNODE>[]</ZARRAYNODE></ARRAYNODE></ATTRASSIGNNODE> unless <CALLNODE><INSTVARNODE>@name2addr</INSTVARNODE>.include? <ARRAYNODE><DVARNODE>hostname</DVARNODE></ARRAYNODE></CALLNODE></IFNODE>
              <CALLNODE><CALLNODE><INSTVARNODE>@name2addr</INSTVARNODE>[<ARRAYNODE><DVARNODE>hostname</DVARNODE></ARRAYNODE></CALLNODE>] &lt;&lt; <ARRAYNODE><DVARNODE>addr</DVARNODE></ARRAYNODE></CALLNODE>
              <CALLNODE><DVARNODE>aliases</DVARNODE>.each <ITERNODE>{|<DASGNNODE>n</DASGNNODE>|
                <BLOCKNODE><CALLNODE><DVARNODE>n</DVARNODE>.untaint</CALLNODE>
                <IFNODE><ATTRASSIGNNODE><INSTVARNODE>@name2addr</INSTVARNODE>[<ARRAYNODE><DVARNODE>n</DVARNODE>] = <ZARRAYNODE>[]</ZARRAYNODE></ARRAYNODE></ATTRASSIGNNODE> unless <CALLNODE><INSTVARNODE>@name2addr</INSTVARNODE>.include? <ARRAYNODE><DVARNODE>n</DVARNODE></ARRAYNODE></CALLNODE></IFNODE>
                <CALLNODE><CALLNODE><INSTVARNODE>@name2addr</INSTVARNODE>[<ARRAYNODE><DVARNODE>n</DVARNODE></ARRAYNODE></CALLNODE>] &lt;&lt; <ARRAYNODE><DVARNODE>addr</DVARNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
              }</ITERNODE></CALLNODE></BLOCKNODE>
            }</ITERNODE></CALLNODE>
          }</ITERNODE></FCALLNODE>
          <CALLNODE><INSTVARNODE>@name2addr</INSTVARNODE>.each <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>arr</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE> <CALLNODE><DVARNODE>arr</DVARNODE>.reverse!</CALLNODE>}</ITERNODE></CALLNODE>
          <INSTASGNNODE>@initialized = <TRUENODE>true</TRUENODE></INSTASGNNODE></BLOCKNODE>
        end</IFNODE>
      }</ITERNODE></CALLNODE>
      <SELFNODE>self</SELFNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getaddress</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><FCALLNODE>each_address<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>address</DASGNNODE>| <RETURNNODE>return <DVARNODE>address</DVARNODE></RETURNNODE>}</ITERNODE></FCALLNODE>
      <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE>(<DSTRNODE>"<EVSTRNODE>#{<INSTVARNODE>@filename</INSTVARNODE>}</EVSTRNODE><STRNODE> has no name: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getaddresses</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><LOCALASGNNODE>ret = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
      <FCALLNODE>each_address<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>address</DASGNNODE>| <CALLNODE><LOCALVARNODE>ret</LOCALVARNODE> &lt;&lt; <ARRAYNODE><DVARNODE>address</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></FCALLNODE>
      <RETURNNODE>return <LOCALVARNODE>ret</LOCALVARNODE></RETURNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>each_address</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>, <BLOCKARGNODE>&amp;proc</BLOCKARGNODE>)</ARGSNODE>
      <BLOCKNODE><VCALLNODE>lazy_initialize</VCALLNODE>
      <IFNODE>if <CALLNODE><INSTVARNODE>@name2addr</INSTVARNODE>.include?<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
        <CALLNODE><CALLNODE><INSTVARNODE>@name2addr</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>name</LOCALVARNODE></ARRAYNODE></CALLNODE>].each<BLOCKPASSNODE>(&amp;<LOCALVARNODE>proc</LOCALVARNODE>)</BLOCKPASSNODE></CALLNODE>
      end</IFNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getname</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><FCALLNODE>each_name<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <RETURNNODE>return <DVARNODE>name</DVARNODE></RETURNNODE>}</ITERNODE></FCALLNODE>
      <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE>(<DSTRNODE>"<EVSTRNODE>#{<INSTVARNODE>@filename</INSTVARNODE>}</EVSTRNODE><STRNODE> has no address: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>address</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getnames</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><LOCALASGNNODE>ret = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
      <FCALLNODE>each_name<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <CALLNODE><LOCALVARNODE>ret</LOCALVARNODE> &lt;&lt; <ARRAYNODE><DVARNODE>name</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></FCALLNODE>
      <RETURNNODE>return <LOCALVARNODE>ret</LOCALVARNODE></RETURNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>each_name</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>, <BLOCKARGNODE>&amp;proc</BLOCKARGNODE>)</ARGSNODE>
      <BLOCKNODE><VCALLNODE>lazy_initialize</VCALLNODE>
      <IFNODE>if <CALLNODE><INSTVARNODE>@addr2name</INSTVARNODE>.include?<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
        <CALLNODE><CALLNODE><INSTVARNODE>@addr2name</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>address</LOCALVARNODE></ARRAYNODE></CALLNODE>].each<BLOCKPASSNODE>(&amp;<LOCALVARNODE>proc</LOCALVARNODE>)</BLOCKPASSNODE></CALLNODE>
      end</IFNODE></BLOCKNODE>
    end</DEFNNODE></BLOCKNODE>
  end</CLASSNODE>

  <CLASSNODE>class <COLON2NODE>DNS</COLON2NODE>
    # STD0013 (RFC 1035, etc.)
    # ftp://ftp.isi.edu/in-notes/iana/assignments/dns-parameters

    <BLOCKNODE><CONSTDECLNODE>Port = <FIXNUMNODE>53</FIXNUMNODE></CONSTDECLNODE>
    <CONSTDECLNODE>UDPSize = <FIXNUMNODE>512</FIXNUMNODE></CONSTDECLNODE>

    <CONSTDECLNODE>DNSThreadGroup = <CALLNODE><CONSTNODE>ThreadGroup</CONSTNODE>.new</CALLNODE></CONSTDECLNODE>

    <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>open</ARGUMENTNODE><ARGSNODE>(<RESTARG>*args</RESTARG>)</ARGSNODE>
      <BLOCKNODE><LOCALASGNNODE>dns = <FCALLNODE>new<SPLATNODE>(*<LOCALVARNODE>args</LOCALVARNODE>)</SPLATNODE></FCALLNODE></LOCALASGNNODE>
      <IFNODE><RETURNNODE>return <LOCALVARNODE>dns</LOCALVARNODE></RETURNNODE> unless <FCALLNODE>block_given?</FCALLNODE></IFNODE>
      <BEGINNODE>begin
        <YIELDNODE>yield <LOCALVARNODE>dns</LOCALVARNODE></YIELDNODE>
<ENSURENODE>      ensure
        <CALLNODE><LOCALVARNODE>dns</LOCALVARNODE>.close</CALLNODE>
      end</ENSURENODE></BEGINNODE></BLOCKNODE>
    end</DEFSNODE>

    <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>config_info=<NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
      <BLOCKNODE><INSTASGNNODE>@mutex = <CALLNODE><CONSTNODE>Mutex</CONSTNODE>.new</CALLNODE></INSTASGNNODE>
      <INSTASGNNODE>@config = <CALLNODE><CONSTNODE>Config</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>config_info</LOCALVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE>
      <INSTASGNNODE>@initialized = <NILNODE>nil</NILNODE></INSTASGNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>lazy_initialize</ARGUMENTNODE><ARGSNODE/>
      <BLOCKNODE><CALLNODE><INSTVARNODE>@mutex</INSTVARNODE>.synchronize <ITERNODE>{
        <IFNODE>unless <INSTVARNODE>@initialized</INSTVARNODE>
          <BLOCKNODE><CALLNODE><INSTVARNODE>@config</INSTVARNODE>.lazy_initialize</CALLNODE>

          <IFNODE>if <DASGNNODE>nameserver = <CALLNODE><INSTVARNODE>@config</INSTVARNODE>.single?</CALLNODE></DASGNNODE>
            <INSTASGNNODE>@requester = <CALLNODE><COLON2NODE><CONSTNODE>Requester</CONSTNODE>::ConnectedUDP</COLON2NODE>.new<ARRAYNODE>(<DVARNODE>nameserver</DVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE>
          else
            <INSTASGNNODE>@requester = <CALLNODE><COLON2NODE><CONSTNODE>Requester</CONSTNODE>::UnconnectedUDP</COLON2NODE>.new</CALLNODE></INSTASGNNODE>
          end</IFNODE>

          <INSTASGNNODE>@initialized = <TRUENODE>true</TRUENODE></INSTASGNNODE></BLOCKNODE>
        end</IFNODE>
      }</ITERNODE></CALLNODE>
      <SELFNODE>self</SELFNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>close</ARGUMENTNODE><ARGSNODE/>
      <CALLNODE><INSTVARNODE>@mutex</INSTVARNODE>.synchronize <ITERNODE>{
        <IFNODE>if <INSTVARNODE>@initialized</INSTVARNODE>
          <BLOCKNODE><IFNODE><CALLNODE><INSTVARNODE>@requester</INSTVARNODE>.close</CALLNODE> if <INSTVARNODE>@requester</INSTVARNODE></IFNODE>
          <INSTASGNNODE>@requester = <NILNODE>nil</NILNODE></INSTASGNNODE>
          <INSTASGNNODE>@initialized = <FALSENODE>false</FALSENODE></INSTASGNNODE></BLOCKNODE>
        end</IFNODE>
      }</ITERNODE></CALLNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getaddress</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><FCALLNODE>each_address<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>address</DASGNNODE>| <RETURNNODE>return <DVARNODE>address</DVARNODE></RETURNNODE>}</ITERNODE></FCALLNODE>
      <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"DNS result has no information for </STRNODE><EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getaddresses</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><LOCALASGNNODE>ret = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
      <FCALLNODE>each_address<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>address</DASGNNODE>| <CALLNODE><LOCALVARNODE>ret</LOCALVARNODE> &lt;&lt; <ARRAYNODE><DVARNODE>address</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></FCALLNODE>
      <RETURNNODE>return <LOCALVARNODE>ret</LOCALVARNODE></RETURNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>each_address</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <FCALLNODE>each_resource<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <COLON2NODE><COLON2NODE><CONSTNODE>Resource</CONSTNODE>::IN</COLON2NODE>::A</COLON2NODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>resource</DASGNNODE>| <YIELDNODE>yield <CALLNODE><DVARNODE>resource</DVARNODE>.address</CALLNODE></YIELDNODE>}</ITERNODE></FCALLNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getname</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><FCALLNODE>each_name<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <RETURNNODE>return <DVARNODE>name</DVARNODE></RETURNNODE>}</ITERNODE></FCALLNODE>
      <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"DNS result has no information for </STRNODE><EVSTRNODE>#{<LOCALVARNODE>address</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getnames</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><LOCALASGNNODE>ret = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
      <FCALLNODE>each_name<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <CALLNODE><LOCALVARNODE>ret</LOCALVARNODE> &lt;&lt; <ARRAYNODE><DVARNODE>name</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></FCALLNODE>
      <RETURNNODE>return <LOCALVARNODE>ret</LOCALVARNODE></RETURNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>each_name</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><CASENODE>case <LOCALVARNODE>address</LOCALVARNODE>
      <ARRAYNODE><WHENNODE>when <CONSTNODE>Name</CONSTNODE>
        <LOCALASGNNODE>ptr = <LOCALVARNODE>address</LOCALVARNODE></LOCALASGNNODE></WHENNODE>
      <WHENNODE>when <COLON2NODE><CONSTNODE>IPv4</CONSTNODE>::Regex</COLON2NODE>
        <LOCALASGNNODE>ptr = <CALLNODE><CALLNODE><CONSTNODE>IPv4</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE>.to_name</CALLNODE></LOCALASGNNODE></WHENNODE>
      <WHENNODE>when <COLON2NODE><CONSTNODE>IPv6</CONSTNODE>::Regex</COLON2NODE>
        <LOCALASGNNODE>ptr = <CALLNODE><CALLNODE><CONSTNODE>IPv6</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE>.to_name</CALLNODE></LOCALASGNNODE></WHENNODE></ARRAYNODE>
      else
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"cannot interpret as address: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>address</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
      end</CASENODE>
      <FCALLNODE>each_resource<ARRAYNODE>(<LOCALVARNODE>ptr</LOCALVARNODE>, <COLON2NODE><COLON2NODE><CONSTNODE>Resource</CONSTNODE>::IN</COLON2NODE>::PTR</COLON2NODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>resource</DASGNNODE>| <YIELDNODE>yield <CALLNODE><DVARNODE>resource</DVARNODE>.name</CALLNODE></YIELDNODE>}</ITERNODE></FCALLNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getresource</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>typeclass</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><FCALLNODE>each_resource<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>typeclass</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>resource</DASGNNODE>| <RETURNNODE>return <DVARNODE>resource</DVARNODE></RETURNNODE>}</ITERNODE></FCALLNODE>
      <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"DNS result has no information for </STRNODE><EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>getresources</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>typeclass</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><LOCALASGNNODE>ret = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
      <FCALLNODE>each_resource<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>typeclass</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>resource</DASGNNODE>| <CALLNODE><LOCALVARNODE>ret</LOCALVARNODE> &lt;&lt; <ARRAYNODE><DVARNODE>resource</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></FCALLNODE>
      <RETURNNODE>return <LOCALVARNODE>ret</LOCALVARNODE></RETURNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>each_resource</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>typeclass</ARGUMENTNODE></LISTNODE>, <BLOCKARGNODE>&amp;proc</BLOCKARGNODE>)</ARGSNODE>
      <BLOCKNODE><VCALLNODE>lazy_initialize</VCALLNODE>
      <LOCALASGNNODE>q = <CALLNODE><CONSTNODE>Queue</CONSTNODE>.new</CALLNODE></LOCALASGNNODE>
      <LOCALASGNNODE>senders = <HASHNODE>{}</HASHNODE></LOCALASGNNODE><ARRAYNODE/>
      <BEGINNODE>begin
        <CALLNODE><INSTVARNODE>@config</INSTVARNODE>.resolv<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>candidate</DASGNNODE>, <DASGNNODE>tout</DASGNNODE>, <DASGNNODE>nameserver</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
          <BLOCKNODE><DASGNNODE>msg = <CALLNODE><CONSTNODE>Message</CONSTNODE>.new</CALLNODE></DASGNNODE>
          <ATTRASSIGNNODE><DVARNODE>msg</DVARNODE>.rd = <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></ATTRASSIGNNODE>
          <CALLNODE><DVARNODE>msg</DVARNODE>.add_question<ARRAYNODE>(<DVARNODE>candidate</DVARNODE>, <LOCALVARNODE>typeclass</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
          <IFNODE>unless <DASGNNODE>sender = <CALLNODE><LOCALVARNODE>senders</LOCALVARNODE>[<ARRAYNODE><ARRAYNODE>[<DVARNODE>candidate</DVARNODE>, <DVARNODE>nameserver</DVARNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
            <DASGNNODE>sender = <ATTRASSIGNNODE><LOCALVARNODE>senders</LOCALVARNODE>[<ARRAYNODE><ARRAYNODE>[<DVARNODE>candidate</DVARNODE>, <DVARNODE>nameserver</DVARNODE>]</ARRAYNODE>] =
              <CALLNODE><INSTVARNODE>@requester</INSTVARNODE>.sender<ARRAYNODE>(<DVARNODE>msg</DVARNODE>, <DVARNODE>candidate</DVARNODE>, <LOCALVARNODE>q</LOCALVARNODE>, <DVARNODE>nameserver</DVARNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE></DASGNNODE>
          end</IFNODE>
          <CALLNODE><DVARNODE>sender</DVARNODE>.send</CALLNODE>
          <DASGNNODE>reply = <DASGNNODE>reply_name = <NILNODE>nil</NILNODE></DASGNNODE></DASGNNODE>
          <FCALLNODE>timeout<ARRAYNODE>(<DVARNODE>tout</DVARNODE>, <CONSTNODE>ResolvTimeout</CONSTNODE>)</ARRAYNODE> <ITERNODE>{ <MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>reply</DASGNNODE>, <DASGNNODE>reply_name</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><LOCALVARNODE>q</LOCALVARNODE>.pop</CALLNODE> }</TOARYNODE></ITERNODE></FCALLNODE>
          <CASENODE>case <CALLNODE><DVARNODE>reply</DVARNODE>.rcode</CALLNODE>
          <ARRAYNODE><WHENNODE>when <COLON2NODE><CONSTNODE>RCode</CONSTNODE>::NoError</COLON2NODE>
            <BLOCKNODE><FCALLNODE>extract_resources<BLOCKPASSNODE>(<ARRAYNODE><DVARNODE>reply</DVARNODE>, <DVARNODE>reply_name</DVARNODE>, <LOCALVARNODE>typeclass</LOCALVARNODE></ARRAYNODE>, &amp;<LOCALVARNODE>proc</LOCALVARNODE>)</BLOCKPASSNODE></FCALLNODE>
            <RETURNNODE>return</RETURNNODE></BLOCKNODE></WHENNODE>
          <WHENNODE>when <COLON2NODE><CONSTNODE>RCode</CONSTNODE>::NXDomain</COLON2NODE>
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><COLON2NODE><CONSTNODE>Config</CONSTNODE>::NXDomain</COLON2NODE>.new<ARRAYNODE>(<CALLNODE><DVARNODE>reply_name</DVARNODE>.to_s</CALLNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></WHENNODE></ARRAYNODE>
          else
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><COLON2NODE><CONSTNODE>Config</CONSTNODE>::OtherResolvError</COLON2NODE>.new<ARRAYNODE>(<CALLNODE><DVARNODE>reply_name</DVARNODE>.to_s</CALLNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
          end</CASENODE></BLOCKNODE>
        }</ITERNODE></CALLNODE>
<ENSURENODE>      ensure
        <CALLNODE><INSTVARNODE>@requester</INSTVARNODE>.delete<ARRAYNODE>(<LOCALVARNODE>q</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
      end</ENSURENODE></BEGINNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>extract_resources</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE>, <ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>typeclass</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><IFNODE>if <CALLNODE><LOCALVARNODE>typeclass</LOCALVARNODE> &lt; <ARRAYNODE><COLON2NODE><CONSTNODE>Resource</CONSTNODE>::ANY</COLON2NODE></ARRAYNODE></CALLNODE>
        <BLOCKNODE><LOCALASGNNODE>n0 = <CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
        <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.each_answer <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>n</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
          <IFNODE><YIELDNODE>yield <DVARNODE>data</DVARNODE></YIELDNODE> if <CALLNODE><LOCALVARNODE>n0</LOCALVARNODE> == <ARRAYNODE><DVARNODE>n</DVARNODE></ARRAYNODE></CALLNODE></IFNODE>
        }</ITERNODE></CALLNODE></BLOCKNODE>
      end</IFNODE>
      <LOCALASGNNODE>yielded = <FALSENODE>false</FALSENODE></LOCALASGNNODE>
      <LOCALASGNNODE>n0 = <CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
      <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.each_answer <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>n</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
        <IFNODE>if <CALLNODE><LOCALVARNODE>n0</LOCALVARNODE> == <ARRAYNODE><DVARNODE>n</DVARNODE></ARRAYNODE></CALLNODE>
          <CASENODE>case <DVARNODE>data</DVARNODE>
          <ARRAYNODE><WHENNODE>when <LOCALVARNODE>typeclass</LOCALVARNODE>
            <BLOCKNODE><YIELDNODE>yield <DVARNODE>data</DVARNODE></YIELDNODE>
            <LOCALASGNNODE>yielded = <TRUENODE>true</TRUENODE></LOCALASGNNODE></BLOCKNODE></WHENNODE>
          <WHENNODE>when <COLON2NODE><CONSTNODE>Resource</CONSTNODE>::CNAME</COLON2NODE>
            <LOCALASGNNODE>n0 = <CALLNODE><DVARNODE>data</DVARNODE>.name</CALLNODE></LOCALASGNNODE></WHENNODE></ARRAYNODE>
          end</CASENODE>
        end</IFNODE>
      }</ITERNODE></CALLNODE>
      <IFNODE><RETURNNODE>return</RETURNNODE> if <LOCALVARNODE>yielded</LOCALVARNODE></IFNODE>
      <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.each_answer <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>n</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
        <IFNODE>if <CALLNODE><LOCALVARNODE>n0</LOCALVARNODE> == <ARRAYNODE><DVARNODE>n</DVARNODE></ARRAYNODE></CALLNODE>
          <CASENODE>case <DVARNODE>data</DVARNODE>
          <ARRAYNODE><WHENNODE>when <LOCALVARNODE>typeclass</LOCALVARNODE>
            <YIELDNODE>yield <DVARNODE>data</DVARNODE></YIELDNODE></WHENNODE></ARRAYNODE>
          end</CASENODE>
        end</IFNODE>
      }</ITERNODE></CALLNODE></BLOCKNODE>
    end</DEFNNODE>

    <CLASSNODE>class <COLON2NODE>Requester</COLON2NODE>
      <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE/>
        <INSTASGNNODE>@senders = <HASHNODE>{}</HASHNODE></INSTASGNNODE><ARRAYNODE/>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>close</ARGUMENTNODE><ARGSNODE/>
        <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><LOCALASGNNODE>thread</LOCALASGNNODE>, <LOCALASGNNODE>sock</LOCALASGNNODE>, <INSTASGNNODE>@thread</INSTASGNNODE>, <INSTASGNNODE>@sock</INSTASGNNODE></ARRAYNODE> = <ARRAYNODE><INSTVARNODE>@thread</INSTVARNODE>, <INSTVARNODE>@sock</INSTVARNODE></ARRAYNODE></MULTIPLEASGNNODE>
        <BEGINNODE>begin
          <IFNODE>if <LOCALVARNODE>thread</LOCALVARNODE>
            <BLOCKNODE><CALLNODE><LOCALVARNODE>thread</LOCALVARNODE>.kill</CALLNODE>
            <CALLNODE><LOCALVARNODE>thread</LOCALVARNODE>.join</CALLNODE></BLOCKNODE>
          end</IFNODE>
<ENSURENODE>        ensure
          <IFNODE><CALLNODE><LOCALVARNODE>sock</LOCALVARNODE>.close</CALLNODE> if <LOCALVARNODE>sock</LOCALVARNODE></IFNODE>
        end</ENSURENODE></BEGINNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>delete</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>arg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <CASENODE>case <LOCALVARNODE>arg</LOCALVARNODE>
        <ARRAYNODE><WHENNODE>when <CONSTNODE>Sender</CONSTNODE>
          <CALLNODE><INSTVARNODE>@senders</INSTVARNODE>.delete_if <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>k</DASGNNODE>, <DASGNNODE>s</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE> <CALLNODE><DVARNODE>s</DVARNODE> == <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></WHENNODE>
        <WHENNODE>when <CONSTNODE>Queue</CONSTNODE>
          <CALLNODE><INSTVARNODE>@senders</INSTVARNODE>.delete_if <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>k</DASGNNODE>, <DASGNNODE>s</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE> <CALLNODE><CALLNODE><DVARNODE>s</DVARNODE>.queue</CALLNODE> == <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></WHENNODE></ARRAYNODE>
        else
          <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"neither Sender or Queue: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>arg</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
        end</CASENODE>
      end</DEFNNODE>

      <CLASSNODE>class <COLON2NODE>Sender</COLON2NODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE>, <ARGUMENTNODE>sock</ARGUMENTNODE>, <ARGUMENTNODE>queue</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><INSTASGNNODE>@msg = <LOCALVARNODE>msg</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@data = <LOCALVARNODE>data</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@sock = <LOCALVARNODE>sock</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@queue = <LOCALVARNODE>queue</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:queue</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>recv</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <CALLNODE><INSTVARNODE>@queue</INSTVARNODE>.push<ARRAYNODE>(<ARRAYNODE>[<LOCALVARNODE>msg</LOCALVARNODE>, <INSTVARNODE>@data</INSTVARNODE>]</ARRAYNODE>)</ARRAYNODE></CALLNODE>
        end</DEFNNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>UnconnectedUDP</COLON2NODE> &lt; <CONSTNODE>Requester</CONSTNODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE/>
          <BLOCKNODE><SUPERNODE>super</SUPERNODE><ARRAYNODE>()</ARRAYNODE>
          <INSTASGNNODE>@sock = <CALLNODE><CONSTNODE>UDPSocket</CONSTNODE>.new</CALLNODE></INSTASGNNODE>
          <IFNODE><CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.fcntl<ARRAYNODE>(<COLON2NODE><CONSTNODE>Fcntl</CONSTNODE>::F_SETFD</COLON2NODE>, <FIXNUMNODE>1</FIXNUMNODE>)</ARRAYNODE></CALLNODE> if defined?<DEFINEDNODE> <COLON2NODE><CONSTNODE>Fcntl</CONSTNODE>::F_SETFD</COLON2NODE>
</DEFINEDNODE></IFNODE>          <INSTASGNNODE>@id = <HASHNODE>{}</HASHNODE></INSTASGNNODE><ARRAYNODE/>
          <ATTRASSIGNNODE><INSTVARNODE>@id</INSTVARNODE>.default = -<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></ATTRASSIGNNODE>
          <INSTASGNNODE>@thread = <CALLNODE><CONSTNODE>Thread</CONSTNODE>.new <ITERNODE>{
            <BLOCKNODE><CALLNODE><CONSTNODE>DNSThreadGroup</CONSTNODE>.add <ARRAYNODE><CALLNODE><CONSTNODE>Thread</CONSTNODE>.current</CALLNODE></ARRAYNODE></CALLNODE>
            <FCALLNODE>loop <ITERNODE>{
              <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>reply</DASGNNODE>, <DASGNNODE>from</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.recvfrom<ARRAYNODE>(<CONSTNODE>UDPSize</CONSTNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>              <DASGNNODE>msg = <BEGINNODE>begin
                <RESCUENODE><CALLNODE><CONSTNODE>Message</CONSTNODE>.decode<ARRAYNODE>(<DVARNODE>reply</DVARNODE>)</ARRAYNODE></CALLNODE>
              <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>DecodeError</CONSTNODE></ARRAYNODE>
                <BLOCKNODE><CALLNODE><CONSTNODE>STDERR</CONSTNODE>.print<ARRAYNODE><STRNODE>(<DSTRNODE>"DNS message decoding error: </STRNODE><EVSTRNODE>#{<CALLNODE><DVARNODE>reply</DVARNODE>.inspect</CALLNODE>}</EVSTRNODE><STRNODE>\n</STRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE>
                <NEXTNODE>next</NEXTNODE></BLOCKNODE>
              end</RESCUEBODYNODE></RESCUENODE></BEGINNODE></DASGNNODE>
              <IFNODE>if <DASGNNODE>s = <CALLNODE><INSTVARNODE>@senders</INSTVARNODE>[<ARRAYNODE><ARRAYNODE>[<ARRAYNODE>[<CALLNODE><DVARNODE>from</DVARNODE>[<ARRAYNODE><FIXNUMNODE>3</FIXNUMNODE></ARRAYNODE></CALLNODE>],<CALLNODE><DVARNODE>from</DVARNODE>[<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>]]</ARRAYNODE>,<CALLNODE><DVARNODE>msg</DVARNODE>.id</CALLNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
                <CALLNODE><DVARNODE>s</DVARNODE>.recv <ARRAYNODE><DVARNODE>msg</DVARNODE></ARRAYNODE></CALLNODE>
              else
                #STDERR.print("non-handled DNS message: #{msg.inspect} from #{from.inspect}\n")
              end</IFNODE></BLOCKNODE>
            }</ITERNODE></FCALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>sender</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE>, <ARGUMENTNODE>queue</ARGUMENTNODE>, <ARGUMENTNODE>host</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>port=<CONSTNODE>Port</CONSTNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>service = <ARRAYNODE>[<LOCALVARNODE>host</LOCALVARNODE>, <LOCALVARNODE>port</LOCALVARNODE>]</ARRAYNODE></LOCALASGNNODE>
          <LOCALASGNNODE>id = <CALLNODE><CONSTNODE>Thread</CONSTNODE>.exclusive <ITERNODE>{
            <ATTRASSIGNNODE><INSTVARNODE>@id</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>service</LOCALVARNODE>] = <CALLNODE>(<CALLNODE><CALLNODE><INSTVARNODE>@id</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>service</LOCALVARNODE></ARRAYNODE></CALLNODE>] + <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>0xffff</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          }</ITERNODE></CALLNODE></LOCALASGNNODE>
          <LOCALASGNNODE>request = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.encode</CALLNODE></LOCALASGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>request</LOCALVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE>,<FIXNUMNODE>2</FIXNUMNODE>] = <CALLNODE><ARRAYNODE>[<LOCALVARNODE>id</LOCALVARNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <RETURNNODE>return <ATTRASSIGNNODE><INSTVARNODE>@senders</INSTVARNODE>[<ARRAYNODE><ARRAYNODE>[<LOCALVARNODE>service</LOCALVARNODE>, <LOCALVARNODE>id</LOCALVARNODE>]</ARRAYNODE>] =
            <CALLNODE><CONSTNODE>Sender</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>request</LOCALVARNODE>, <LOCALVARNODE>data</LOCALVARNODE>, <INSTVARNODE>@sock</INSTVARNODE>, <LOCALVARNODE>host</LOCALVARNODE>, <LOCALVARNODE>port</LOCALVARNODE>, <LOCALVARNODE>queue</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <CLASSNODE>class <COLON2NODE>Sender</COLON2NODE> &lt; <COLON2NODE><CONSTNODE>Requester</CONSTNODE>::Sender</COLON2NODE>
          <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE>, <ARGUMENTNODE>sock</ARGUMENTNODE>, <ARGUMENTNODE>host</ARGUMENTNODE>, <ARGUMENTNODE>port</ARGUMENTNODE>, <ARGUMENTNODE>queue</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <BLOCKNODE><SUPERNODE>super</SUPERNODE><ARRAYNODE>(<LOCALVARNODE>msg</LOCALVARNODE>, <LOCALVARNODE>data</LOCALVARNODE>, <LOCALVARNODE>sock</LOCALVARNODE>, <LOCALVARNODE>queue</LOCALVARNODE>)</ARRAYNODE>
            <INSTASGNNODE>@host = <LOCALVARNODE>host</LOCALVARNODE></INSTASGNNODE>
            <INSTASGNNODE>@port = <LOCALVARNODE>port</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
          end</DEFNNODE>

          <DEFNNODE>def <ARGUMENTNODE>send</ARGUMENTNODE><ARGSNODE/>
            <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.send<ARRAYNODE>(<INSTVARNODE>@msg</INSTVARNODE>, <FIXNUMNODE>0</FIXNUMNODE>, <INSTVARNODE>@host</INSTVARNODE>, <INSTVARNODE>@port</INSTVARNODE>)</ARRAYNODE></CALLNODE>
          end</DEFNNODE></BLOCKNODE>
        end</CLASSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>ConnectedUDP</COLON2NODE> &lt; <CONSTNODE>Requester</CONSTNODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>host</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>port=<CONSTNODE>Port</CONSTNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
          <BLOCKNODE><SUPERNODE>super</SUPERNODE><ARRAYNODE>()</ARRAYNODE>
          <INSTASGNNODE>@host = <LOCALVARNODE>host</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@port = <LOCALVARNODE>port</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@sock = <CALLNODE><CONSTNODE>UDPSocket</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>host</LOCALVARNODE>.index<ARRAYNODE>(<STRNODE>':'</STRNODE>)</ARRAYNODE></CALLNODE><IFNODE> ? <COLON2NODE><CONSTNODE>Socket</CONSTNODE>::AF_INET6</COLON2NODE> : <COLON2NODE><CONSTNODE>Socket</CONSTNODE>::AF_INET</COLON2NODE>)</IFNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>
          <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.connect<ARRAYNODE>(<LOCALVARNODE>host</LOCALVARNODE>, <LOCALVARNODE>port</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
          <IFNODE><CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.fcntl<ARRAYNODE>(<COLON2NODE><CONSTNODE>Fcntl</CONSTNODE>::F_SETFD</COLON2NODE>, <FIXNUMNODE>1</FIXNUMNODE>)</ARRAYNODE></CALLNODE> if defined?<DEFINEDNODE> <COLON2NODE><CONSTNODE>Fcntl</CONSTNODE>::F_SETFD</COLON2NODE>
</DEFINEDNODE></IFNODE>          <INSTASGNNODE>@id = -<FIXNUMNODE>1</FIXNUMNODE></INSTASGNNODE>
          <INSTASGNNODE>@thread = <CALLNODE><CONSTNODE>Thread</CONSTNODE>.new <ITERNODE>{
            <BLOCKNODE><CALLNODE><CONSTNODE>DNSThreadGroup</CONSTNODE>.add <ARRAYNODE><CALLNODE><CONSTNODE>Thread</CONSTNODE>.current</CALLNODE></ARRAYNODE></CALLNODE>
            <FCALLNODE>loop <ITERNODE>{
              <BLOCKNODE><DASGNNODE>reply = <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.recv<ARRAYNODE>(<CONSTNODE>UDPSize</CONSTNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
              <DASGNNODE>msg = <BEGINNODE>begin
                <RESCUENODE><CALLNODE><CONSTNODE>Message</CONSTNODE>.decode<ARRAYNODE>(<DVARNODE>reply</DVARNODE>)</ARRAYNODE></CALLNODE>
              <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>DecodeError</CONSTNODE></ARRAYNODE>
                <BLOCKNODE><CALLNODE><CONSTNODE>STDERR</CONSTNODE>.print<ARRAYNODE><STRNODE>(<DSTRNODE>"DNS message decoding error: </STRNODE><EVSTRNODE>#{<CALLNODE><DVARNODE>reply</DVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE>
                <NEXTNODE>next</NEXTNODE></BLOCKNODE>
              end</RESCUEBODYNODE></RESCUENODE></BEGINNODE></DASGNNODE>
              <IFNODE>if <DASGNNODE>s = <CALLNODE><INSTVARNODE>@senders</INSTVARNODE>[<ARRAYNODE><CALLNODE><DVARNODE>msg</DVARNODE>.id</CALLNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
                <CALLNODE><DVARNODE>s</DVARNODE>.recv <ARRAYNODE><DVARNODE>msg</DVARNODE></ARRAYNODE></CALLNODE>
              else
                #STDERR.print("non-handled DNS message: #{msg.inspect}")
              end</IFNODE></BLOCKNODE>
            }</ITERNODE></FCALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>sender</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE>, <ARGUMENTNODE>queue</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>host=<INSTVARNODE>@host</INSTVARNODE></LOCALASGNNODE><BLOCKNODE>, <LOCALASGNNODE>port=<INSTVARNODE>@port</INSTVARNODE></LOCALASGNNODE></BLOCKNODE>)</ARGSNODE>
          <BLOCKNODE><IFNODE>unless <ANDNODE><CALLNODE><LOCALVARNODE>host</LOCALVARNODE> == <ARRAYNODE><INSTVARNODE>@host</INSTVARNODE></ARRAYNODE></CALLNODE> &amp;&amp; <CALLNODE><LOCALVARNODE>port</LOCALVARNODE> == <ARRAYNODE><INSTVARNODE>@port</INSTVARNODE></ARRAYNODE></CALLNODE></ANDNODE>
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>RequestError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"host/port don't match: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>host</LOCALVARNODE>}</EVSTRNODE><STRNODE>:</STRNODE><EVSTRNODE>#{<LOCALVARNODE>port</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
          end</IFNODE>
          <LOCALASGNNODE>id = <CALLNODE><CONSTNODE>Thread</CONSTNODE>.exclusive <ITERNODE>{ <INSTASGNNODE>@id = <CALLNODE>(<CALLNODE><INSTVARNODE>@id</INSTVARNODE> + <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>0xffff</FIXNUMNODE></ARRAYNODE></CALLNODE></INSTASGNNODE> }</ITERNODE></CALLNODE></LOCALASGNNODE>
          <LOCALASGNNODE>request = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.encode</CALLNODE></LOCALASGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>request</LOCALVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE>,<FIXNUMNODE>2</FIXNUMNODE>] = <CALLNODE><ARRAYNODE>[<LOCALVARNODE>id</LOCALVARNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <RETURNNODE>return <ATTRASSIGNNODE><INSTVARNODE>@senders</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>id</LOCALVARNODE>] = <CALLNODE><CONSTNODE>Sender</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>request</LOCALVARNODE>, <LOCALVARNODE>data</LOCALVARNODE>, <INSTVARNODE>@sock</INSTVARNODE>, <LOCALVARNODE>queue</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <CLASSNODE>class <COLON2NODE>Sender</COLON2NODE> &lt; <COLON2NODE><CONSTNODE>Requester</CONSTNODE>::Sender</COLON2NODE>
          <DEFNNODE>def <ARGUMENTNODE>send</ARGUMENTNODE><ARGSNODE/>
            <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.send<ARRAYNODE>(<INSTVARNODE>@msg</INSTVARNODE>, <FIXNUMNODE>0</FIXNUMNODE>)</ARRAYNODE></CALLNODE>
          end</DEFNNODE>
        end</CLASSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>TCP</COLON2NODE> &lt; <CONSTNODE>Requester</CONSTNODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>host</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>port=<CONSTNODE>Port</CONSTNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
          <BLOCKNODE><SUPERNODE>super</SUPERNODE><ARRAYNODE>()</ARRAYNODE>
          <INSTASGNNODE>@host = <LOCALVARNODE>host</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@port = <LOCALVARNODE>port</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@sock = <CALLNODE><CONSTNODE>TCPSocket</CONSTNODE>.new</CALLNODE></INSTASGNNODE>
          <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.connect<ARRAYNODE>(<LOCALVARNODE>host</LOCALVARNODE>, <LOCALVARNODE>port</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
          <IFNODE><CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.fcntl<ARRAYNODE>(<COLON2NODE><CONSTNODE>Fcntl</CONSTNODE>::F_SETFD</COLON2NODE>, <FIXNUMNODE>1</FIXNUMNODE>)</ARRAYNODE></CALLNODE> if defined?<DEFINEDNODE> <COLON2NODE><CONSTNODE>Fcntl</CONSTNODE>::F_SETFD</COLON2NODE>
</DEFINEDNODE></IFNODE>          <INSTASGNNODE>@id = -<FIXNUMNODE>1</FIXNUMNODE></INSTASGNNODE>
          <INSTASGNNODE>@senders = <HASHNODE>{}</HASHNODE></INSTASGNNODE><ARRAYNODE/>
          <INSTASGNNODE>@thread = <CALLNODE><CONSTNODE>Thread</CONSTNODE>.new <ITERNODE>{
            <BLOCKNODE><CALLNODE><CONSTNODE>DNSThreadGroup</CONSTNODE>.add <ARRAYNODE><CALLNODE><CONSTNODE>Thread</CONSTNODE>.current</CALLNODE></ARRAYNODE></CALLNODE>
            <FCALLNODE>loop <ITERNODE>{
              <BLOCKNODE><DASGNNODE>len = <CALLNODE><CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.read<ARRAYNODE>(<FIXNUMNODE>2</FIXNUMNODE>)</ARRAYNODE></CALLNODE>.unpack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
              <DASGNNODE>reply = <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.read<ARRAYNODE>(<DVARNODE>len</DVARNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
              <DASGNNODE>msg = <BEGINNODE>begin
                <RESCUENODE><CALLNODE><CONSTNODE>Message</CONSTNODE>.decode<ARRAYNODE>(<DVARNODE>reply</DVARNODE>)</ARRAYNODE></CALLNODE>
              <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>DecodeError</CONSTNODE></ARRAYNODE>
                <BLOCKNODE><CALLNODE><CONSTNODE>STDERR</CONSTNODE>.print<ARRAYNODE><STRNODE>(<DSTRNODE>"DNS message decoding error: </STRNODE><EVSTRNODE>#{<CALLNODE><DVARNODE>reply</DVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE>
                <NEXTNODE>next</NEXTNODE></BLOCKNODE>
              end</RESCUEBODYNODE></RESCUENODE></BEGINNODE></DASGNNODE>
              <IFNODE>if <DASGNNODE>s = <CALLNODE><INSTVARNODE>@senders</INSTVARNODE>[<ARRAYNODE><CALLNODE><DVARNODE>msg</DVARNODE>.id</CALLNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
                <CALLNODE><DVARNODE>s</DVARNODE>.push <ARRAYNODE><DVARNODE>msg</DVARNODE></ARRAYNODE></CALLNODE>
              else
                #STDERR.print("non-handled DNS message: #{msg.inspect}")
              end</IFNODE></BLOCKNODE>
            }</ITERNODE></FCALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>sender</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE>, <ARGUMENTNODE>queue</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>host=<INSTVARNODE>@host</INSTVARNODE></LOCALASGNNODE><BLOCKNODE>, <LOCALASGNNODE>port=<INSTVARNODE>@port</INSTVARNODE></LOCALASGNNODE></BLOCKNODE>)</ARGSNODE>
          <BLOCKNODE><IFNODE>unless <ANDNODE><CALLNODE><LOCALVARNODE>host</LOCALVARNODE> == <ARRAYNODE><INSTVARNODE>@host</INSTVARNODE></ARRAYNODE></CALLNODE> &amp;&amp; <CALLNODE><LOCALVARNODE>port</LOCALVARNODE> == <ARRAYNODE><INSTVARNODE>@port</INSTVARNODE></ARRAYNODE></CALLNODE></ANDNODE>
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>RequestError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"host/port don't match: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>host</LOCALVARNODE>}</EVSTRNODE><STRNODE>:</STRNODE><EVSTRNODE>#{<LOCALVARNODE>port</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
          end</IFNODE>
          <LOCALASGNNODE>id = <CALLNODE><CONSTNODE>Thread</CONSTNODE>.exclusive <ITERNODE>{ <INSTASGNNODE>@id = <CALLNODE>(<CALLNODE><INSTVARNODE>@id</INSTVARNODE> + <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>0xffff</FIXNUMNODE></ARRAYNODE></CALLNODE></INSTASGNNODE> }</ITERNODE></CALLNODE></LOCALASGNNODE>
          <LOCALASGNNODE>request = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.encode</CALLNODE></LOCALASGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>request</LOCALVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE>,<FIXNUMNODE>2</FIXNUMNODE>] = <CALLNODE><ARRAYNODE>[<CALLNODE><LOCALVARNODE>request</LOCALVARNODE>.length</CALLNODE>, <LOCALVARNODE>id</LOCALVARNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'nn'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <RETURNNODE>return <ATTRASSIGNNODE><INSTVARNODE>@senders</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>id</LOCALVARNODE>] = <CALLNODE><CONSTNODE>Sender</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>request</LOCALVARNODE>, <LOCALVARNODE>data</LOCALVARNODE>, <INSTVARNODE>@sock</INSTVARNODE>, <LOCALVARNODE>queue</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <CLASSNODE>class <COLON2NODE>Sender</COLON2NODE> &lt; <COLON2NODE><CONSTNODE>Requester</CONSTNODE>::Sender</COLON2NODE>
          <DEFNNODE>def <ARGUMENTNODE>send</ARGUMENTNODE><ARGSNODE/>
            <BLOCKNODE><CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.print<ARRAYNODE>(<INSTVARNODE>@msg</INSTVARNODE>)</ARRAYNODE></CALLNODE>
            <CALLNODE><INSTVARNODE>@sock</INSTVARNODE>.flush</CALLNODE></BLOCKNODE>
          end</DEFNNODE>
        end</CLASSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>RequestError</COLON2NODE> &lt; <CONSTNODE>StandardError</CONSTNODE>
      end</CLASSNODE></BLOCKNODE>
    end</CLASSNODE>

    <CLASSNODE>class <COLON2NODE>Config</COLON2NODE>
      <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>config_info=<NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
        <BLOCKNODE><INSTASGNNODE>@mutex = <CALLNODE><CONSTNODE>Mutex</CONSTNODE>.new</CALLNODE></INSTASGNNODE>
        <INSTASGNNODE>@config_info = <LOCALVARNODE>config_info</LOCALVARNODE></INSTASGNNODE>
        <INSTASGNNODE>@initialized = <NILNODE>nil</NILNODE></INSTASGNNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFSNODE>def <CONSTNODE>Config</CONSTNODE>.<ARGUMENTNODE>parse_resolv_conf</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>filename</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <BLOCKNODE><LOCALASGNNODE>nameserver = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
        <LOCALASGNNODE>search = <NILNODE>nil</NILNODE></LOCALASGNNODE>
        <LOCALASGNNODE>ndots = <FIXNUMNODE>1</FIXNUMNODE></LOCALASGNNODE>
        <FCALLNODE>open<ARRAYNODE>(<LOCALVARNODE>filename</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>f</DASGNNODE>|
          <CALLNODE><DVARNODE>f</DVARNODE>.each <ITERNODE>{|<DASGNNODE>line</DASGNNODE>|
            <BLOCKNODE><CALLNODE><DVARNODE>line</DVARNODE>.sub!<ARRAYNODE>(/<REGEXPNODE>[#;].*</REGEXPNODE>/, <STRNODE>''</STRNODE>)</ARRAYNODE></CALLNODE>
            <ARRAYNODE><DASGNNODE>keyword</DASGNNODE></ARRAYNODE><MULTIPLEASGNNODE>, *<DASGNNODE>args</DASGNNODE> =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><DVARNODE>line</DVARNODE>.split<ARRAYNODE>(/<REGEXPNODE>\s+</REGEXPNODE>/)</ARRAYNODE></CALLNODE>
</TOARYNODE>            <CALLNODE><DVARNODE>args</DVARNODE>.each <ITERNODE>{ |<DASGNNODE>arg</DASGNNODE>|
              <CALLNODE><DVARNODE>arg</DVARNODE>.untaint</CALLNODE>
            }</ITERNODE></CALLNODE>
            <IFNODE><NEXTNODE>next</NEXTNODE> unless <DVARNODE>keyword</DVARNODE></IFNODE>
            <CASENODE>case <DVARNODE>keyword</DVARNODE>
            <ARRAYNODE><WHENNODE>when <STRNODE>'nameserver'</STRNODE>
              <LOCALASGNNODE><CALLNODE><LOCALVARNODE>nameserver</LOCALVARNODE> += <ARRAYNODE><DVARNODE>args</DVARNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE></WHENNODE>
            <WHENNODE>when <STRNODE>'domain'</STRNODE>
              <BLOCKNODE><IFNODE><NEXTNODE>next</NEXTNODE> if <CALLNODE><DVARNODE>args</DVARNODE>.empty?</CALLNODE></IFNODE>
              <LOCALASGNNODE>search = <ARRAYNODE>[<CALLNODE><DVARNODE>args</DVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE>]]</ARRAYNODE></LOCALASGNNODE></BLOCKNODE></WHENNODE>
            <WHENNODE>when <STRNODE>'search'</STRNODE>
              <BLOCKNODE><IFNODE><NEXTNODE>next</NEXTNODE> if <CALLNODE><DVARNODE>args</DVARNODE>.empty?</CALLNODE></IFNODE>
              <LOCALASGNNODE>search = <DVARNODE>args</DVARNODE></LOCALASGNNODE></BLOCKNODE></WHENNODE>
            <WHENNODE>when <STRNODE>'options'</STRNODE>
              <CALLNODE><DVARNODE>args</DVARNODE>.each <ITERNODE>{|<DASGNNODE>arg</DASGNNODE>|
                <CASENODE>case <DVARNODE>arg</DVARNODE>
                <ARRAYNODE><WHENNODE>when /<REGEXPNODE>\Andots:(\d+)\z</REGEXPNODE>/
                  <LOCALASGNNODE>ndots = <CALLNODE><NTHREFNODE>$1</NTHREFNODE>.to_i</CALLNODE></LOCALASGNNODE></WHENNODE></ARRAYNODE>
                end</CASENODE>
              }</ITERNODE></CALLNODE></WHENNODE></ARRAYNODE>
            end</CASENODE></BLOCKNODE>
          }</ITERNODE></CALLNODE>
        }</ITERNODE></FCALLNODE>
        <RETURNNODE>return <HASHNODE>{ <ARRAYNODE><SYMBOLNODE>:nameserver</SYMBOLNODE> =&gt; <LOCALVARNODE>nameserver</LOCALVARNODE>, <SYMBOLNODE>:search</SYMBOLNODE> =&gt; <LOCALVARNODE>search</LOCALVARNODE>, <SYMBOLNODE>:ndots</SYMBOLNODE> =&gt; <LOCALVARNODE>ndots</LOCALVARNODE></ARRAYNODE> }</HASHNODE></RETURNNODE></BLOCKNODE>
      end</DEFSNODE>

      <DEFSNODE>def <CONSTNODE>Config</CONSTNODE>.<ARGUMENTNODE>default_config_hash</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>filename=<STRNODE>"/etc/resolv.conf"</STRNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
        <BLOCKNODE><IFNODE>if <CALLNODE><CONSTNODE>File</CONSTNODE>.exist? <ARRAYNODE><LOCALVARNODE>filename</LOCALVARNODE></ARRAYNODE></CALLNODE>
          <LOCALASGNNODE>config_hash = <CALLNODE><CONSTNODE>Config</CONSTNODE>.parse_resolv_conf<ARRAYNODE>(<LOCALVARNODE>filename</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
        else
          <IFNODE>if /<MATCH2NODE><REGEXPNODE>mswin32|cygwin|mingw|bccwin</REGEXPNODE></MATCH2NODE>/ =~ <CONSTNODE>RUBY_PLATFORM</CONSTNODE>
            <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><LOCALASGNNODE>search</LOCALASGNNODE>, <LOCALASGNNODE>nameserver</LOCALASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><COLON2NODE><CONSTNODE>Win32</CONSTNODE>::Resolv</COLON2NODE>.get_resolv_info</CALLNODE>
</TOARYNODE>            <LOCALASGNNODE>config_hash = <HASHNODE>{}</HASHNODE></LOCALASGNNODE><ARRAYNODE/>
            <IFNODE><ATTRASSIGNNODE><LOCALVARNODE>config_hash</LOCALVARNODE>[<ARRAYNODE><SYMBOLNODE>:nameserver</SYMBOLNODE>] = <LOCALVARNODE>nameserver</LOCALVARNODE></ARRAYNODE></ATTRASSIGNNODE> if <LOCALVARNODE>nameserver</LOCALVARNODE></IFNODE>
            <IFNODE><ATTRASSIGNNODE><LOCALVARNODE>config_hash</LOCALVARNODE>[<ARRAYNODE><SYMBOLNODE>:search</SYMBOLNODE>] = <CALLNODE><ARRAYNODE>[<LOCALVARNODE>search</LOCALVARNODE>]</ARRAYNODE>.flatten</CALLNODE></ARRAYNODE></ATTRASSIGNNODE> if <LOCALVARNODE>search</LOCALVARNODE></IFNODE></BLOCKNODE>
          end</IFNODE>
        end</IFNODE>
        <LOCALVARNODE>config_hash</LOCALVARNODE></BLOCKNODE>
      end</DEFSNODE>

      <DEFNNODE>def <ARGUMENTNODE>lazy_initialize</ARGUMENTNODE><ARGSNODE/>
        <BLOCKNODE><CALLNODE><INSTVARNODE>@mutex</INSTVARNODE>.synchronize <ITERNODE>{
          <IFNODE>unless <INSTVARNODE>@initialized</INSTVARNODE>
            <BLOCKNODE><INSTASGNNODE>@nameserver = <ZARRAYNODE>[]</ZARRAYNODE></INSTASGNNODE>
            <INSTASGNNODE>@search = <NILNODE>nil</NILNODE></INSTASGNNODE>
            <INSTASGNNODE>@ndots = <FIXNUMNODE>1</FIXNUMNODE></INSTASGNNODE>
            <CASENODE>case <INSTVARNODE>@config_info</INSTVARNODE>
            <ARRAYNODE><WHENNODE>when <NILNODE>nil</NILNODE>
              <DASGNNODE>config_hash = <CALLNODE><CONSTNODE>Config</CONSTNODE>.default_config_hash</CALLNODE></DASGNNODE></WHENNODE>
            <WHENNODE>when <CONSTNODE>String</CONSTNODE>
              <DASGNNODE>config_hash = <CALLNODE><CONSTNODE>Config</CONSTNODE>.parse_resolv_conf<ARRAYNODE>(<INSTVARNODE>@config_info</INSTVARNODE>)</ARRAYNODE></CALLNODE></DASGNNODE></WHENNODE>
            <WHENNODE>when <CONSTNODE>Hash</CONSTNODE>
              <BLOCKNODE><DASGNNODE>config_hash = <CALLNODE><INSTVARNODE>@config_info</INSTVARNODE>.dup</CALLNODE></DASGNNODE>
              <IFNODE>if <CALLNODE><CONSTNODE>String</CONSTNODE> === <ARRAYNODE><CALLNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:nameserver</SYMBOLNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>]
                <ATTRASSIGNNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:nameserver</SYMBOLNODE>] = <ARRAYNODE>[<CALLNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:nameserver</SYMBOLNODE></ARRAYNODE></CALLNODE>]]</ARRAYNODE></ARRAYNODE></ATTRASSIGNNODE>
              end</IFNODE>
              <IFNODE>if <CALLNODE><CONSTNODE>String</CONSTNODE> === <ARRAYNODE><CALLNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:search</SYMBOLNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>]
                <ATTRASSIGNNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:search</SYMBOLNODE>] = <ARRAYNODE>[<CALLNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:search</SYMBOLNODE></ARRAYNODE></CALLNODE>]]</ARRAYNODE></ARRAYNODE></ATTRASSIGNNODE>
              end</IFNODE></BLOCKNODE></WHENNODE></ARRAYNODE>
            else
              <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"invalid resolv configuration: </STRNODE><EVSTRNODE>#{<CALLNODE><INSTVARNODE>@config_info</INSTVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
            end</CASENODE>
            <IFNODE><INSTASGNNODE>@nameserver = <CALLNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:nameserver</SYMBOLNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>] if <CALLNODE><DVARNODE>config_hash</DVARNODE>.include? <ARRAYNODE><SYMBOLNODE>:nameserver</SYMBOLNODE></ARRAYNODE></CALLNODE></IFNODE>
            <IFNODE><INSTASGNNODE>@search = <CALLNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:search</SYMBOLNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>] if <CALLNODE><DVARNODE>config_hash</DVARNODE>.include? <ARRAYNODE><SYMBOLNODE>:search</SYMBOLNODE></ARRAYNODE></CALLNODE></IFNODE>
            <IFNODE><INSTASGNNODE>@ndots = <CALLNODE><DVARNODE>config_hash</DVARNODE>[<ARRAYNODE><SYMBOLNODE>:ndots</SYMBOLNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>] if <CALLNODE><DVARNODE>config_hash</DVARNODE>.include? <ARRAYNODE><SYMBOLNODE>:ndots</SYMBOLNODE></ARRAYNODE></CALLNODE></IFNODE>

            <IFNODE><INSTASGNNODE>@nameserver = <ARRAYNODE>[<STRNODE>'0.0.0.0'</STRNODE>]</ARRAYNODE></INSTASGNNODE> if <CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>.empty?</CALLNODE></IFNODE>
            <IFNODE>if <INSTVARNODE>@search</INSTVARNODE>
              <INSTASGNNODE>@search = <CALLNODE><INSTVARNODE>@search</INSTVARNODE>.map <ITERNODE>{|<DASGNNODE>arg</DASGNNODE>| <CALLNODE><CONSTNODE>Label</CONSTNODE>.split<ARRAYNODE>(<DVARNODE>arg</DVARNODE>)</ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></INSTASGNNODE>
            else
              <BLOCKNODE><DASGNNODE>hostname = <CALLNODE><CONSTNODE>Socket</CONSTNODE>.gethostname</CALLNODE></DASGNNODE>
              <IFNODE>if /<MATCH2NODE><REGEXPNODE>\.</REGEXPNODE></MATCH2NODE>/ =~ <DVARNODE>hostname</DVARNODE>
                <INSTASGNNODE>@search = <ARRAYNODE>[<CALLNODE><CONSTNODE>Label</CONSTNODE>.split<ARRAYNODE>(<BACKREFNODE>$'</BACKREFNODE>)</ARRAYNODE></CALLNODE>]</ARRAYNODE></INSTASGNNODE>
              else
                <INSTASGNNODE>@search = <ARRAYNODE>[<ZARRAYNODE>[]</ZARRAYNODE>]</ARRAYNODE></INSTASGNNODE>
              end</IFNODE></BLOCKNODE>
            end</IFNODE>

            <IFNODE>if <ORNODE><NOTNODE>!<CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>.kind_of?<ARRAYNODE>(<CONSTNODE>Array</CONSTNODE>)</ARRAYNODE></CALLNODE></NOTNODE> ||
                <NOTNODE>!<CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>.all? <ITERNODE>{|<DASGNNODE>ns</DASGNNODE>| <CALLNODE><CONSTNODE>String</CONSTNODE> === <ARRAYNODE><DVARNODE>ns</DVARNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></NOTNODE></ORNODE>
              <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"invalid nameserver config: </STRNODE><EVSTRNODE>#{<CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
            end</IFNODE>

            <IFNODE>if <ORNODE><NOTNODE>!<CALLNODE><INSTVARNODE>@search</INSTVARNODE>.kind_of?<ARRAYNODE>(<CONSTNODE>Array</CONSTNODE>)</ARRAYNODE></CALLNODE></NOTNODE> ||
                <NOTNODE>!<CALLNODE><INSTVARNODE>@search</INSTVARNODE>.all? <ITERNODE>{|<DASGNNODE>ls</DASGNNODE>| <CALLNODE><DVARNODE>ls</DVARNODE>.all? <ITERNODE>{|<DASGNNODE>l</DASGNNODE>| <CALLNODE><COLON2NODE><CONSTNODE>Label</CONSTNODE>::Str</COLON2NODE> === <ARRAYNODE><DVARNODE>l</DVARNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE> }</ITERNODE></CALLNODE></NOTNODE></ORNODE>
              <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"invalid search config: </STRNODE><EVSTRNODE>#{<CALLNODE><INSTVARNODE>@search</INSTVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
            end</IFNODE>

            <IFNODE>if <NOTNODE>!<CALLNODE><INSTVARNODE>@ndots</INSTVARNODE>.kind_of?<ARRAYNODE>(<CONSTNODE>Integer</CONSTNODE>)</ARRAYNODE></CALLNODE></NOTNODE>
              <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"invalid ndots config: </STRNODE><EVSTRNODE>#{<CALLNODE><INSTVARNODE>@ndots</INSTVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
            end</IFNODE>

            <INSTASGNNODE>@initialized = <TRUENODE>true</TRUENODE></INSTASGNNODE></BLOCKNODE>
          end</IFNODE>
        }</ITERNODE></CALLNODE>
        <SELFNODE>self</SELFNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>single?</ARGUMENTNODE><ARGSNODE/>
        <BLOCKNODE><VCALLNODE>lazy_initialize</VCALLNODE>
        <IFNODE>if <CALLNODE><CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>.length</CALLNODE> == <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>
          <RETURNNODE>return <CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE></RETURNNODE>]
        else
          <RETURNNODE>return <NILNODE>nil</NILNODE></RETURNNODE>
        end</IFNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>generate_candidates</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <BLOCKNODE><LOCALASGNNODE>candidates = <NILNODE>nil</NILNODE></LOCALASGNNODE>
        <LOCALASGNNODE>name = <CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
        <IFNODE>if <CALLNODE><LOCALVARNODE>name</LOCALVARNODE>.absolute?</CALLNODE>
          <LOCALASGNNODE>candidates = <ARRAYNODE>[<LOCALVARNODE>name</LOCALVARNODE>]</ARRAYNODE></LOCALASGNNODE>
        else
          <BLOCKNODE><IFNODE>if <CALLNODE><INSTVARNODE>@ndots</INSTVARNODE> &lt;= <ARRAYNODE><CALLNODE><CALLNODE><LOCALVARNODE>name</LOCALVARNODE>.length</CALLNODE> - <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>
            <LOCALASGNNODE>candidates = <ARRAYNODE>[<CALLNODE><CONSTNODE>Name</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>name</LOCALVARNODE>.to_a</CALLNODE>)</ARRAYNODE></CALLNODE>]</ARRAYNODE></LOCALASGNNODE>
          else
            <LOCALASGNNODE>candidates = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
          end</IFNODE>
          <CALLNODE><LOCALVARNODE>candidates</LOCALVARNODE>.concat<ARRAYNODE>(<CALLNODE><INSTVARNODE>@search</INSTVARNODE>.map <ITERNODE>{|<DASGNNODE>domain</DASGNNODE>| <CALLNODE><CONSTNODE>Name</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><CALLNODE><LOCALVARNODE>name</LOCALVARNODE>.to_a</CALLNODE> + <ARRAYNODE><DVARNODE>domain</DVARNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
        end</IFNODE>
        <RETURNNODE>return <LOCALVARNODE>candidates</LOCALVARNODE></RETURNNODE></BLOCKNODE>
      end</DEFNNODE>

      <CONSTDECLNODE>InitialTimeout = <FIXNUMNODE>5</FIXNUMNODE></CONSTDECLNODE>

      <DEFNNODE>def <ARGUMENTNODE>generate_timeouts</ARGUMENTNODE><ARGSNODE/>
        <BLOCKNODE><LOCALASGNNODE>ts = <ARRAYNODE>[<CONSTNODE>InitialTimeout</CONSTNODE>]</ARRAYNODE></LOCALASGNNODE>
        <CALLNODE><LOCALVARNODE>ts</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><CALLNODE><CALLNODE><LOCALVARNODE>ts</LOCALVARNODE>[-<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>] * <ARRAYNODE><FIXNUMNODE>2</FIXNUMNODE></ARRAYNODE></CALLNODE> / <ARRAYNODE><CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>.length</CALLNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>
        <CALLNODE><LOCALVARNODE>ts</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><CALLNODE><LOCALVARNODE>ts</LOCALVARNODE>[-<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>] * <ARRAYNODE><FIXNUMNODE>2</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>
        <CALLNODE><LOCALVARNODE>ts</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><CALLNODE><LOCALVARNODE>ts</LOCALVARNODE>[-<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>] * <ARRAYNODE><FIXNUMNODE>2</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>
        <RETURNNODE>return <LOCALVARNODE>ts</LOCALVARNODE></RETURNNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>resolv</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <BLOCKNODE><LOCALASGNNODE>candidates = <FCALLNODE>generate_candidates<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
        <LOCALASGNNODE>timeouts = <VCALLNODE>generate_timeouts</VCALLNODE></LOCALASGNNODE>
        <BEGINNODE>begin
          <RESCUENODE><CALLNODE><LOCALVARNODE>candidates</LOCALVARNODE>.each <ITERNODE>{|<DASGNNODE>candidate</DASGNNODE>|
            <BEGINNODE>begin
              <RESCUENODE><BLOCKNODE><CALLNODE><LOCALVARNODE>timeouts</LOCALVARNODE>.each <ITERNODE>{|<DASGNNODE>tout</DASGNNODE>|
                <CALLNODE><INSTVARNODE>@nameserver</INSTVARNODE>.each <ITERNODE>{|<DASGNNODE>nameserver</DASGNNODE>|
                  <BEGINNODE>begin
                    <RESCUENODE><YIELDNODE>yield <ARRAYNODE><DVARNODE>candidate</DVARNODE>, <DVARNODE>tout</DVARNODE>, <DVARNODE>nameserver</DVARNODE></ARRAYNODE></YIELDNODE>
                  <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>ResolvTimeout</CONSTNODE></ARRAYNODE>
                  end</RESCUEBODYNODE></RESCUENODE></BEGINNODE>
                }</ITERNODE></CALLNODE>
              }</ITERNODE></CALLNODE>
              <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ResolvError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"DNS resolv timeout: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
            <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>NXDomain</CONSTNODE></ARRAYNODE>
            end</RESCUEBODYNODE></RESCUENODE></BEGINNODE>
          }</ITERNODE></CALLNODE>
        <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>ResolvError</CONSTNODE></ARRAYNODE>
        end</RESCUEBODYNODE></RESCUENODE></BEGINNODE></BLOCKNODE>
      end</DEFNNODE>

      <CLASSNODE>class <COLON2NODE>NXDomain</COLON2NODE> &lt; <CONSTNODE>ResolvError</CONSTNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>OtherResolvError</COLON2NODE> &lt; <CONSTNODE>ResolvError</CONSTNODE>
      end</CLASSNODE></BLOCKNODE>
    end</CLASSNODE>

    <MODULENODE>module <COLON2NODE>OpCode</COLON2NODE>
      <BLOCKNODE><CONSTDECLNODE>Query = <FIXNUMNODE>0</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>IQuery = <FIXNUMNODE>1</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>Status = <FIXNUMNODE>2</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>Notify = <FIXNUMNODE>4</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>Update = <FIXNUMNODE>5</FIXNUMNODE></CONSTDECLNODE></BLOCKNODE>
    end</MODULENODE>

    <MODULENODE>module <COLON2NODE>RCode</COLON2NODE>
      <BLOCKNODE><CONSTDECLNODE>NoError = <FIXNUMNODE>0</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>FormErr = <FIXNUMNODE>1</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>ServFail = <FIXNUMNODE>2</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>NXDomain = <FIXNUMNODE>3</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>NotImp = <FIXNUMNODE>4</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>Refused = <FIXNUMNODE>5</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>YXDomain = <FIXNUMNODE>6</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>YXRRSet = <FIXNUMNODE>7</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>NXRRSet = <FIXNUMNODE>8</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>NotAuth = <FIXNUMNODE>9</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>NotZone = <FIXNUMNODE>10</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>BADVERS = <FIXNUMNODE>16</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>BADSIG = <FIXNUMNODE>16</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>BADKEY = <FIXNUMNODE>17</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>BADTIME = <FIXNUMNODE>18</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>BADMODE = <FIXNUMNODE>19</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>BADNAME = <FIXNUMNODE>20</FIXNUMNODE></CONSTDECLNODE>
      <CONSTDECLNODE>BADALG = <FIXNUMNODE>21</FIXNUMNODE></CONSTDECLNODE></BLOCKNODE>
    end</MODULENODE>

    <CLASSNODE>class <COLON2NODE>DecodeError</COLON2NODE> &lt; <CONSTNODE>StandardError</CONSTNODE>
    end</CLASSNODE>

    <CLASSNODE>class <COLON2NODE>EncodeError</COLON2NODE> &lt; <CONSTNODE>StandardError</CONSTNODE>
    end</CLASSNODE>

    <MODULENODE>module <COLON2NODE>Label</COLON2NODE>
      <BLOCKNODE><DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>split</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>arg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <BLOCKNODE><LOCALASGNNODE>labels = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
        <CALLNODE><LOCALVARNODE>arg</LOCALVARNODE>.scan<ARRAYNODE>(/<REGEXPNODE>[^\.]+</REGEXPNODE>/)</ARRAYNODE> <ITERNODE>{<CALLNODE><LOCALVARNODE>labels</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><CONSTNODE>Str</CONSTNODE>.new<ARRAYNODE>(<BACKREFNODE>$&amp;</BACKREFNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>
        <RETURNNODE>return <LOCALVARNODE>labels</LOCALVARNODE></RETURNNODE></BLOCKNODE>
      end</DEFSNODE>

      <CLASSNODE>class <COLON2NODE>Str</COLON2NODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>string</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><INSTASGNNODE>@string = <LOCALVARNODE>string</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@downcase = <CALLNODE><LOCALVARNODE>string</LOCALVARNODE>.downcase</CALLNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:string</SYMBOLNODE>, <SYMBOLNODE>:downcase</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>to_s</ARGUMENTNODE><ARGSNODE/>
          <RETURNNODE>return <INSTVARNODE>@string</INSTVARNODE></RETURNNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>inspect</ARGUMENTNODE><ARGSNODE/>
          <RETURNNODE>return<STRNODE> <DSTRNODE>"#&lt;</STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.class</CALLNODE>}</EVSTRNODE><STRNODE> </STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.to_s</CALLNODE>}</EVSTRNODE><STRNODE>&gt;</STRNODE>"</DSTRNODE></RETURNNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>==</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <RETURNNODE>return <CALLNODE><INSTVARNODE>@downcase</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.downcase</CALLNODE></ARRAYNODE></CALLNODE></RETURNNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>eql?</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE> == <ARRAYNODE><LOCALVARNODE>other</LOCALVARNODE></ARRAYNODE></CALLNODE></RETURNNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>hash</ARGUMENTNODE><ARGSNODE/>
          <RETURNNODE>return <CALLNODE><INSTVARNODE>@downcase</INSTVARNODE>.hash</CALLNODE></RETURNNODE>
        end</DEFNNODE></BLOCKNODE>
      end</CLASSNODE></BLOCKNODE>
    end</MODULENODE>

    <CLASSNODE>class <COLON2NODE>Name</COLON2NODE>
      <BLOCKNODE><DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>create</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>arg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <CASENODE>case <LOCALVARNODE>arg</LOCALVARNODE>
        <ARRAYNODE><WHENNODE>when <CONSTNODE>Name</CONSTNODE>
          <RETURNNODE>return <LOCALVARNODE>arg</LOCALVARNODE></RETURNNODE></WHENNODE>
        <WHENNODE>when <CONSTNODE>String</CONSTNODE>
          <RETURNNODE>return <CALLNODE><CONSTNODE>Name</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><CONSTNODE>Label</CONSTNODE>.split<ARRAYNODE>(<LOCALVARNODE>arg</LOCALVARNODE>)</ARRAYNODE></CALLNODE>, /<MATCH2NODE><REGEXPNODE>\.\z</REGEXPNODE></MATCH2NODE><IFNODE>/ =~ <LOCALVARNODE>arg</LOCALVARNODE> ? <TRUENODE>true</TRUENODE> : <FALSENODE>false</FALSENODE>)</IFNODE></ARRAYNODE></CALLNODE></RETURNNODE></WHENNODE></ARRAYNODE>
        else
          <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"cannot interpret as DNS name: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>arg</LOCALVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
        end</CASENODE>
      end</DEFSNODE>

      <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>labels</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>absolute=<TRUENODE>true</TRUENODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
        <BLOCKNODE><INSTASGNNODE>@labels = <LOCALVARNODE>labels</LOCALVARNODE></INSTASGNNODE>
        <INSTASGNNODE>@absolute = <LOCALVARNODE>absolute</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>inspect</ARGUMENTNODE><ARGSNODE/>
       <STRNODE> <DSTRNODE>"#&lt;</STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.class</CALLNODE>}</EVSTRNODE><STRNODE>: </STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.to_s</CALLNODE>}</EVSTRNODE><EVSTRNODE>#{<INSTVARNODE>@absolute</INSTVARNODE><IFNODE> ? <STRNODE>'.'</STRNODE> : <STRNODE>''</STRNODE>}</IFNODE></EVSTRNODE><STRNODE>&gt;</STRNODE>"</DSTRNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>absolute?</ARGUMENTNODE><ARGSNODE/>
        <RETURNNODE>return <INSTVARNODE>@absolute</INSTVARNODE></RETURNNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>==</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <BLOCKNODE><IFNODE><RETURNNODE>return <FALSENODE>false</FALSENODE></RETURNNODE> unless <CALLNODE><CONSTNODE>Name</CONSTNODE> === <ARRAYNODE><LOCALVARNODE>other</LOCALVARNODE></ARRAYNODE></CALLNODE></IFNODE>
        <RETURNNODE>return <ANDNODE><CALLNODE><INSTVARNODE>@labels</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.to_a</CALLNODE></ARRAYNODE></CALLNODE> &amp;&amp; <CALLNODE><INSTVARNODE>@absolute</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.absolute?</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE></RETURNNODE></BLOCKNODE>
      end</DEFNNODE>
      <ALIASNODE>alias eql? ==</ALIASNODE>

      # tests subdomain-of relation.
      #
      #   domain = Resolv::DNS::Name.create("y.z")
      #   p Resolv::DNS::Name.create("w.x.y.z").subdomain_of?(domain) #=&gt; true
      #   p Resolv::DNS::Name.create("x.y.z").subdomain_of?(domain) #=&gt; true
      #   p Resolv::DNS::Name.create("y.z").subdomain_of?(domain) #=&gt; false
      #   p Resolv::DNS::Name.create("z").subdomain_of?(domain) #=&gt; false
      #   p Resolv::DNS::Name.create("x.y.z.").subdomain_of?(domain) #=&gt; false
      #   p Resolv::DNS::Name.create("w.z").subdomain_of?(domain) #=&gt; false
      #
      <DEFNNODE>def <ARGUMENTNODE>subdomain_of?</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <BLOCKNODE><IFNODE><FCALLNODE>raise <ARRAYNODE><CONSTNODE>ArgumentError</CONSTNODE>,<STRNODE> <DSTRNODE>"not a domain name: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE> unless <CALLNODE><CONSTNODE>Name</CONSTNODE> === <ARRAYNODE><LOCALVARNODE>other</LOCALVARNODE></ARRAYNODE></CALLNODE></IFNODE>
        <IFNODE><RETURNNODE>return <FALSENODE>false</FALSENODE></RETURNNODE> if <NOTNODE><CALLNODE><INSTVARNODE>@absolute</INSTVARNODE> != <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.absolute?</CALLNODE></ARRAYNODE></CALLNODE></NOTNODE></IFNODE>
        <LOCALASGNNODE>other_len = <CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.length</CALLNODE></LOCALASGNNODE>
        <IFNODE><RETURNNODE>return <FALSENODE>false</FALSENODE></RETURNNODE> if <CALLNODE><CALLNODE><INSTVARNODE>@labels</INSTVARNODE>.length</CALLNODE> &lt;= <ARRAYNODE><LOCALVARNODE>other_len</LOCALVARNODE></ARRAYNODE></CALLNODE></IFNODE>
        <RETURNNODE>return <CALLNODE><CALLNODE><INSTVARNODE>@labels</INSTVARNODE>[-<ARRAYNODE><CALLNODE><LOCALVARNODE>other_len</LOCALVARNODE></CALLNODE>, <LOCALVARNODE>other_len</LOCALVARNODE></ARRAYNODE></CALLNODE>] == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.to_a</CALLNODE></ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>hash</ARGUMENTNODE><ARGSNODE/>
        <RETURNNODE>return <CALLNODE><CALLNODE><INSTVARNODE>@labels</INSTVARNODE>.hash</CALLNODE> ^ <ARRAYNODE><CALLNODE><INSTVARNODE>@absolute</INSTVARNODE>.hash</CALLNODE></ARRAYNODE></CALLNODE></RETURNNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>to_a</ARGUMENTNODE><ARGSNODE/>
        <RETURNNODE>return <INSTVARNODE>@labels</INSTVARNODE></RETURNNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>length</ARGUMENTNODE><ARGSNODE/>
        <RETURNNODE>return <CALLNODE><INSTVARNODE>@labels</INSTVARNODE>.length</CALLNODE></RETURNNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>[]</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>i</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <RETURNNODE>return <CALLNODE><INSTVARNODE>@labels</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>i</LOCALVARNODE></ARRAYNODE></CALLNODE></RETURNNODE>]
      end</DEFNNODE>

      # returns the domain name as a string.
      #
      # The domain name doesn't have a trailing dot even if the name object is
      # absolute.
      #
      #   p Resolv::DNS::Name.create("x.y.z.").to_s #=&gt; "x.y.z"
      #   p Resolv::DNS::Name.create("x.y.z").to_s #=&gt; "x.y.z"
      #
      <DEFNNODE>def <ARGUMENTNODE>to_s</ARGUMENTNODE><ARGSNODE/>
        <RETURNNODE>return <CALLNODE><INSTVARNODE>@labels</INSTVARNODE>.join<ARRAYNODE>(<STRNODE>'.'</STRNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
      end</DEFNNODE></BLOCKNODE>
    end</CLASSNODE>

    <CLASSNODE>class <COLON2NODE>Message</COLON2NODE>
      <BLOCKNODE><CLASSVARDECLNODE>@@identifier = -<FIXNUMNODE>1</FIXNUMNODE></CLASSVARDECLNODE>

      <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>id = <CALLNODE>(<CLASSVARASGNNODE><CALLNODE><CLASSVARNODE>@@identifier</CLASSVARNODE> += <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></CLASSVARASGNNODE>) &amp; <ARRAYNODE><FIXNUMNODE>0xffff</FIXNUMNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
        <BLOCKNODE><INSTASGNNODE>@id = <LOCALVARNODE>id</LOCALVARNODE></INSTASGNNODE>
        <INSTASGNNODE>@qr = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE>
        <INSTASGNNODE>@opcode = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE>
        <INSTASGNNODE>@aa = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE>
        <INSTASGNNODE>@tc = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE>
        <INSTASGNNODE>@rd = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE> # recursion desired
        <INSTASGNNODE>@ra = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE> # recursion available
        <INSTASGNNODE>@rcode = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE>
        <INSTASGNNODE>@question = <ZARRAYNODE>[]</ZARRAYNODE></INSTASGNNODE>
        <INSTASGNNODE>@answer = <ZARRAYNODE>[]</ZARRAYNODE></INSTASGNNODE>
        <INSTASGNNODE>@authority = <ZARRAYNODE>[]</ZARRAYNODE></INSTASGNNODE>
        <INSTASGNNODE>@additional = <ZARRAYNODE>[]</ZARRAYNODE></INSTASGNNODE></BLOCKNODE>
      end</DEFNNODE>

      <FCALLNODE>attr_accessor <ARRAYNODE><SYMBOLNODE>:id</SYMBOLNODE>, <SYMBOLNODE>:qr</SYMBOLNODE>, <SYMBOLNODE>:opcode</SYMBOLNODE>, <SYMBOLNODE>:aa</SYMBOLNODE>, <SYMBOLNODE>:tc</SYMBOLNODE>, <SYMBOLNODE>:rd</SYMBOLNODE>, <SYMBOLNODE>:ra</SYMBOLNODE>, <SYMBOLNODE>:rcode</SYMBOLNODE></ARRAYNODE></FCALLNODE>
      <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:question</SYMBOLNODE>, <SYMBOLNODE>:answer</SYMBOLNODE>, <SYMBOLNODE>:authority</SYMBOLNODE>, <SYMBOLNODE>:additional</SYMBOLNODE></ARRAYNODE></FCALLNODE>

      <DEFNNODE>def <ARGUMENTNODE>==</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <RETURNNODE>return <ANDNODE><ANDNODE><ANDNODE><ANDNODE><ANDNODE><ANDNODE><ANDNODE><ANDNODE><ANDNODE><ANDNODE><ANDNODE><CALLNODE><INSTVARNODE>@id</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.id</CALLNODE></ARRAYNODE></CALLNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@qr</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.qr</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@opcode</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.opcode</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@aa</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.aa</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@tc</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.tc</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@rd</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.rd</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@ra</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.ra</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@rcode</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.rcode</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@question</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.question</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@answer</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.answer</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@authority</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.authority</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><INSTVARNODE>@additional</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.additional</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE></RETURNNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>add_question</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>typeclass</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <CALLNODE><INSTVARNODE>@question</INSTVARNODE> &lt;&lt; <ARRAYNODE><ARRAYNODE>[<CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE>, <LOCALVARNODE>typeclass</LOCALVARNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>each_question</ARGUMENTNODE><ARGSNODE/>
        <CALLNODE><INSTVARNODE>@question</INSTVARNODE>.each <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>typeclass</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
          <YIELDNODE>yield <ARRAYNODE><DVARNODE>name</DVARNODE>, <DVARNODE>typeclass</DVARNODE></ARRAYNODE></YIELDNODE>
        }</ITERNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>add_answer</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>ttl</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <CALLNODE><INSTVARNODE>@answer</INSTVARNODE> &lt;&lt; <ARRAYNODE><ARRAYNODE>[<CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE>, <LOCALVARNODE>ttl</LOCALVARNODE>, <LOCALVARNODE>data</LOCALVARNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>each_answer</ARGUMENTNODE><ARGSNODE/>
        <CALLNODE><INSTVARNODE>@answer</INSTVARNODE>.each <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
          <YIELDNODE>yield <ARRAYNODE><DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE></ARRAYNODE></YIELDNODE>
        }</ITERNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>add_authority</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>ttl</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <CALLNODE><INSTVARNODE>@authority</INSTVARNODE> &lt;&lt; <ARRAYNODE><ARRAYNODE>[<CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE>, <LOCALVARNODE>ttl</LOCALVARNODE>, <LOCALVARNODE>data</LOCALVARNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>each_authority</ARGUMENTNODE><ARGSNODE/>
        <CALLNODE><INSTVARNODE>@authority</INSTVARNODE>.each <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
          <YIELDNODE>yield <ARRAYNODE><DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE></ARRAYNODE></YIELDNODE>
        }</ITERNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>add_additional</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>ttl</ARGUMENTNODE>, <ARGUMENTNODE>data</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <CALLNODE><INSTVARNODE>@additional</INSTVARNODE> &lt;&lt; <ARRAYNODE><ARRAYNODE>[<CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></CALLNODE>, <LOCALVARNODE>ttl</LOCALVARNODE>, <LOCALVARNODE>data</LOCALVARNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>each_additional</ARGUMENTNODE><ARGSNODE/>
        <CALLNODE><INSTVARNODE>@additional</INSTVARNODE>.each <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
          <YIELDNODE>yield <ARRAYNODE><DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE></ARRAYNODE></YIELDNODE>
        }</ITERNODE></CALLNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>each_resource</ARGUMENTNODE><ARGSNODE/>
        <BLOCKNODE><FCALLNODE>each_answer <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE> <YIELDNODE>yield <ARRAYNODE><DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE></ARRAYNODE></YIELDNODE>}</ITERNODE></FCALLNODE>
        <FCALLNODE>each_authority <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE> <YIELDNODE>yield <ARRAYNODE><DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE></ARRAYNODE></YIELDNODE>}</ITERNODE></FCALLNODE>
        <FCALLNODE>each_additional <ITERNODE>{<MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE> <YIELDNODE>yield <ARRAYNODE><DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE></ARRAYNODE></YIELDNODE>}</ITERNODE></FCALLNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>encode</ARGUMENTNODE><ARGSNODE/>
        <RETURNNODE>return <CALLNODE><CALLNODE><CONSTNODE>MessageEncoder</CONSTNODE>.new <ITERNODE>{|<DASGNNODE>msg</DASGNNODE>|
          <BLOCKNODE><CALLNODE><DVARNODE>msg</DVARNODE>.put_pack<ARRAYNODE>(<STRNODE>'nnnnnn'</STRNODE>,
            <INSTVARNODE>@id</INSTVARNODE>,
            <CALLNODE><CALLNODE><CALLNODE><CALLNODE><CALLNODE><CALLNODE><CALLNODE>(<CALLNODE><INSTVARNODE>@qr</INSTVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &lt;&lt; <ARRAYNODE><FIXNUMNODE>15</FIXNUMNODE></ARRAYNODE></CALLNODE> |
            <ARRAYNODE><CALLNODE>(<CALLNODE><INSTVARNODE>@opcode</INSTVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>15</FIXNUMNODE></ARRAYNODE></CALLNODE>) &lt;&lt; <ARRAYNODE><FIXNUMNODE>11</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE> |
            <ARRAYNODE><CALLNODE>(<CALLNODE><INSTVARNODE>@aa</INSTVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &lt;&lt; <ARRAYNODE><FIXNUMNODE>10</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE> |
            <ARRAYNODE><CALLNODE>(<CALLNODE><INSTVARNODE>@tc</INSTVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &lt;&lt; <ARRAYNODE><FIXNUMNODE>9</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE> |
            <ARRAYNODE><CALLNODE>(<CALLNODE><INSTVARNODE>@rd</INSTVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &lt;&lt; <ARRAYNODE><FIXNUMNODE>8</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE> |
            <ARRAYNODE><CALLNODE>(<CALLNODE><INSTVARNODE>@ra</INSTVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>) &lt;&lt; <ARRAYNODE><FIXNUMNODE>7</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE> |
            <ARRAYNODE>(<CALLNODE><INSTVARNODE>@rcode</INSTVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>15</FIXNUMNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE>,
            <CALLNODE><INSTVARNODE>@question</INSTVARNODE>.length</CALLNODE>,
            <CALLNODE><INSTVARNODE>@answer</INSTVARNODE>.length</CALLNODE>,
            <CALLNODE><INSTVARNODE>@authority</INSTVARNODE>.length</CALLNODE>,
            <CALLNODE><INSTVARNODE>@additional</INSTVARNODE>.length</CALLNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@question</INSTVARNODE>.each <ITERNODE>{|<DASGNNODE>q</DASGNNODE>|
            <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>typeclass</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <DVARNODE>q</DVARNODE>
</TOARYNODE>            <CALLNODE><DVARNODE>msg</DVARNODE>.put_name<ARRAYNODE>(<DVARNODE>name</DVARNODE>)</ARRAYNODE></CALLNODE>
            <CALLNODE><DVARNODE>msg</DVARNODE>.put_pack<ARRAYNODE>(<STRNODE>'nn'</STRNODE>, <COLON2NODE><DVARNODE>typeclass</DVARNODE>::TypeValue</COLON2NODE>, <COLON2NODE><DVARNODE>typeclass</DVARNODE>::ClassValue</COLON2NODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE>
          <CALLNODE><ARRAYNODE>[<INSTVARNODE>@answer</INSTVARNODE>, <INSTVARNODE>@authority</INSTVARNODE>, <INSTVARNODE>@additional</INSTVARNODE>]</ARRAYNODE>.each <ITERNODE>{|<DASGNNODE>rr</DASGNNODE>|
            <CALLNODE><DVARNODE>rr</DVARNODE>.each <ITERNODE>{|<DASGNNODE>r</DASGNNODE>|
              <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <DVARNODE>r</DVARNODE>
</TOARYNODE>              <CALLNODE><DVARNODE>msg</DVARNODE>.put_name<ARRAYNODE>(<DVARNODE>name</DVARNODE>)</ARRAYNODE></CALLNODE>
              <CALLNODE><DVARNODE>msg</DVARNODE>.put_pack<ARRAYNODE>(<STRNODE>'nnN'</STRNODE>, <COLON2NODE><CALLNODE><DVARNODE>data</DVARNODE>.class</CALLNODE>::TypeValue</COLON2NODE>, <COLON2NODE><CALLNODE><DVARNODE>data</DVARNODE>.class</CALLNODE>::ClassValue</COLON2NODE>, <DVARNODE>ttl</DVARNODE>)</ARRAYNODE></CALLNODE>
              <CALLNODE><DVARNODE>msg</DVARNODE>.put_length16 <ITERNODE>{<CALLNODE><DVARNODE>data</DVARNODE>.encode_rdata<ARRAYNODE>(<DVARNODE>msg</DVARNODE>)</ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE></BLOCKNODE>
            }</ITERNODE></CALLNODE>
          }</ITERNODE></CALLNODE></BLOCKNODE>
        }</ITERNODE></CALLNODE>.to_s</CALLNODE></RETURNNODE>
      end</DEFNNODE>

      <CLASSNODE>class <COLON2NODE>MessageEncoder</COLON2NODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE/>
          <BLOCKNODE><INSTASGNNODE>@data = <STRNODE>''</STRNODE></INSTASGNNODE>
          <INSTASGNNODE>@names = <HASHNODE>{}</HASHNODE></INSTASGNNODE><ARRAYNODE/>
          <YIELDNODE>yield <SELFNODE>self</SELFNODE></YIELDNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>to_s</ARGUMENTNODE><ARGSNODE/>
          <RETURNNODE>return <INSTVARNODE>@data</INSTVARNODE></RETURNNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_bytes</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>d</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <CALLNODE><INSTVARNODE>@data</INSTVARNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>d</LOCALVARNODE></ARRAYNODE></CALLNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_pack</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>template</ARGUMENTNODE></LISTNODE>, <RESTARG>*d</RESTARG>)</ARGSNODE>
          <CALLNODE><INSTVARNODE>@data</INSTVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><LOCALVARNODE>d</LOCALVARNODE>.pack<ARRAYNODE>(<LOCALVARNODE>template</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_length16</ARGUMENTNODE><ARGSNODE/>
          <BLOCKNODE><LOCALASGNNODE>length_index = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>.length</CALLNODE></LOCALASGNNODE>
          <CALLNODE><INSTVARNODE>@data</INSTVARNODE> &lt;&lt; <ARRAYNODE><STRNODE>"\0\0"</STRNODE></ARRAYNODE></CALLNODE>
          <LOCALASGNNODE>data_start = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>.length</CALLNODE></LOCALASGNNODE>
          <YIELDNODE>yield</YIELDNODE>
          <LOCALASGNNODE>data_end = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>.length</CALLNODE></LOCALASGNNODE>
          <ATTRASSIGNNODE><INSTVARNODE>@data</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>length_index</LOCALVARNODE>, <FIXNUMNODE>2</FIXNUMNODE>] = <CALLNODE><ARRAYNODE>[<CALLNODE><LOCALVARNODE>data_end</LOCALVARNODE> - <ARRAYNODE><LOCALVARNODE>data_start</LOCALVARNODE></ARRAYNODE></CALLNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>"n"</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_string</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>d</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><CALLNODE><SELFNODE>self</SELFNODE>.put_pack<ARRAYNODE>(<STRNODE>"C"</STRNODE>, <CALLNODE><LOCALVARNODE>d</LOCALVARNODE>.length</CALLNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@data</INSTVARNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>d</LOCALVARNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_string_list</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>ds</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <CALLNODE><LOCALVARNODE>ds</LOCALVARNODE>.each <ITERNODE>{|<DASGNNODE>d</DASGNNODE>|
            <CALLNODE><SELFNODE>self</SELFNODE>.put_string<ARRAYNODE>(<DVARNODE>d</DVARNODE>)</ARRAYNODE></CALLNODE>
          }</ITERNODE></CALLNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_name</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>d</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <FCALLNODE>put_labels<ARRAYNODE>(<CALLNODE><LOCALVARNODE>d</LOCALVARNODE>.to_a</CALLNODE>)</ARRAYNODE></FCALLNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_labels</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>d</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><CALLNODE><LOCALVARNODE>d</LOCALVARNODE>.each_index <ITERNODE>{|<DASGNNODE>i</DASGNNODE>|
            <BLOCKNODE><DASGNNODE>domain = <CALLNODE><LOCALVARNODE>d</LOCALVARNODE>[<ARRAYNODE><DOTNODE><DVARNODE>i</DVARNODE>..-<FIXNUMNODE>1</FIXNUMNODE></DOTNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
            <IFNODE>if <DASGNNODE>idx = <CALLNODE><INSTVARNODE>@names</INSTVARNODE>[<ARRAYNODE><DVARNODE>domain</DVARNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
              <BLOCKNODE><CALLNODE><SELFNODE>self</SELFNODE>.put_pack<ARRAYNODE>(<STRNODE>"n"</STRNODE>, <CALLNODE><FIXNUMNODE>0xc000</FIXNUMNODE> | <ARRAYNODE><DVARNODE>idx</DVARNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE>
              <RETURNNODE>return</RETURNNODE></BLOCKNODE>
            else
              <BLOCKNODE><ATTRASSIGNNODE><INSTVARNODE>@names</INSTVARNODE>[<ARRAYNODE><DVARNODE>domain</DVARNODE>] = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>.length</CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
              <CALLNODE><SELFNODE>self</SELFNODE>.put_label<ARRAYNODE>(<CALLNODE><LOCALVARNODE>d</LOCALVARNODE>[<ARRAYNODE><DVARNODE>i</DVARNODE></ARRAYNODE></CALLNODE>])</ARRAYNODE></CALLNODE></BLOCKNODE>
            end</IFNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@data</INSTVARNODE> &lt;&lt; <ARRAYNODE><STRNODE>"\0"</STRNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>put_label</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>d</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <CALLNODE><SELFNODE>self</SELFNODE>.put_string<ARRAYNODE>(<CALLNODE><LOCALVARNODE>d</LOCALVARNODE>.string</CALLNODE>)</ARRAYNODE></CALLNODE>
        end</DEFNNODE></BLOCKNODE>
      end</CLASSNODE>

      <DEFSNODE>def <CONSTNODE>Message</CONSTNODE>.<ARGUMENTNODE>decode</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>m</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <BLOCKNODE><LOCALASGNNODE>o = <CALLNODE><CONSTNODE>Message</CONSTNODE>.new<ARRAYNODE>(<FIXNUMNODE>0</FIXNUMNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
        <CALLNODE><CONSTNODE>MessageDecoder</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>m</LOCALVARNODE>)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>msg</DASGNNODE>|
          <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>id</DASGNNODE>, <DASGNNODE>flag</DASGNNODE>, <DASGNNODE>qdcount</DASGNNODE>, <DASGNNODE>ancount</DASGNNODE>, <DASGNNODE>nscount</DASGNNODE>, <DASGNNODE>arcount</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> =
            <CALLNODE><DVARNODE>msg</DVARNODE>.get_unpack<ARRAYNODE>(<STRNODE>'nnnnnn'</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.id = <ARRAYNODE><DVARNODE>id</DVARNODE></ARRAYNODE></ATTRASSIGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.qr = <ARRAYNODE><CALLNODE>(<CALLNODE><DVARNODE>flag</DVARNODE> &gt;&gt; <ARRAYNODE><FIXNUMNODE>15</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.opcode = <ARRAYNODE><CALLNODE>(<CALLNODE><DVARNODE>flag</DVARNODE> &gt;&gt; <ARRAYNODE><FIXNUMNODE>11</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>15</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.aa = <ARRAYNODE><CALLNODE>(<CALLNODE><DVARNODE>flag</DVARNODE> &gt;&gt; <ARRAYNODE><FIXNUMNODE>10</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.tc = <ARRAYNODE><CALLNODE>(<CALLNODE><DVARNODE>flag</DVARNODE> &gt;&gt; <ARRAYNODE><FIXNUMNODE>9</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.rd = <ARRAYNODE><CALLNODE>(<CALLNODE><DVARNODE>flag</DVARNODE> &gt;&gt; <ARRAYNODE><FIXNUMNODE>8</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.ra = <ARRAYNODE><CALLNODE>(<CALLNODE><DVARNODE>flag</DVARNODE> &gt;&gt; <ARRAYNODE><FIXNUMNODE>7</FIXNUMNODE></ARRAYNODE></CALLNODE>) &amp; <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          <ATTRASSIGNNODE><LOCALVARNODE>o</LOCALVARNODE>.rcode = <ARRAYNODE><CALLNODE><DVARNODE>flag</DVARNODE> &amp; <ARRAYNODE><FIXNUMNODE>15</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></ATTRASSIGNNODE>
          (<CALLNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE>..<DVARNODE>qdcount</DVARNODE></DOTNODE>).each <ITERNODE>{
            <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>typeclass</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><DVARNODE>msg</DVARNODE>.get_question</CALLNODE>
</TOARYNODE>            <CALLNODE><LOCALVARNODE>o</LOCALVARNODE>.add_question<ARRAYNODE>(<DVARNODE>name</DVARNODE>, <DVARNODE>typeclass</DVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE>
          (<CALLNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE>..<DVARNODE>ancount</DVARNODE></DOTNODE>).each <ITERNODE>{
            <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><DVARNODE>msg</DVARNODE>.get_rr</CALLNODE>
</TOARYNODE>            <CALLNODE><LOCALVARNODE>o</LOCALVARNODE>.add_answer<ARRAYNODE>(<DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE>
          (<CALLNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE>..<DVARNODE>nscount</DVARNODE></DOTNODE>).each <ITERNODE>{
            <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><DVARNODE>msg</DVARNODE>.get_rr</CALLNODE>
</TOARYNODE>            <CALLNODE><LOCALVARNODE>o</LOCALVARNODE>.add_authority<ARRAYNODE>(<DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE>
          (<CALLNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE>..<DVARNODE>arcount</DVARNODE></DOTNODE>).each <ITERNODE>{
            <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><DASGNNODE>name</DASGNNODE>, <DASGNNODE>ttl</DASGNNODE>, <DASGNNODE>data</DASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><DVARNODE>msg</DVARNODE>.get_rr</CALLNODE>
</TOARYNODE>            <CALLNODE><LOCALVARNODE>o</LOCALVARNODE>.add_additional<ARRAYNODE>(<DVARNODE>name</DVARNODE>, <DVARNODE>ttl</DVARNODE>, <DVARNODE>data</DVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
          }</ITERNODE></CALLNODE></BLOCKNODE>
        }</ITERNODE></CALLNODE>
        <RETURNNODE>return <LOCALVARNODE>o</LOCALVARNODE></RETURNNODE></BLOCKNODE>
      end</DEFSNODE>

      <CLASSNODE>class <COLON2NODE>MessageDecoder</COLON2NODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>data</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><INSTASGNNODE>@data = <LOCALVARNODE>data</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@index = <FIXNUMNODE>0</FIXNUMNODE></INSTASGNNODE>
          <INSTASGNNODE>@limit = <CALLNODE><LOCALVARNODE>data</LOCALVARNODE>.length</CALLNODE></INSTASGNNODE>
          <YIELDNODE>yield <SELFNODE>self</SELFNODE></YIELDNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_length16</ARGUMENTNODE><ARGSNODE/>
          <ARRAYNODE><LOCALASGNNODE>len</LOCALASGNNODE></ARRAYNODE><BLOCKNODE><MULTIPLEASGNNODE>, =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><SELFNODE>self</SELFNODE>.get_unpack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>          <LOCALASGNNODE>save_limit = <INSTVARNODE>@limit</INSTVARNODE></LOCALASGNNODE>
          <INSTASGNNODE>@limit = <CALLNODE><INSTVARNODE>@index</INSTVARNODE> + <ARRAYNODE><LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>
          <LOCALASGNNODE>d = <YIELDNODE>yield(<LOCALVARNODE>len</LOCALVARNODE>)</YIELDNODE></LOCALASGNNODE>
          <IFNODE>if <CALLNODE><INSTVARNODE>@index</INSTVARNODE> &lt; <ARRAYNODE><INSTVARNODE>@limit</INSTVARNODE></ARRAYNODE></CALLNODE>
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>DecodeError</CONSTNODE>.new<ARRAYNODE>(<STRNODE>"junk exists"</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
          elsif<IFNODE> <CALLNODE><INSTVARNODE>@limit</INSTVARNODE> &lt; <ARRAYNODE><INSTVARNODE>@index</INSTVARNODE></ARRAYNODE></CALLNODE>
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>DecodeError</CONSTNODE>.new<ARRAYNODE>(<STRNODE>"limit exceeded"</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
          end</IFNODE></IFNODE>
          <INSTASGNNODE>@limit = <LOCALVARNODE>save_limit</LOCALVARNODE></INSTASGNNODE>
          <RETURNNODE>return <LOCALVARNODE>d</LOCALVARNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_bytes</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>len = <CALLNODE><INSTVARNODE>@limit</INSTVARNODE> - <ARRAYNODE><INSTVARNODE>@index</INSTVARNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>d = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>[<ARRAYNODE><INSTVARNODE>@index</INSTVARNODE>, <LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>]
          <INSTASGNNODE><CALLNODE><INSTVARNODE>@index</INSTVARNODE> += <ARRAYNODE><LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>
          <RETURNNODE>return <LOCALVARNODE>d</LOCALVARNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_unpack</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>template</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>len = <FIXNUMNODE>0</FIXNUMNODE></LOCALASGNNODE>
          <CALLNODE><LOCALVARNODE>template</LOCALVARNODE>.each_byte <ITERNODE>{|<DASGNNODE>byte</DASGNNODE>|
            <CASENODE>case <DVARNODE>byte</DVARNODE>
            <ARRAYNODE><WHENNODE>when <ARRAYNODE><FIXNUMNODE>?c</FIXNUMNODE>, <FIXNUMNODE>?C</FIXNUMNODE></ARRAYNODE>
              <LOCALASGNNODE><CALLNODE><LOCALVARNODE>len</LOCALVARNODE> += <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE></WHENNODE>
            <WHENNODE>when <FIXNUMNODE>?n</FIXNUMNODE>
              <LOCALASGNNODE><CALLNODE><LOCALVARNODE>len</LOCALVARNODE> += <ARRAYNODE><FIXNUMNODE>2</FIXNUMNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE></WHENNODE>
            <WHENNODE>when <FIXNUMNODE>?N</FIXNUMNODE>
              <LOCALASGNNODE><CALLNODE><LOCALVARNODE>len</LOCALVARNODE> += <ARRAYNODE><FIXNUMNODE>4</FIXNUMNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE></WHENNODE></ARRAYNODE>
            else
              <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>StandardError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"unsupported template: '</STRNODE><EVSTRNODE>#{<CALLNODE><DVARNODE>byte</DVARNODE>.chr</CALLNODE>}</EVSTRNODE><STRNODE>' in '</STRNODE><EVSTRNODE>#{<LOCALVARNODE>template</LOCALVARNODE>}</EVSTRNODE><STRNODE>'</STRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
            end</CASENODE>
          }</ITERNODE></CALLNODE>
          <IFNODE><FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>DecodeError</CONSTNODE>.new<ARRAYNODE>(<STRNODE>"limit exceeded"</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE> if <CALLNODE><INSTVARNODE>@limit</INSTVARNODE> &lt; <ARRAYNODE><CALLNODE><INSTVARNODE>@index</INSTVARNODE> + <ARRAYNODE><LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></IFNODE>
          <LOCALASGNNODE>arr = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>.unpack<ARRAYNODE><STRNODE>(<DSTRNODE>"@</STRNODE><EVSTRNODE>#{<INSTVARNODE>@index</INSTVARNODE>}</EVSTRNODE><EVSTRNODE>#{<LOCALVARNODE>template</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
          <INSTASGNNODE><CALLNODE><INSTVARNODE>@index</INSTVARNODE> += <ARRAYNODE><LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>
          <RETURNNODE>return <LOCALVARNODE>arr</LOCALVARNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_string</ARGUMENTNODE><ARGSNODE/>
          <BLOCKNODE><LOCALASGNNODE>len = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>[<ARRAYNODE><INSTVARNODE>@index</INSTVARNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>]
          <IFNODE><FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>DecodeError</CONSTNODE>.new<ARRAYNODE>(<STRNODE>"limit exceeded"</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE> if <CALLNODE><INSTVARNODE>@limit</INSTVARNODE> &lt; <ARRAYNODE><CALLNODE><CALLNODE><INSTVARNODE>@index</INSTVARNODE> + <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE> + <ARRAYNODE><LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></IFNODE>
          <LOCALASGNNODE>d = <CALLNODE><INSTVARNODE>@data</INSTVARNODE>[<ARRAYNODE><CALLNODE><INSTVARNODE>@index</INSTVARNODE> + <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>, <LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>]
          <INSTASGNNODE><CALLNODE><INSTVARNODE>@index</INSTVARNODE> += <ARRAYNODE><CALLNODE><FIXNUMNODE>1</FIXNUMNODE> + <ARRAYNODE><LOCALVARNODE>len</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>
          <RETURNNODE>return <LOCALVARNODE>d</LOCALVARNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_string_list</ARGUMENTNODE><ARGSNODE/>
          <BLOCKNODE><LOCALASGNNODE>strings = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
          <WHILENODE>while <CALLNODE><INSTVARNODE>@index</INSTVARNODE> &lt; <ARRAYNODE><INSTVARNODE>@limit</INSTVARNODE></ARRAYNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>strings</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><SELFNODE>self</SELFNODE>.get_string</CALLNODE></ARRAYNODE></CALLNODE>
          end</WHILENODE>
          <LOCALVARNODE>strings</LOCALVARNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_name</ARGUMENTNODE><ARGSNODE/>
          <RETURNNODE>return <CALLNODE><CONSTNODE>Name</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><SELFNODE>self</SELFNODE>.get_labels</CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_labels</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>limit=<NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
          <BLOCKNODE><IFNODE><LOCALASGNNODE>limit = <INSTVARNODE>@index</INSTVARNODE></LOCALASGNNODE> if <ORNODE><NOTNODE>!<LOCALVARNODE>limit</LOCALVARNODE></NOTNODE> || <CALLNODE><INSTVARNODE>@index</INSTVARNODE> &lt; <ARRAYNODE><LOCALVARNODE>limit</LOCALVARNODE></ARRAYNODE></CALLNODE></ORNODE></IFNODE>
          <LOCALASGNNODE>d = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
          <WHILENODE>while <TRUENODE>true</TRUENODE>
            <CASENODE>case <CALLNODE><INSTVARNODE>@data</INSTVARNODE>[<ARRAYNODE><INSTVARNODE>@index</INSTVARNODE></ARRAYNODE></CALLNODE>]
            <ARRAYNODE><WHENNODE>when <FIXNUMNODE>0</FIXNUMNODE>
              <BLOCKNODE><INSTASGNNODE><CALLNODE><INSTVARNODE>@index</INSTVARNODE> += <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></INSTASGNNODE>
              <RETURNNODE>return <LOCALVARNODE>d</LOCALVARNODE></RETURNNODE></BLOCKNODE></WHENNODE>
            <WHENNODE>when <DOTNODE><FIXNUMNODE>192</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>
              <BLOCKNODE><LOCALASGNNODE>idx = <CALLNODE><CALLNODE><CALLNODE><SELFNODE>self</SELFNODE>.get_unpack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE>] &amp; <ARRAYNODE><FIXNUMNODE>0x3fff</FIXNUMNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
              <IFNODE>if <CALLNODE><LOCALVARNODE>limit</LOCALVARNODE> &lt;= <ARRAYNODE><LOCALVARNODE>idx</LOCALVARNODE></ARRAYNODE></CALLNODE>
                <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>DecodeError</CONSTNODE>.new<ARRAYNODE>(<STRNODE>"non-backward name pointer"</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
              end</IFNODE>
              <LOCALASGNNODE>save_index = <INSTVARNODE>@index</INSTVARNODE></LOCALASGNNODE>
              <INSTASGNNODE>@index = <LOCALVARNODE>idx</LOCALVARNODE></INSTASGNNODE>
              <LOCALASGNNODE><CALLNODE><LOCALVARNODE>d</LOCALVARNODE> += <ARRAYNODE><CALLNODE><SELFNODE>self</SELFNODE>.get_labels<ARRAYNODE>(<LOCALVARNODE>limit</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
              <INSTASGNNODE>@index = <LOCALVARNODE>save_index</LOCALVARNODE></INSTASGNNODE>
              <RETURNNODE>return <LOCALVARNODE>d</LOCALVARNODE></RETURNNODE></BLOCKNODE></WHENNODE></ARRAYNODE>
            else
              <CALLNODE><LOCALVARNODE>d</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><SELFNODE>self</SELFNODE>.get_label</CALLNODE></ARRAYNODE></CALLNODE>
            end</CASENODE>
          end</WHILENODE>
          <RETURNNODE>return <LOCALVARNODE>d</LOCALVARNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_label</ARGUMENTNODE><ARGSNODE/>
          <RETURNNODE>return <CALLNODE><COLON2NODE><CONSTNODE>Label</CONSTNODE>::Str</COLON2NODE>.new<ARRAYNODE>(<CALLNODE><SELFNODE>self</SELFNODE>.get_string</CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_question</ARGUMENTNODE><ARGSNODE/>
          <BLOCKNODE><LOCALASGNNODE>name = <CALLNODE><SELFNODE>self</SELFNODE>.get_name</CALLNODE></LOCALASGNNODE>
          <MULTIPLEASGNNODE><ARRAYNODE><LOCALASGNNODE>type</LOCALASGNNODE>, <LOCALASGNNODE>klass</LOCALASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><SELFNODE>self</SELFNODE>.get_unpack<ARRAYNODE>(<STRNODE>"nn"</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>          <RETURNNODE>return <ARRAYNODE><LOCALVARNODE>name</LOCALVARNODE>, <CALLNODE><CONSTNODE>Resource</CONSTNODE>.get_class<ARRAYNODE>(<LOCALVARNODE>type</LOCALVARNODE>, <LOCALVARNODE>klass</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>get_rr</ARGUMENTNODE><ARGSNODE/>
          <BLOCKNODE><LOCALASGNNODE>name = <CALLNODE><SELFNODE>self</SELFNODE>.get_name</CALLNODE></LOCALASGNNODE>
          <MULTIPLEASGNNODE><ARRAYNODE><LOCALASGNNODE>type</LOCALASGNNODE>, <LOCALASGNNODE>klass</LOCALASGNNODE>, <LOCALASGNNODE>ttl</LOCALASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><SELFNODE>self</SELFNODE>.get_unpack<ARRAYNODE>(<STRNODE>'nnN'</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>          <LOCALASGNNODE>typeclass = <CALLNODE><CONSTNODE>Resource</CONSTNODE>.get_class<ARRAYNODE>(<LOCALVARNODE>type</LOCALVARNODE>, <LOCALVARNODE>klass</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
          <RETURNNODE>return <ARRAYNODE><LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>ttl</LOCALVARNODE>, <CALLNODE><SELFNODE>self</SELFNODE>.get_length16 <ITERNODE>{<CALLNODE><LOCALVARNODE>typeclass</LOCALVARNODE>.decode_rdata<ARRAYNODE>(<SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE></ARRAYNODE></RETURNNODE></BLOCKNODE>
        end</DEFNNODE></BLOCKNODE>
      end</CLASSNODE></BLOCKNODE>
    end</CLASSNODE>

    <CLASSNODE>class <COLON2NODE>Query</COLON2NODE>
      <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>EncodeError</CONSTNODE>.new<ARRAYNODE>(<DSTRNODE>"<EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.class</CALLNODE>}</EVSTRNODE><STRNODE> is query.</STRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE> 
      end</DEFNNODE>

      <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>DecodeError</CONSTNODE>.new<ARRAYNODE>(<DSTRNODE>"<EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.class</CALLNODE>}</EVSTRNODE><STRNODE> is query.</STRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE> 
      end</DEFSNODE></BLOCKNODE>
    end</CLASSNODE>

    <CLASSNODE>class <COLON2NODE>Resource</COLON2NODE> &lt; <CONSTNODE>Query</CONSTNODE>
      <BLOCKNODE><CONSTDECLNODE>ClassHash = <HASHNODE>{}</HASHNODE></CONSTDECLNODE><ARRAYNODE/>

      <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>NotImplementedError</CONSTNODE>.new</CALLNODE></ARRAYNODE></FCALLNODE>
      end</DEFNNODE>

      <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>NotImplementedError</CONSTNODE>.new</CALLNODE></ARRAYNODE></FCALLNODE>
      end</DEFSNODE>

      <DEFNNODE>def <ARGUMENTNODE>==</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <RETURNNODE>return <ANDNODE><ANDNODE><CALLNODE><CALLNODE><SELFNODE>self</SELFNODE>.class</CALLNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.class</CALLNODE></ARRAYNODE></CALLNODE> &amp;&amp;
          <CALLNODE><CALLNODE><SELFNODE>self</SELFNODE>.instance_variables</CALLNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.instance_variables</CALLNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
          <CALLNODE><CALLNODE><CALLNODE><SELFNODE>self</SELFNODE>.instance_variables</CALLNODE>.collect <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <CALLNODE><SELFNODE>self</SELFNODE>.instance_eval <ARRAYNODE><DVARNODE>name</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE> ==
          <ARRAYNODE><CALLNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.instance_variables</CALLNODE>.collect <ITERNODE>{|<DASGNNODE>name</DASGNNODE>| <CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.instance_eval <ARRAYNODE><DVARNODE>name</DVARNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE></ARRAYNODE></CALLNODE></ANDNODE></RETURNNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>eql?</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE> == <ARRAYNODE><LOCALVARNODE>other</LOCALVARNODE></ARRAYNODE></CALLNODE></RETURNNODE>
      end</DEFNNODE>

      <DEFNNODE>def <ARGUMENTNODE>hash</ARGUMENTNODE><ARGSNODE/>
        <BLOCKNODE><LOCALASGNNODE>h = <FIXNUMNODE>0</FIXNUMNODE></LOCALASGNNODE>
        <CALLNODE><CALLNODE><SELFNODE>self</SELFNODE>.instance_variables</CALLNODE>.each <ITERNODE>{|<DASGNNODE>name</DASGNNODE>|
          <LOCALASGNNODE><CALLNODE><LOCALVARNODE>h</LOCALVARNODE> ^= <ARRAYNODE><CALLNODE><SELFNODE>self</SELFNODE>.instance_eval<ARRAYNODE>(<DSTRNODE>"<EVSTRNODE>#{<DVARNODE>name</DVARNODE>}</EVSTRNODE><STRNODE>.hash</STRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
        }</ITERNODE></CALLNODE>
        <RETURNNODE>return <LOCALVARNODE>h</LOCALVARNODE></RETURNNODE></BLOCKNODE>
      end</DEFNNODE>

      <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>get_class</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>type_value</ARGUMENTNODE>, <ARGUMENTNODE>class_value</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
        <RETURNNODE>return <ORNODE><CALLNODE><CONSTNODE>ClassHash</CONSTNODE>[<ARRAYNODE><ARRAYNODE>[<LOCALVARNODE>type_value</LOCALVARNODE>, <LOCALVARNODE>class_value</LOCALVARNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE>] ||
          <CALLNODE><CONSTNODE>Generic</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>type_value</LOCALVARNODE>, <LOCALVARNODE>class_value</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ORNODE></RETURNNODE>
      end</DEFSNODE>

      <CLASSNODE>class <COLON2NODE>Generic</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>data</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <INSTASGNNODE>@data = <LOCALVARNODE>data</LOCALVARNODE></INSTASGNNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:data</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_bytes<ARRAYNODE>(<VCALLNODE>data</VCALLNODE>)</ARRAYNODE></CALLNODE>
        end</DEFNNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_bytes</CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
        end</DEFSNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>create</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>type_value</ARGUMENTNODE>, <ARGUMENTNODE>class_value</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>c = <CALLNODE><CONSTNODE>Class</CONSTNODE>.new<ARRAYNODE>(<CONSTNODE>Generic</CONSTNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
          <CALLNODE><LOCALVARNODE>c</LOCALVARNODE>.const_set<ARRAYNODE>(<SYMBOLNODE>:TypeValue</SYMBOLNODE>, <LOCALVARNODE>type_value</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>c</LOCALVARNODE>.const_set<ARRAYNODE>(<SYMBOLNODE>:ClassValue</SYMBOLNODE>, <LOCALVARNODE>class_value</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><CONSTNODE>Generic</CONSTNODE>.const_set<ARRAYNODE><STRNODE>(<DSTRNODE>"Type</STRNODE><EVSTRNODE>#{<LOCALVARNODE>type_value</LOCALVARNODE>}</EVSTRNODE><STRNODE>_Class</STRNODE><EVSTRNODE>#{<LOCALVARNODE>class_value</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>, <LOCALVARNODE>c</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
          <ATTRASSIGNNODE><CONSTNODE>ClassHash</CONSTNODE>[<ARRAYNODE><ARRAYNODE>[<LOCALVARNODE>type_value</LOCALVARNODE>, <LOCALVARNODE>class_value</LOCALVARNODE>]</ARRAYNODE>] = <LOCALVARNODE>c</LOCALVARNODE></ARRAYNODE></ATTRASSIGNNODE>
          <RETURNNODE>return <LOCALVARNODE>c</LOCALVARNODE></RETURNNODE></BLOCKNODE>
        end</DEFSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>DomainName</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
        <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <INSTASGNNODE>@name = <LOCALVARNODE>name</LOCALVARNODE></INSTASGNNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:name</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_name<ARRAYNODE>(<INSTVARNODE>@name</INSTVARNODE>)</ARRAYNODE></CALLNODE>
        end</DEFNNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_name</CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
        end</DEFSNODE></BLOCKNODE>
      end</CLASSNODE>

      # Standard (class generic) RRs
      <CONSTDECLNODE>ClassValue = <NILNODE>nil</NILNODE></CONSTDECLNODE>

      <CLASSNODE>class <COLON2NODE>NS</COLON2NODE> &lt; <CONSTNODE>DomainName</CONSTNODE>
        <CONSTDECLNODE>TypeValue = <FIXNUMNODE>2</FIXNUMNODE></CONSTDECLNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>CNAME</COLON2NODE> &lt; <CONSTNODE>DomainName</CONSTNODE>
        <CONSTDECLNODE>TypeValue = <FIXNUMNODE>5</FIXNUMNODE></CONSTDECLNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>SOA</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
        <BLOCKNODE><CONSTDECLNODE>TypeValue = <FIXNUMNODE>6</FIXNUMNODE></CONSTDECLNODE>

        <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>mname</ARGUMENTNODE>, <ARGUMENTNODE>rname</ARGUMENTNODE>, <ARGUMENTNODE>serial</ARGUMENTNODE>, <ARGUMENTNODE>refresh</ARGUMENTNODE>, <ARGUMENTNODE>retry_</ARGUMENTNODE>, <ARGUMENTNODE>expire</ARGUMENTNODE>, <ARGUMENTNODE>minimum</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><INSTASGNNODE>@mname = <LOCALVARNODE>mname</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@rname = <LOCALVARNODE>rname</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@serial = <LOCALVARNODE>serial</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@refresh = <LOCALVARNODE>refresh</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@retry = <LOCALVARNODE>retry_</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@expire = <LOCALVARNODE>expire</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@minimum = <LOCALVARNODE>minimum</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:mname</SYMBOLNODE>, <SYMBOLNODE>:rname</SYMBOLNODE>, <SYMBOLNODE>:serial</SYMBOLNODE>, <SYMBOLNODE>:refresh</SYMBOLNODE>, <SYMBOLNODE>:retry</SYMBOLNODE>, <SYMBOLNODE>:expire</SYMBOLNODE>, <SYMBOLNODE>:minimum</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_name<ARRAYNODE>(<INSTVARNODE>@mname</INSTVARNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_name<ARRAYNODE>(<INSTVARNODE>@rname</INSTVARNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_pack<ARRAYNODE>(<STRNODE>'NNNNN'</STRNODE>, <INSTVARNODE>@serial</INSTVARNODE>, <INSTVARNODE>@refresh</INSTVARNODE>, <INSTVARNODE>@retry</INSTVARNODE>, <INSTVARNODE>@expire</INSTVARNODE>, <INSTVARNODE>@minimum</INSTVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>mname = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_name</CALLNODE></LOCALASGNNODE>
          <LOCALASGNNODE>rname = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_name</CALLNODE></LOCALASGNNODE>
          <MULTIPLEASGNNODE><ARRAYNODE><LOCALASGNNODE>serial</LOCALASGNNODE>, <LOCALASGNNODE>refresh</LOCALASGNNODE>, <LOCALASGNNODE>retry_</LOCALASGNNODE>, <LOCALASGNNODE>expire</LOCALASGNNODE>, <LOCALASGNNODE>minimum</LOCALASGNNODE></ARRAYNODE></MULTIPLEASGNNODE><TOARYNODE> = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_unpack<ARRAYNODE>(<STRNODE>'NNNNN'</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(
            <LOCALVARNODE>mname</LOCALVARNODE>, <LOCALVARNODE>rname</LOCALVARNODE>, <LOCALVARNODE>serial</LOCALVARNODE>, <LOCALVARNODE>refresh</LOCALVARNODE>, <LOCALVARNODE>retry_</LOCALVARNODE>, <LOCALVARNODE>expire</LOCALVARNODE>, <LOCALVARNODE>minimum</LOCALVARNODE>)</ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
        end</DEFSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>PTR</COLON2NODE> &lt; <CONSTNODE>DomainName</CONSTNODE>
        <CONSTDECLNODE>TypeValue = <FIXNUMNODE>12</FIXNUMNODE></CONSTDECLNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>HINFO</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
        <BLOCKNODE><CONSTDECLNODE>TypeValue = <FIXNUMNODE>13</FIXNUMNODE></CONSTDECLNODE>

        <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>cpu</ARGUMENTNODE>, <ARGUMENTNODE>os</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><INSTASGNNODE>@cpu = <LOCALVARNODE>cpu</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@os = <LOCALVARNODE>os</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:cpu</SYMBOLNODE>, <SYMBOLNODE>:os</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_string<ARRAYNODE>(<INSTVARNODE>@cpu</INSTVARNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_string<ARRAYNODE>(<INSTVARNODE>@os</INSTVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>cpu = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_string</CALLNODE></LOCALASGNNODE>
          <LOCALASGNNODE>os = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_string</CALLNODE></LOCALASGNNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<LOCALVARNODE>cpu</LOCALVARNODE>, <LOCALVARNODE>os</LOCALVARNODE>)</ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
        end</DEFSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>MINFO</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
        <BLOCKNODE><CONSTDECLNODE>TypeValue = <FIXNUMNODE>14</FIXNUMNODE></CONSTDECLNODE>

        <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>rmailbx</ARGUMENTNODE>, <ARGUMENTNODE>emailbx</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><INSTASGNNODE>@rmailbx = <LOCALVARNODE>rmailbx</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@emailbx = <LOCALVARNODE>emailbx</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:rmailbx</SYMBOLNODE>, <SYMBOLNODE>:emailbx</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_name<ARRAYNODE>(<INSTVARNODE>@rmailbx</INSTVARNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_name<ARRAYNODE>(<INSTVARNODE>@emailbx</INSTVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>rmailbx = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_string</CALLNODE></LOCALASGNNODE>
          <LOCALASGNNODE>emailbx = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_string</CALLNODE></LOCALASGNNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<LOCALVARNODE>rmailbx</LOCALVARNODE>, <LOCALVARNODE>emailbx</LOCALVARNODE>)</ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
        end</DEFSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>MX</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
        <BLOCKNODE><CONSTDECLNODE>TypeValue= <FIXNUMNODE>15</FIXNUMNODE></CONSTDECLNODE>

        <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>preference</ARGUMENTNODE>, <ARGUMENTNODE>exchange</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><INSTASGNNODE>@preference = <LOCALVARNODE>preference</LOCALVARNODE></INSTASGNNODE>
          <INSTASGNNODE>@exchange = <LOCALVARNODE>exchange</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:preference</SYMBOLNODE>, <SYMBOLNODE>:exchange</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>, <INSTVARNODE>@preference</INSTVARNODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_name<ARRAYNODE>(<INSTVARNODE>@exchange</INSTVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
        end</DEFNNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <ARRAYNODE><LOCALASGNNODE>preference</LOCALASGNNODE></ARRAYNODE><BLOCKNODE><MULTIPLEASGNNODE>, =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_unpack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>          <LOCALASGNNODE>exchange = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_name</CALLNODE></LOCALASGNNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<LOCALVARNODE>preference</LOCALVARNODE>, <LOCALVARNODE>exchange</LOCALVARNODE>)</ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
        end</DEFSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>TXT</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
        <BLOCKNODE><CONSTDECLNODE>TypeValue = <FIXNUMNODE>16</FIXNUMNODE></CONSTDECLNODE>

        <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>first_string</ARGUMENTNODE></LISTNODE>, <RESTARG>*rest_strings</RESTARG>)</ARGSNODE>
          <INSTASGNNODE>@strings = <ARGSCATNODE>[<ARRAYNODE><LOCALVARNODE>first_string</LOCALVARNODE></ARRAYNODE>, *<LOCALVARNODE>rest_strings</LOCALVARNODE>]</ARGSCATNODE></INSTASGNNODE>
        end</DEFNNODE>
        <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:strings</SYMBOLNODE></ARRAYNODE></FCALLNODE>

        <DEFNNODE>def <ARGUMENTNODE>data</ARGUMENTNODE><ARGSNODE/>
          <CALLNODE><INSTVARNODE>@strings</INSTVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE>]
        end</DEFNNODE>

        <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_string_list<ARRAYNODE>(<INSTVARNODE>@strings</INSTVARNODE>)</ARRAYNODE></CALLNODE>
        end</DEFNNODE>

        <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
          <BLOCKNODE><LOCALASGNNODE>strings = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_string_list</CALLNODE></LOCALASGNNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<SPLATNODE>(*<LOCALVARNODE>strings</LOCALVARNODE>)</SPLATNODE></CALLNODE></RETURNNODE></BLOCKNODE>
        end</DEFSNODE></BLOCKNODE>
      end</CLASSNODE>

      <CLASSNODE>class <COLON2NODE>ANY</COLON2NODE> &lt; <CONSTNODE>Query</CONSTNODE>
        <CONSTDECLNODE>TypeValue = <FIXNUMNODE>255</FIXNUMNODE></CONSTDECLNODE>
      end</CLASSNODE>

      <CONSTDECLNODE>ClassInsensitiveTypes = <ARRAYNODE>[
        <CONSTNODE>NS</CONSTNODE>, <CONSTNODE>CNAME</CONSTNODE>, <CONSTNODE>SOA</CONSTNODE>, <CONSTNODE>PTR</CONSTNODE>, <CONSTNODE>HINFO</CONSTNODE>, <CONSTNODE>MINFO</CONSTNODE>, <CONSTNODE>MX</CONSTNODE>, <CONSTNODE>TXT</CONSTNODE>, <CONSTNODE>ANY</CONSTNODE>
      ]</ARRAYNODE></CONSTDECLNODE>

      # ARPA Internet specific RRs
      <MODULENODE>module <COLON2NODE>IN</COLON2NODE>
        <BLOCKNODE><CONSTDECLNODE>ClassValue = <FIXNUMNODE>1</FIXNUMNODE></CONSTDECLNODE>

        <CALLNODE><CONSTNODE>ClassInsensitiveTypes</CONSTNODE>.each <ITERNODE>{|<DASGNNODE>s</DASGNNODE>|
          <BLOCKNODE><DASGNNODE>c = <CALLNODE><CONSTNODE>Class</CONSTNODE>.new<ARRAYNODE>(<DVARNODE>s</DVARNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
          <CALLNODE><DVARNODE>c</DVARNODE>.const_set<ARRAYNODE>(<SYMBOLNODE>:TypeValue</SYMBOLNODE>, <COLON2NODE><DVARNODE>s</DVARNODE>::TypeValue</COLON2NODE>)</ARRAYNODE></CALLNODE>
          <CALLNODE><DVARNODE>c</DVARNODE>.const_set<ARRAYNODE>(<SYMBOLNODE>:ClassValue</SYMBOLNODE>, <CONSTNODE>ClassValue</CONSTNODE>)</ARRAYNODE></CALLNODE>
          <ATTRASSIGNNODE><CONSTNODE>ClassHash</CONSTNODE>[<ARRAYNODE><ARRAYNODE>[<COLON2NODE><DVARNODE>s</DVARNODE>::TypeValue</COLON2NODE>, <CONSTNODE>ClassValue</CONSTNODE>]</ARRAYNODE>] = <DVARNODE>c</DVARNODE></ARRAYNODE></ATTRASSIGNNODE>
          <CALLNODE><SELFNODE>self</SELFNODE>.const_set<ARRAYNODE>(<CALLNODE><CALLNODE><DVARNODE>s</DVARNODE>.name</CALLNODE>.sub<ARRAYNODE>(/<REGEXPNODE>.*::</REGEXPNODE>/, <STRNODE>''</STRNODE>)</ARRAYNODE></CALLNODE>, <DVARNODE>c</DVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
        }</ITERNODE></CALLNODE>

        <CLASSNODE>class <COLON2NODE>A</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
          <BLOCKNODE><ATTRASSIGNNODE><CONSTNODE>ClassHash</CONSTNODE>[<ARRAYNODE><ARRAYNODE>[<CONSTDECLNODE>TypeValue = <FIXNUMNODE>1</FIXNUMNODE></CONSTDECLNODE>, <CONSTDECLNODE>ClassValue = <CONSTNODE>ClassValue</CONSTNODE></CONSTDECLNODE>]</ARRAYNODE>] = <SELFNODE>self</SELFNODE></ARRAYNODE></ATTRASSIGNNODE>

          <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <INSTASGNNODE>@address = <CALLNODE><CONSTNODE>IPv4</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE>
          end</DEFNNODE>
          <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:address</SYMBOLNODE></ARRAYNODE></FCALLNODE>

          <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_bytes<ARRAYNODE>(<CALLNODE><INSTVARNODE>@address</INSTVARNODE>.address</CALLNODE>)</ARRAYNODE></CALLNODE>
          end</DEFNNODE>

          <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<CALLNODE><CONSTNODE>IPv4</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_bytes<ARRAYNODE>(<FIXNUMNODE>4</FIXNUMNODE>)</ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
          end</DEFSNODE></BLOCKNODE>
        end</CLASSNODE>

        <CLASSNODE>class <COLON2NODE>WKS</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
          <BLOCKNODE><ATTRASSIGNNODE><CONSTNODE>ClassHash</CONSTNODE>[<ARRAYNODE><ARRAYNODE>[<CONSTDECLNODE>TypeValue = <FIXNUMNODE>11</FIXNUMNODE></CONSTDECLNODE>, <CONSTDECLNODE>ClassValue = <CONSTNODE>ClassValue</CONSTNODE></CONSTDECLNODE>]</ARRAYNODE>] = <SELFNODE>self</SELFNODE></ARRAYNODE></ATTRASSIGNNODE>

          <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE>, <ARGUMENTNODE>protocol</ARGUMENTNODE>, <ARGUMENTNODE>bitmap</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <BLOCKNODE><INSTASGNNODE>@address = <CALLNODE><CONSTNODE>IPv4</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE>
            <INSTASGNNODE>@protocol = <LOCALVARNODE>protocol</LOCALVARNODE></INSTASGNNODE>
            <INSTASGNNODE>@bitmap = <LOCALVARNODE>bitmap</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
          end</DEFNNODE>
          <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:address</SYMBOLNODE>, <SYMBOLNODE>:protocol</SYMBOLNODE>, <SYMBOLNODE>:bitmap</SYMBOLNODE></ARRAYNODE></FCALLNODE>

          <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <BLOCKNODE><CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_bytes<ARRAYNODE>(<CALLNODE><INSTVARNODE>@address</INSTVARNODE>.address</CALLNODE>)</ARRAYNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_pack<ARRAYNODE>(<STRNODE>"n"</STRNODE>, <INSTVARNODE>@protocol</INSTVARNODE>)</ARRAYNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_bytes<ARRAYNODE>(<INSTVARNODE>@bitmap</INSTVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
          end</DEFNNODE>

          <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <BLOCKNODE><LOCALASGNNODE>address = <CALLNODE><CONSTNODE>IPv4</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_bytes<ARRAYNODE>(<FIXNUMNODE>4</FIXNUMNODE>)</ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
            <ARRAYNODE><LOCALASGNNODE>protocol</LOCALASGNNODE></ARRAYNODE><MULTIPLEASGNNODE>, =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_unpack<ARRAYNODE>(<STRNODE>"n"</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>            <LOCALASGNNODE>bitmap = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_bytes</CALLNODE></LOCALASGNNODE>
            <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>, <LOCALVARNODE>protocol</LOCALVARNODE>, <LOCALVARNODE>bitmap</LOCALVARNODE>)</ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
          end</DEFSNODE></BLOCKNODE>
        end</CLASSNODE>

        <CLASSNODE>class <COLON2NODE>AAAA</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
          <BLOCKNODE><ATTRASSIGNNODE><CONSTNODE>ClassHash</CONSTNODE>[<ARRAYNODE><ARRAYNODE>[<CONSTDECLNODE>TypeValue = <FIXNUMNODE>28</FIXNUMNODE></CONSTDECLNODE>, <CONSTDECLNODE>ClassValue = <CONSTNODE>ClassValue</CONSTNODE></CONSTDECLNODE>]</ARRAYNODE>] = <SELFNODE>self</SELFNODE></ARRAYNODE></ATTRASSIGNNODE>

          <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <INSTASGNNODE>@address = <CALLNODE><CONSTNODE>IPv6</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE>
          end</DEFNNODE>
          <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:address</SYMBOLNODE></ARRAYNODE></FCALLNODE>

          <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_bytes<ARRAYNODE>(<CALLNODE><INSTVARNODE>@address</INSTVARNODE>.address</CALLNODE>)</ARRAYNODE></CALLNODE>
          end</DEFNNODE>

          <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<CALLNODE><CONSTNODE>IPv6</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_bytes<ARRAYNODE>(<FIXNUMNODE>16</FIXNUMNODE>)</ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
          end</DEFSNODE></BLOCKNODE>
        end</CLASSNODE>

        # SRV resource record defined in RFC 2782
        # 
        # These records identify the hostname and port that a service is
        # available at.
        # 
        # The format is:
        #   _Service._Proto.Name TTL Class SRV Priority Weight Port Target
        #
        # The fields specific to SRV are defined in RFC 2782 as meaning:
        # - +priority+ The priority of this target host.  A client MUST attempt
        #   to contact the target host with the lowest-numbered priority it can
        #   reach; target hosts with the same priority SHOULD be tried in an
        #   order defined by the weight field.  The range is 0-65535.  Note that
        #   it is not widely implemented and should be set to zero.
        # 
        # - +weight+ A server selection mechanism.  The weight field specifies
        #   a relative weight for entries with the same priority. Larger weights
        #   SHOULD be given a proportionately higher probability of being
        #   selected. The range of this number is 0-65535.  Domain administrators
        #   SHOULD use Weight 0 when there isn't any server selection to do, to
        #   make the RR easier to read for humans (less noisy). Note that it is
        #   not widely implemented and should be set to zero.
        #
        # - +port+  The port on this target host of this service.  The range is 0-
        #   65535.
        # 
        # - +target+ The domain name of the target host. A target of "." means
        #   that the service is decidedly not available at this domain.
        <CLASSNODE>class <COLON2NODE>SRV</COLON2NODE> &lt; <CONSTNODE>Resource</CONSTNODE>
          <BLOCKNODE><ATTRASSIGNNODE><CONSTNODE>ClassHash</CONSTNODE>[<ARRAYNODE><ARRAYNODE>[<CONSTDECLNODE>TypeValue = <FIXNUMNODE>33</FIXNUMNODE></CONSTDECLNODE>, <CONSTDECLNODE>ClassValue = <CONSTNODE>ClassValue</CONSTNODE></CONSTDECLNODE>]</ARRAYNODE>] = <SELFNODE>self</SELFNODE></ARRAYNODE></ATTRASSIGNNODE>

          # Create a SRV resource record.
          <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>priority</ARGUMENTNODE>, <ARGUMENTNODE>weight</ARGUMENTNODE>, <ARGUMENTNODE>port</ARGUMENTNODE>, <ARGUMENTNODE>target</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <BLOCKNODE><INSTASGNNODE>@priority = <CALLNODE><LOCALVARNODE>priority</LOCALVARNODE>.to_int</CALLNODE></INSTASGNNODE>
            <INSTASGNNODE>@weight = <CALLNODE><LOCALVARNODE>weight</LOCALVARNODE>.to_int</CALLNODE></INSTASGNNODE>
            <INSTASGNNODE>@port = <CALLNODE><LOCALVARNODE>port</LOCALVARNODE>.to_int</CALLNODE></INSTASGNNODE>
            <INSTASGNNODE>@target = <CALLNODE><CONSTNODE>Name</CONSTNODE>.create<ARRAYNODE>(<LOCALVARNODE>target</LOCALVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE></BLOCKNODE>
          end</DEFNNODE>

          <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:priority</SYMBOLNODE>, <SYMBOLNODE>:weight</SYMBOLNODE>, <SYMBOLNODE>:port</SYMBOLNODE>, <SYMBOLNODE>:target</SYMBOLNODE></ARRAYNODE></FCALLNODE>

          <DEFNNODE>def <ARGUMENTNODE>encode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <BLOCKNODE><CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_pack<ARRAYNODE>(<STRNODE>"n"</STRNODE>, <INSTVARNODE>@priority</INSTVARNODE>)</ARRAYNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_pack<ARRAYNODE>(<STRNODE>"n"</STRNODE>, <INSTVARNODE>@weight</INSTVARNODE>)</ARRAYNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_pack<ARRAYNODE>(<STRNODE>"n"</STRNODE>, <INSTVARNODE>@port</INSTVARNODE>)</ARRAYNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.put_name<ARRAYNODE>(<INSTVARNODE>@target</INSTVARNODE>)</ARRAYNODE></CALLNODE></BLOCKNODE>
          end</DEFNNODE>

          <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>decode_rdata</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>msg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
            <ARRAYNODE><LOCALASGNNODE>priority</LOCALASGNNODE></ARRAYNODE><BLOCKNODE><MULTIPLEASGNNODE>, =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_unpack<ARRAYNODE>(<STRNODE>"n"</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>            <ARRAYNODE><LOCALASGNNODE>weight</LOCALASGNNODE></ARRAYNODE><MULTIPLEASGNNODE>,   =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_unpack<ARRAYNODE>(<STRNODE>"n"</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>            <ARRAYNODE><LOCALASGNNODE>port</LOCALASGNNODE></ARRAYNODE><MULTIPLEASGNNODE>,     =</MULTIPLEASGNNODE><TOARYNODE> <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_unpack<ARRAYNODE>(<STRNODE>"n"</STRNODE>)</ARRAYNODE></CALLNODE>
</TOARYNODE>            <LOCALASGNNODE>target    = <CALLNODE><LOCALVARNODE>msg</LOCALVARNODE>.get_name</CALLNODE></LOCALASGNNODE>
            <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<LOCALVARNODE>priority</LOCALVARNODE>, <LOCALVARNODE>weight</LOCALVARNODE>, <LOCALVARNODE>port</LOCALVARNODE>, <LOCALVARNODE>target</LOCALVARNODE>)</ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
          end</DEFSNODE></BLOCKNODE>
        end</CLASSNODE></BLOCKNODE>

      end</MODULENODE></BLOCKNODE>
    end</CLASSNODE></BLOCKNODE>
  end</CLASSNODE>

  <CLASSNODE>class <COLON2NODE>IPv4</COLON2NODE>
    <BLOCKNODE><CONSTDECLNODE>Regex = /<REGEXPNODE>\A(\d+)\.(\d+)\.(\d+)\.(\d+)\z</REGEXPNODE></CONSTDECLNODE>/

    <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>create</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>arg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <CASENODE>case <LOCALVARNODE>arg</LOCALVARNODE>
      <ARRAYNODE><WHENNODE>when <CONSTNODE>IPv4</CONSTNODE>
        <RETURNNODE>return <LOCALVARNODE>arg</LOCALVARNODE></RETURNNODE></WHENNODE>
      <WHENNODE>when <CONSTNODE>Regex</CONSTNODE>
        <IFNODE>if <ANDNODE><ANDNODE><ANDNODE><CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE>(<LOCALASGNNODE>a = <CALLNODE><NTHREFNODE>$1</NTHREFNODE>.to_i</CALLNODE></LOCALASGNNODE>)</ARRAYNODE></CALLNODE> &amp;&amp;
            <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE>(<LOCALASGNNODE>b = <CALLNODE><NTHREFNODE>$2</NTHREFNODE>.to_i</CALLNODE></LOCALASGNNODE>)</ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
            <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE>(<LOCALASGNNODE>c = <CALLNODE><NTHREFNODE>$3</NTHREFNODE>.to_i</CALLNODE></LOCALASGNNODE>)</ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp;
            <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE>(<LOCALASGNNODE>d = <CALLNODE><NTHREFNODE>$4</NTHREFNODE>.to_i</CALLNODE></LOCALASGNNODE>)</ARRAYNODE></CALLNODE></ANDNODE>
          <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE>.new<ARRAYNODE>(<CALLNODE><ARRAYNODE>[<LOCALVARNODE>a</LOCALVARNODE>, <LOCALVARNODE>b</LOCALVARNODE>, <LOCALVARNODE>c</LOCALVARNODE>, <LOCALVARNODE>d</LOCALVARNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>"CCCC"</STRNODE>)</ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
        else
          <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><STRNODE>"IPv4 address with invalid value: "</STRNODE> + <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
        end</IFNODE></WHENNODE></ARRAYNODE>
      else
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"cannot interpret as IPv4 address: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>arg</LOCALVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
      end</CASENODE>
    end</DEFSNODE>

    <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><IFNODE>unless <ANDNODE><CALLNODE><LOCALVARNODE>address</LOCALVARNODE>.kind_of?<ARRAYNODE>(<CONSTNODE>String</CONSTNODE>)</ARRAYNODE></CALLNODE> &amp;&amp; <CALLNODE><CALLNODE><LOCALVARNODE>address</LOCALVARNODE>.length</CALLNODE> == <ARRAYNODE><FIXNUMNODE>4</FIXNUMNODE></ARRAYNODE></CALLNODE></ANDNODE>
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE>(<STRNODE>'IPv4 address must be 4 bytes'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
      end</IFNODE>
      <INSTASGNNODE>@address = <LOCALVARNODE>address</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
    end</DEFNNODE>
    <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:address</SYMBOLNODE></ARRAYNODE></FCALLNODE>

    <DEFNNODE>def <ARGUMENTNODE>to_s</ARGUMENTNODE><ARGSNODE/>
      <RETURNNODE>return <FCALLNODE>sprintf<ARGSCATNODE>(<ARRAYNODE><STRNODE>"%d.%d.%d.%d"</STRNODE></ARRAYNODE>, *<CALLNODE><INSTVARNODE>@address</INSTVARNODE>.unpack<ARRAYNODE>(<STRNODE>"CCCC"</STRNODE>)</ARRAYNODE></CALLNODE>)</ARGSCATNODE></FCALLNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>inspect</ARGUMENTNODE><ARGSNODE/>
      <RETURNNODE>return<STRNODE> <DSTRNODE>"#&lt;</STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.class</CALLNODE>}</EVSTRNODE><STRNODE> </STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.to_s</CALLNODE>}</EVSTRNODE><STRNODE>&gt;</STRNODE>"</DSTRNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>to_name</ARGUMENTNODE><ARGSNODE/>
      <RETURNNODE>return <CALLNODE><COLON2NODE><CONSTNODE>DNS</CONSTNODE>::Name</COLON2NODE>.create<ARRAYNODE>(
        <CALLNODE><STRNODE>'%d.%d.%d.%d.in-addr.arpa.'</STRNODE> % <ARRAYNODE><CALLNODE><CALLNODE><INSTVARNODE>@address</INSTVARNODE>.unpack<ARRAYNODE>(<STRNODE>'CCCC'</STRNODE>)</ARRAYNODE></CALLNODE>.reverse</CALLNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>==</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <RETURNNODE>return <CALLNODE><INSTVARNODE>@address</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.address</CALLNODE></ARRAYNODE></CALLNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>eql?</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE> == <ARRAYNODE><LOCALVARNODE>other</LOCALVARNODE></ARRAYNODE></CALLNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>hash</ARGUMENTNODE><ARGSNODE/>
      <RETURNNODE>return <CALLNODE><INSTVARNODE>@address</INSTVARNODE>.hash</CALLNODE></RETURNNODE>
    end</DEFNNODE></BLOCKNODE>
  end</CLASSNODE>

  <CLASSNODE>class <COLON2NODE>IPv6</COLON2NODE>
    <BLOCKNODE><CONSTDECLNODE>Regex_8Hex = /<REGEXPNODE>\A
      (?:[0-9A-Fa-f]{1,4}:){7}
         [0-9A-Fa-f]{1,4}
      \z</REGEXPNODE></CONSTDECLNODE>/x

    <CONSTDECLNODE>Regex_CompressedHex = /<REGEXPNODE>\A
      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?) ::
      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)
      \z</REGEXPNODE></CONSTDECLNODE>/x

    <CONSTDECLNODE>Regex_6Hex4Dec = /<REGEXPNODE>\A
      ((?:[0-9A-Fa-f]{1,4}:){6,6})
      (\d+)\.(\d+)\.(\d+)\.(\d+)
      \z</REGEXPNODE></CONSTDECLNODE>/x

    <CONSTDECLNODE>Regex_CompressedHex4Dec = /<REGEXPNODE>\A
      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?) ::
      ((?:[0-9A-Fa-f]{1,4}:)*)
      (\d+)\.(\d+)\.(\d+)\.(\d+)
      \z</REGEXPNODE></CONSTDECLNODE>/x

    <CONSTDECLNODE>Regex = <STRNODE>/<DREGEXPNODE>
      (?:</STRNODE><EVSTRNODE>#{<CONSTNODE>Regex_8Hex</CONSTNODE>}</EVSTRNODE><STRNODE>) |
      (?:</STRNODE><EVSTRNODE>#{<CONSTNODE>Regex_CompressedHex</CONSTNODE>}</EVSTRNODE><STRNODE>) |
      (?:</STRNODE><EVSTRNODE>#{<CONSTNODE>Regex_6Hex4Dec</CONSTNODE>}</EVSTRNODE><STRNODE>) |
      (?:</STRNODE><EVSTRNODE>#{<CONSTNODE>Regex_CompressedHex4Dec</CONSTNODE>}</EVSTRNODE><STRNODE>)</STRNODE></DREGEXPNODE></CONSTDECLNODE>/x

    <DEFSNODE>def <SELFNODE>self</SELFNODE>.<ARGUMENTNODE>create</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>arg</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <CASENODE>case <LOCALVARNODE>arg</LOCALVARNODE>
      <ARRAYNODE><WHENNODE>when <CONSTNODE>IPv6</CONSTNODE>
        <RETURNNODE>return <LOCALVARNODE>arg</LOCALVARNODE></RETURNNODE></WHENNODE>
      <WHENNODE>when <CONSTNODE>String</CONSTNODE>
        <BLOCKNODE><LOCALASGNNODE>address = <STRNODE>''</STRNODE></LOCALASGNNODE>
        <IFNODE>if <CALLNODE><CONSTNODE>Regex_8Hex</CONSTNODE> =~ <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>arg</LOCALVARNODE>.scan<ARRAYNODE>(/<REGEXPNODE>[0-9A-Fa-f]+</REGEXPNODE>/)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>hex</DASGNNODE>| <CALLNODE><LOCALVARNODE>address</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<CALLNODE><DVARNODE>hex</DVARNODE>.hex</CALLNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>
        elsif<IFNODE> <CALLNODE><CONSTNODE>Regex_CompressedHex</CONSTNODE> =~ <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>
          <BLOCKNODE><LOCALASGNNODE>prefix = <NTHREFNODE>$1</NTHREFNODE></LOCALASGNNODE>
          <LOCALASGNNODE>suffix = <NTHREFNODE>$2</NTHREFNODE></LOCALASGNNODE>
          <LOCALASGNNODE>a1 = <STRNODE>''</STRNODE></LOCALASGNNODE>
          <LOCALASGNNODE>a2 = <STRNODE>''</STRNODE></LOCALASGNNODE>
          <CALLNODE><LOCALVARNODE>prefix</LOCALVARNODE>.scan<ARRAYNODE>(/<REGEXPNODE>[0-9A-Fa-f]+</REGEXPNODE>/)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>hex</DASGNNODE>| <CALLNODE><LOCALVARNODE>a1</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<CALLNODE><DVARNODE>hex</DVARNODE>.hex</CALLNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>
          <CALLNODE><LOCALVARNODE>suffix</LOCALVARNODE>.scan<ARRAYNODE>(/<REGEXPNODE>[0-9A-Fa-f]+</REGEXPNODE>/)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>hex</DASGNNODE>| <CALLNODE><LOCALVARNODE>a2</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<CALLNODE><DVARNODE>hex</DVARNODE>.hex</CALLNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>
          <LOCALASGNNODE>omitlen = <CALLNODE><CALLNODE><FIXNUMNODE>16</FIXNUMNODE> - <ARRAYNODE><CALLNODE><LOCALVARNODE>a1</LOCALVARNODE>.length</CALLNODE></ARRAYNODE></CALLNODE> - <ARRAYNODE><CALLNODE><LOCALVARNODE>a2</LOCALVARNODE>.length</CALLNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
          <CALLNODE><CALLNODE><CALLNODE><LOCALVARNODE>address</LOCALVARNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>a1</LOCALVARNODE></ARRAYNODE></CALLNODE> &lt;&lt; <ARRAYNODE><CALLNODE><STRNODE>"\0"</STRNODE> * <ARRAYNODE><LOCALVARNODE>omitlen</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>a2</LOCALVARNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
        elsif<IFNODE> <CALLNODE><CONSTNODE>Regex_6Hex4Dec</CONSTNODE> =~ <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>
          <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><LOCALASGNNODE>prefix</LOCALASGNNODE>, <LOCALASGNNODE>a</LOCALASGNNODE>, <LOCALASGNNODE>b</LOCALASGNNODE>, <LOCALASGNNODE>c</LOCALASGNNODE>, <LOCALASGNNODE>d</LOCALASGNNODE></ARRAYNODE> = <ARRAYNODE><NTHREFNODE>$1</NTHREFNODE>, <CALLNODE><NTHREFNODE>$2</NTHREFNODE>.to_i</CALLNODE>, <CALLNODE><NTHREFNODE>$3</NTHREFNODE>.to_i</CALLNODE>, <CALLNODE><NTHREFNODE>$4</NTHREFNODE>.to_i</CALLNODE>, <CALLNODE><NTHREFNODE>$5</NTHREFNODE>.to_i</CALLNODE></ARRAYNODE></MULTIPLEASGNNODE>
          <IFNODE>if <ANDNODE><ANDNODE><ANDNODE><CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>a</LOCALVARNODE></ARRAYNODE></CALLNODE> &amp;&amp; <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>b</LOCALVARNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp; <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>c</LOCALVARNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp; <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>d</LOCALVARNODE></ARRAYNODE></CALLNODE></ANDNODE>
            <BLOCKNODE><CALLNODE><LOCALVARNODE>prefix</LOCALVARNODE>.scan<ARRAYNODE>(/<REGEXPNODE>[0-9A-Fa-f]+</REGEXPNODE>/)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>hex</DASGNNODE>| <CALLNODE><LOCALVARNODE>address</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<CALLNODE><DVARNODE>hex</DVARNODE>.hex</CALLNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>address</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<LOCALVARNODE>a</LOCALVARNODE>, <LOCALVARNODE>b</LOCALVARNODE>, <LOCALVARNODE>c</LOCALVARNODE>, <LOCALVARNODE>d</LOCALVARNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'CCCC'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
          else
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><STRNODE>"not numeric IPv6 address: "</STRNODE> + <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
          end</IFNODE></BLOCKNODE>
        elsif<IFNODE> <CALLNODE><CONSTNODE>Regex_CompressedHex4Dec</CONSTNODE> =~ <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>
          <BLOCKNODE><MULTIPLEASGNNODE><ARRAYNODE><LOCALASGNNODE>prefix</LOCALASGNNODE>, <LOCALASGNNODE>suffix</LOCALASGNNODE>, <LOCALASGNNODE>a</LOCALASGNNODE>, <LOCALASGNNODE>b</LOCALASGNNODE>, <LOCALASGNNODE>c</LOCALASGNNODE>, <LOCALASGNNODE>d</LOCALASGNNODE></ARRAYNODE> = <ARRAYNODE><NTHREFNODE>$1</NTHREFNODE>, <NTHREFNODE>$2</NTHREFNODE>, <CALLNODE><NTHREFNODE>$3</NTHREFNODE>.to_i</CALLNODE>, <CALLNODE><NTHREFNODE>$4</NTHREFNODE>.to_i</CALLNODE>, <CALLNODE><NTHREFNODE>$5</NTHREFNODE>.to_i</CALLNODE>, <CALLNODE><NTHREFNODE>$6</NTHREFNODE>.to_i</CALLNODE></ARRAYNODE></MULTIPLEASGNNODE>
          <IFNODE>if <ANDNODE><ANDNODE><ANDNODE><CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>a</LOCALVARNODE></ARRAYNODE></CALLNODE> &amp;&amp; <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>b</LOCALVARNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp; <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>c</LOCALVARNODE></ARRAYNODE></CALLNODE></ANDNODE> &amp;&amp; <CALLNODE>(<DOTNODE><FIXNUMNODE>0</FIXNUMNODE>..<FIXNUMNODE>255</FIXNUMNODE></DOTNODE>) === <ARRAYNODE><LOCALVARNODE>d</LOCALVARNODE></ARRAYNODE></CALLNODE></ANDNODE>
            <BLOCKNODE><LOCALASGNNODE>a1 = <STRNODE>''</STRNODE></LOCALASGNNODE>
            <LOCALASGNNODE>a2 = <STRNODE>''</STRNODE></LOCALASGNNODE>
            <CALLNODE><LOCALVARNODE>prefix</LOCALVARNODE>.scan<ARRAYNODE>(/<REGEXPNODE>[0-9A-Fa-f]+</REGEXPNODE>/)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>hex</DASGNNODE>| <CALLNODE><LOCALVARNODE>a1</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<CALLNODE><DVARNODE>hex</DVARNODE>.hex</CALLNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>
            <CALLNODE><LOCALVARNODE>suffix</LOCALVARNODE>.scan<ARRAYNODE>(/<REGEXPNODE>[0-9A-Fa-f]+</REGEXPNODE>/)</ARRAYNODE> <ITERNODE>{|<DASGNNODE>hex</DASGNNODE>| <CALLNODE><LOCALVARNODE>a2</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<CALLNODE><DVARNODE>hex</DVARNODE>.hex</CALLNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'n'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE>
            <LOCALASGNNODE>omitlen = <CALLNODE><CALLNODE><FIXNUMNODE>12</FIXNUMNODE> - <ARRAYNODE><CALLNODE><LOCALVARNODE>a1</LOCALVARNODE>.length</CALLNODE></ARRAYNODE></CALLNODE> - <ARRAYNODE><CALLNODE><LOCALVARNODE>a2</LOCALVARNODE>.length</CALLNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
            <CALLNODE><CALLNODE><CALLNODE><CALLNODE><LOCALVARNODE>address</LOCALVARNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>a1</LOCALVARNODE></ARRAYNODE></CALLNODE> &lt;&lt; <ARRAYNODE><CALLNODE><STRNODE>"\0"</STRNODE> * <ARRAYNODE><LOCALVARNODE>omitlen</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>a2</LOCALVARNODE></ARRAYNODE></CALLNODE> &lt;&lt; <ARRAYNODE><CALLNODE><ARRAYNODE>[<LOCALVARNODE>a</LOCALVARNODE>, <LOCALVARNODE>b</LOCALVARNODE>, <LOCALVARNODE>c</LOCALVARNODE>, <LOCALVARNODE>d</LOCALVARNODE>]</ARRAYNODE>.pack<ARRAYNODE>(<STRNODE>'CCCC'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
          else
            <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><STRNODE>"not numeric IPv6 address: "</STRNODE> + <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
          end</IFNODE></BLOCKNODE>
        else
          <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><STRNODE>"not numeric IPv6 address: "</STRNODE> + <ARRAYNODE><LOCALVARNODE>arg</LOCALVARNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
        end</IFNODE></IFNODE></IFNODE></IFNODE>
        <RETURNNODE>return <CALLNODE><CONSTNODE>IPv6</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>address</LOCALVARNODE>)</ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE></WHENNODE></ARRAYNODE>
      else
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE><STRNODE>(<DSTRNODE>"cannot interpret as IPv6 address: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>arg</LOCALVARNODE>.inspect</CALLNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
      end</CASENODE>
    end</DEFSNODE>

    <DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>address</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <BLOCKNODE><IFNODE>unless <ANDNODE><CALLNODE><LOCALVARNODE>address</LOCALVARNODE>.kind_of?<ARRAYNODE>(<CONSTNODE>String</CONSTNODE>)</ARRAYNODE></CALLNODE> &amp;&amp; <CALLNODE><CALLNODE><LOCALVARNODE>address</LOCALVARNODE>.length</CALLNODE> == <ARRAYNODE><FIXNUMNODE>16</FIXNUMNODE></ARRAYNODE></CALLNODE></ANDNODE>
        <FCALLNODE>raise <ARRAYNODE><CALLNODE><CONSTNODE>ArgumentError</CONSTNODE>.new<ARRAYNODE>(<STRNODE>'IPv6 address must be 16 bytes'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
      end</IFNODE>
      <INSTASGNNODE>@address = <LOCALVARNODE>address</LOCALVARNODE></INSTASGNNODE></BLOCKNODE>
    end</DEFNNODE>
    <FCALLNODE>attr_reader <ARRAYNODE><SYMBOLNODE>:address</SYMBOLNODE></ARRAYNODE></FCALLNODE>

    <DEFNNODE>def <ARGUMENTNODE>to_s</ARGUMENTNODE><ARGSNODE/>
      <BLOCKNODE><LOCALASGNNODE>address = <FCALLNODE>sprintf<ARGSCATNODE>(<ARRAYNODE><STRNODE>"%X:%X:%X:%X:%X:%X:%X:%X"</STRNODE></ARRAYNODE>, *<CALLNODE><INSTVARNODE>@address</INSTVARNODE>.unpack<ARRAYNODE>(<STRNODE>"nnnnnnnn"</STRNODE>)</ARRAYNODE></CALLNODE>)</ARGSCATNODE></FCALLNODE></LOCALASGNNODE>
      <IFNODE>unless <CALLNODE><LOCALVARNODE>address</LOCALVARNODE>.sub!<ARRAYNODE>(/<REGEXPNODE>(^|:)0(:0)+(:|$)</REGEXPNODE>/, <STRNODE>'::'</STRNODE>)</ARRAYNODE></CALLNODE>
        <CALLNODE><LOCALVARNODE>address</LOCALVARNODE>.sub!<ARRAYNODE>(/<REGEXPNODE>(^|:)0(:|$)</REGEXPNODE>/, <STRNODE>'::'</STRNODE>)</ARRAYNODE></CALLNODE>
      end</IFNODE>
      <RETURNNODE>return <LOCALVARNODE>address</LOCALVARNODE></RETURNNODE></BLOCKNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>inspect</ARGUMENTNODE><ARGSNODE/>
      <RETURNNODE>return<STRNODE> <DSTRNODE>"#&lt;</STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.class</CALLNODE>}</EVSTRNODE><STRNODE> </STRNODE><EVSTRNODE>#{<CALLNODE><SELFNODE>self</SELFNODE>.to_s</CALLNODE>}</EVSTRNODE><STRNODE>&gt;</STRNODE>"</DSTRNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>to_name</ARGUMENTNODE><ARGSNODE/>
      # ip6.arpa should be searched too. [RFC3152]
      <RETURNNODE>return <CALLNODE><COLON2NODE><CONSTNODE>DNS</CONSTNODE>::Name</COLON2NODE>.new<ARRAYNODE>(
        <CALLNODE><CALLNODE><CALLNODE><CALLNODE><CALLNODE><INSTVARNODE>@address</INSTVARNODE>.unpack<ARRAYNODE>(<STRNODE>"H32"</STRNODE>)</ARRAYNODE></CALLNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE>].split<ARRAYNODE>(/<REGEXPNODE>/</REGEXPNODE>)</ARRAYNODE></CALLNODE>.reverse</CALLNODE> + <ARRAYNODE><ARRAYNODE>[<STRNODE>'ip6'</STRNODE>, <STRNODE>'int'</STRNODE>]</ARRAYNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>==</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <RETURNNODE>return <CALLNODE><INSTVARNODE>@address</INSTVARNODE> == <ARRAYNODE><CALLNODE><LOCALVARNODE>other</LOCALVARNODE>.address</CALLNODE></ARRAYNODE></CALLNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>eql?</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>other</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
      <RETURNNODE>return <CALLNODE><SELFNODE>self</SELFNODE> == <ARRAYNODE><LOCALVARNODE>other</LOCALVARNODE></ARRAYNODE></CALLNODE></RETURNNODE>
    end</DEFNNODE>

    <DEFNNODE>def <ARGUMENTNODE>hash</ARGUMENTNODE><ARGSNODE/>
      <RETURNNODE>return <CALLNODE><INSTVARNODE>@address</INSTVARNODE>.hash</CALLNODE></RETURNNODE>
    end</DEFNNODE></BLOCKNODE>
  end</CLASSNODE>

  <CONSTDECLNODE>DefaultResolver = <CALLNODE><SELFNODE>self</SELFNODE>.new</CALLNODE></CONSTDECLNODE>
  <CONSTDECLNODE>AddressRegex = <STRNODE>/<DREGEXPNODE>(?:</STRNODE><EVSTRNODE>#{<COLON2NODE><CONSTNODE>IPv4</CONSTNODE>::Regex</COLON2NODE>}</EVSTRNODE><STRNODE>)|(?:</STRNODE><EVSTRNODE>#{<COLON2NODE><CONSTNODE>IPv6</CONSTNODE>::Regex</COLON2NODE>}</EVSTRNODE><STRNODE>)</STRNODE></DREGEXPNODE></CONSTDECLNODE></BLOCKNODE>/
end</CLASSNODE></BLOCKNODE>
