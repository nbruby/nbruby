
#   Copyright Â© 2006 Sun Microsystems, Inc. All rights reserved
#   Use is subject to license terms - see file "LICENSE"

<BLOCKNODE><FCALLNODE>require <ARRAYNODE><STRNODE>'rexml/document'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'rubygems'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'builder'</STRNODE></ARRAYNODE></FCALLNODE>

<FCALLNODE>require <ARRAYNODE><STRNODE>'getter'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'service'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'samples'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'entry'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'poster'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'collection'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'deleter'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'putter'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'feed'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'html'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'crumbs'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'escaper'</STRNODE></ARRAYNODE></FCALLNODE> 
<FCALLNODE>require <ARRAYNODE><STRNODE>'categories'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'names'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'validator'</STRNODE></ARRAYNODE></FCALLNODE>
<FCALLNODE>require <ARRAYNODE><STRNODE>'authent'</STRNODE></ARRAYNODE></FCALLNODE>

<CLASSNODE>class <COLON2NODE>Ape</COLON2NODE>

  <BLOCKNODE><DEFNNODE>def <ARGUMENTNODE>initialize</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>args</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><INSTASGNNODE>@dialogs = (<CALLNODE><LOCALVARNODE>args</LOCALVARNODE>[<ARRAYNODE><SYMBOLNODE>:crumbs</SYMBOLNODE></ARRAYNODE></CALLNODE>])<IFNODE> ? <HASHNODE>{}</HASHNODE><ARRAYNODE/> : <ZARRAYNODE>[]</ZARRAYNODE>
</IFNODE></INSTASGNNODE>    <LOCALASGNNODE>output = <ORNODE><CALLNODE><LOCALVARNODE>args</LOCALVARNODE>[<ARRAYNODE><SYMBOLNODE>:output</SYMBOLNODE></ARRAYNODE></CALLNODE>] || <STRNODE>'html'</STRNODE></ORNODE></LOCALASGNNODE>
    <IFNODE>if <ORNODE><CALLNODE><LOCALVARNODE>output</LOCALVARNODE> == <ARRAYNODE><STRNODE>'text'</STRNODE></ARRAYNODE></CALLNODE> || <CALLNODE><LOCALVARNODE>output</LOCALVARNODE> == <ARRAYNODE><STRNODE>'html'</STRNODE></ARRAYNODE></CALLNODE></ORNODE>
      <INSTASGNNODE>@output = <LOCALVARNODE>output</LOCALVARNODE></INSTASGNNODE>
    else
      <FCALLNODE>raise <ARRAYNODE><CONSTNODE>ArgumentError</CONSTNODE>, <STRNODE>"output must be 'text' or 'html'"</STRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>

    <INSTASGNNODE>@diarefs = <HASHNODE>{}</HASHNODE></INSTASGNNODE><ARRAYNODE/>
    <INSTASGNNODE>@dianum = <FIXNUMNODE>1</FIXNUMNODE></INSTASGNNODE>
    <CLASSVARASGNNODE>@@debugging = <CALLNODE><LOCALVARNODE>args</LOCALVARNODE>[<ARRAYNODE><SYMBOLNODE>:debug</SYMBOLNODE></ARRAYNODE></CALLNODE></CLASSVARASGNNODE>]
    <INSTASGNNODE>@steps = <ZARRAYNODE>[]</ZARRAYNODE></INSTASGNNODE>
    <INSTASGNNODE>@header = <INSTASGNNODE>@footer = <NILNODE>nil</NILNODE></INSTASGNNODE></INSTASGNNODE>
    <INSTASGNNODE>@lnum = <FIXNUMNODE>1</FIXNUMNODE></INSTASGNNODE></BLOCKNODE>
  end</DEFNNODE>

  # Args: APP URI, username/password, preferred entry/media collections
  <DEFNNODE>def <ARGUMENTNODE>check</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>uri</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>username=<NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE>, <LOCALASGNNODE>password=<NILNODE>nil</NILNODE></LOCALASGNNODE>,
      <LOCALASGNNODE>requested_e_coll = <NILNODE>nil</NILNODE></LOCALASGNNODE>, <LOCALASGNNODE>requested_m_coll = <NILNODE>nil</NILNODE></LOCALASGNNODE></BLOCKNODE>)</ARGSNODE>

    # Google athent weirdness
    <BLOCKNODE><INSTASGNNODE>@authent = <CALLNODE><CONSTNODE>Authent</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>username</LOCALVARNODE>, <LOCALVARNODE>password</LOCALVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE>
    <FCALLNODE>header<ARRAYNODE>(<LOCALVARNODE>uri</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    <BEGINNODE>begin
      <RESCUENODE><FCALLNODE>might_fail<ARRAYNODE>(<LOCALVARNODE>uri</LOCALVARNODE>, <LOCALVARNODE>requested_e_coll</LOCALVARNODE>, <LOCALVARNODE>requested_m_coll</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>Exception</CONSTNODE></ARRAYNODE>
      <FCALLNODE>error <ARRAYNODE><CALLNODE><STRNODE>"Ouch! Ape fall down go boom; details: "</STRNODE> +
        <ARRAYNODE><DSTRNODE>"<EVSTRNODE>#{<GLOBALVARNODE>$!</GLOBALVARNODE>}</EVSTRNODE><STRNODE>\n</STRNODE><EVSTRNODE>#{<CALLNODE><GLOBALVARNODE>$!</GLOBALVARNODE>.class</CALLNODE>}</EVSTRNODE><STRNODE>\n</STRNODE><EVSTRNODE>#{<CALLNODE><GLOBALVARNODE>$!</GLOBALVARNODE>.backtrace</CALLNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
    end</RESCUEBODYNODE></RESCUENODE></BEGINNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>might_fail</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>uri</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>requested_e_coll = <NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE>, <LOCALASGNNODE>requested_m_coll = <NILNODE>nil</NILNODE></LOCALASGNNODE></BLOCKNODE>)</ARGSNODE>

    <BLOCKNODE><FCALLNODE>info <ARRAYNODE><STRNODE>"TESTING: Service document and collections."</STRNODE></ARRAYNODE></FCALLNODE>
    <LOCALASGNNODE>name = <STRNODE>'Retrieval of Service Document'</STRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>service = <FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>uri</LOCALVARNODE>, <LOCALVARNODE>name</LOCALVARNODE>, <COLON2NODE><CONSTNODE>Names</CONSTNODE>::AppMediaType</COLON2NODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <IFNODE><RETURNNODE>return</RETURNNODE> unless <LOCALVARNODE>service</LOCALVARNODE></IFNODE>

    # * XML-parse the service doc
    <LOCALASGNNODE>text = <CALLNODE><LOCALVARNODE>service</LOCALVARNODE>.body</CALLNODE></LOCALASGNNODE>
    <BEGINNODE>begin
      <RESCUENODE><LOCALASGNNODE>service = <CALLNODE><COLON2NODE><CONSTNODE>REXML</CONSTNODE>::Document</COLON2NODE>.new<ARRAYNODE>(<LOCALVARNODE>text</LOCALVARNODE>, <HASHNODE>{ <ARRAYNODE><SYMBOLNODE>:raw</SYMBOLNODE> =&gt; <NILNODE>nil</NILNODE></ARRAYNODE> }</HASHNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <RESCUEBODYNODE>rescue <ARRAYNODE><COLON2NODE><CONSTNODE>REXML</CONSTNODE>::ParseException</COLON2NODE></ARRAYNODE>
      <BLOCKNODE><LOCALASGNNODE>prob = <CALLNODE><CALLNODE><GLOBALVARNODE>$!</GLOBALVARNODE>.to_s</CALLNODE>.gsub<ARRAYNODE>(/<REGEXPNODE>\n</REGEXPNODE>/, <STRNODE>'&lt;br/&gt;'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
      <FCALLNODE>error<STRNODE> <ARRAYNODE><DSTRNODE>"Service document not well-formed: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>prob</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</RESCUEBODYNODE></RESCUENODE></BEGINNODE>

    # RNC-validate the service doc
    <CALLNODE><CONSTNODE>Validator</CONSTNODE>.validate<ARRAYNODE>(<CALLNODE><CONSTNODE>Samples</CONSTNODE>.service_RNC</CALLNODE>, <LOCALVARNODE>text</LOCALVARNODE>, <STRNODE>'Service doc'</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE>

    # * Do we have collections we can post an entry and a picture to?
    #   the requested_* arguments are the requested collection titles; if
    #    provided, try to match them, otherwise just pick the first listed
    #
    <BEGINNODE>begin
      <RESCUENODE><LOCALASGNNODE>collections = <CALLNODE><CONSTNODE>Service</CONSTNODE>.collections<ARRAYNODE>(<LOCALVARNODE>service</LOCALVARNODE>, <LOCALVARNODE>uri</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <RESCUEBODYNODE>rescue <ARRAYNODE><CONSTNODE>Exception</CONSTNODE></ARRAYNODE>
      <BLOCKNODE><FCALLNODE>error<STRNODE> <ARRAYNODE><DSTRNODE>"Couldn't read collections from service doc: </STRNODE><EVSTRNODE>#{<GLOBALVARNODE>$!</GLOBALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</RESCUEBODYNODE></RESCUENODE></BEGINNODE>
    <LOCALASGNNODE>entry_coll = <LOCALASGNNODE>media_coll = <NILNODE>nil</NILNODE></LOCALASGNNODE></LOCALASGNNODE>
    <IFNODE>if <CALLNODE><CALLNODE><LOCALVARNODE>collections</LOCALVARNODE>.length</CALLNODE> &gt; <ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE>
      <BLOCKNODE><FCALLNODE>start_list <ARRAYNODE><STRNODE>"Found these collections"</STRNODE></ARRAYNODE></FCALLNODE>
      <CALLNODE><LOCALVARNODE>collections</LOCALVARNODE>.each <ITERNODE>do |<DASGNNODE>collection</DASGNNODE>|
        <BLOCKNODE><FCALLNODE>list_item<STRNODE> <ARRAYNODE><CALLNODE><DSTRNODE>"'</STRNODE><EVSTRNODE>#{<CALLNODE><DVARNODE>collection</DVARNODE>.title</CALLNODE>}</EVSTRNODE><STRNODE>' </STRNODE>"</DSTRNODE> +
         <STRNODE> <ARRAYNODE><DSTRNODE>"accepts </STRNODE><EVSTRNODE>#{<CALLNODE><CALLNODE><DVARNODE>collection</DVARNODE>.accept</CALLNODE>.join<ARRAYNODE>(<STRNODE>', '</STRNODE>)</ARRAYNODE></CALLNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
        <IFNODE>if (<ANDNODE><NOTNODE>!<LOCALVARNODE>entry_coll</LOCALVARNODE></NOTNODE>) &amp;&amp; <CALLNODE><CALLNODE><DVARNODE>collection</DVARNODE>.accept</CALLNODE>.index<ARRAYNODE>(<COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomEntryMediaType</COLON2NODE>)</ARRAYNODE></CALLNODE></ANDNODE>
          <IFNODE>if <LOCALVARNODE>requested_e_coll</LOCALVARNODE>
            <IFNODE>if <CALLNODE><LOCALVARNODE>requested_e_coll</LOCALVARNODE> == <ARRAYNODE><CALLNODE><DVARNODE>collection</DVARNODE>.title</CALLNODE></ARRAYNODE></CALLNODE>
              <LOCALASGNNODE>entry_coll = <DVARNODE>collection</DVARNODE></LOCALASGNNODE>
            end</IFNODE>
          else
            <LOCALASGNNODE>entry_coll = <DVARNODE>collection</DVARNODE></LOCALASGNNODE>
          end</IFNODE>
        end</IFNODE>

        <IFNODE>if <NOTNODE>!<LOCALVARNODE>media_coll</LOCALVARNODE></NOTNODE>
          <BLOCKNODE><DASGNNODE>image_jpeg_ok = <FALSENODE>false</FALSENODE></DASGNNODE>
          <CALLNODE><CALLNODE><DVARNODE>collection</DVARNODE>.accept</CALLNODE>.each <ITERNODE>do |<DASGNNODE>types</DASGNNODE>|
            <CALLNODE><CALLNODE><DVARNODE>types</DVARNODE>.split<ARRAYNODE>(/<REGEXPNODE>, *</REGEXPNODE>/)</ARRAYNODE></CALLNODE>.each <ITERNODE>do |<DASGNNODE>type</DASGNNODE>|

              <IFNODE>if <ORNODE><ORNODE><CALLNODE><DVARNODE>type</DVARNODE> == <ARRAYNODE><STRNODE>'*/*'</STRNODE></ARRAYNODE></CALLNODE> || <CALLNODE><DVARNODE>type</DVARNODE> == <ARRAYNODE><STRNODE>'image/*'</STRNODE></ARRAYNODE></CALLNODE></ORNODE> || <CALLNODE><DVARNODE>type</DVARNODE> == <ARRAYNODE><STRNODE>'image/jpeg'</STRNODE></ARRAYNODE></CALLNODE></ORNODE>
                <DASGNNODE>image_jpeg_ok = <TRUENODE>true</TRUENODE></DASGNNODE>
              end</IFNODE>
            end</ITERNODE></CALLNODE>
          end</ITERNODE></CALLNODE>
          <IFNODE>if <DVARNODE>image_jpeg_ok</DVARNODE>
            <IFNODE>if <LOCALVARNODE>requested_m_coll</LOCALVARNODE>
              <IFNODE>if <CALLNODE><LOCALVARNODE>requested_m_coll</LOCALVARNODE> == <ARRAYNODE><CALLNODE><DVARNODE>collection</DVARNODE>.title</CALLNODE></ARRAYNODE></CALLNODE>
                <LOCALASGNNODE>media_coll = <DVARNODE>collection</DVARNODE></LOCALASGNNODE>
              end</IFNODE>
            else
              <LOCALASGNNODE>media_coll = <DVARNODE>collection</DVARNODE></LOCALASGNNODE>
            end</IFNODE>
          end</IFNODE></BLOCKNODE>
        end</IFNODE></BLOCKNODE>
      end</ITERNODE></CALLNODE></BLOCKNODE>
    end</IFNODE>

    <VCALLNODE>end_list</VCALLNODE>

    <IFNODE>if <LOCALVARNODE>entry_coll</LOCALVARNODE>
      <BLOCKNODE><FCALLNODE>good<STRNODE> <ARRAYNODE><DSTRNODE>"Will use collection '</STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>entry_coll</LOCALVARNODE>.title</CALLNODE>}</EVSTRNODE><STRNODE>' for entry creation.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      <FCALLNODE>test_entry_posts <ARRAYNODE><LOCALVARNODE>entry_coll</LOCALVARNODE></ARRAYNODE></FCALLNODE>
      <FCALLNODE>test_sorting <ARRAYNODE><LOCALVARNODE>entry_coll</LOCALVARNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    else
      <FCALLNODE>warning <ARRAYNODE><STRNODE>"No collection for 'entry', won't test entry posting."</STRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>

    <IFNODE>if <LOCALVARNODE>media_coll</LOCALVARNODE>
      <BLOCKNODE><FCALLNODE>good<STRNODE> <ARRAYNODE><DSTRNODE>"Will use collection '</STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>media_coll</LOCALVARNODE>.title</CALLNODE>}</EVSTRNODE><STRNODE>' for media creation.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      <FCALLNODE>test_media_posts <ARRAYNODE><CALLNODE><LOCALVARNODE>media_coll</LOCALVARNODE>.href</CALLNODE></ARRAYNODE></FCALLNODE>
      <FCALLNODE>test_media_linkage <ARRAYNODE><LOCALVARNODE>media_coll</LOCALVARNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    else
      <FCALLNODE>warning <ARRAYNODE><STRNODE>"No collection for 'image/jpeg', won't test media posting."</STRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE></BLOCKNODE>
  end</DEFNNODE>
  
  <DEFNNODE>def <ARGUMENTNODE>test_media_linkage</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>coll</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><FCALLNODE>info <ARRAYNODE><STRNODE>"TESTING: Media collection re-ordering after PUT."</STRNODE></ARRAYNODE></FCALLNODE>
    
    # We'll post three mini entries to the collection
    <LOCALASGNNODE>data = <CALLNODE><CONSTNODE>Samples</CONSTNODE>.picture</CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>poster = <CALLNODE><CONSTNODE>Poster</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>coll</LOCALVARNODE>.href</CALLNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><ARRAYNODE>[<STRNODE>'One'</STRNODE>, <STRNODE>'Two'</STRNODE>, <STRNODE>'Three'</STRNODE>]</ARRAYNODE>.each <ITERNODE>do |<DASGNNODE>num</DASGNNODE>|
      <BLOCKNODE><DASGNNODE>slug = <STRNODE>"Picture {#num}"</STRNODE></DASGNNODE>
      <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.set_header<ARRAYNODE>(<STRNODE>'Slug'</STRNODE>, <DVARNODE>slug</DVARNODE>)</ARRAYNODE></CALLNODE>
      <DASGNNODE>name =<STRNODE> <DSTRNODE>"Posting pic </STRNODE><EVSTRNODE>#{<DVARNODE>num</DVARNODE>}</EVSTRNODE>"</DSTRNODE></DASGNNODE>
      <DASGNNODE>worked = <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.post<ARRAYNODE>(<STRNODE>'image/jpeg'</STRNODE>, <LOCALVARNODE>data</LOCALVARNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
      <FCALLNODE>save_dialog<ARRAYNODE>(<DVARNODE>name</DVARNODE>, <LOCALVARNODE>poster</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <IFNODE>if <NOTNODE>!<DVARNODE>worked</DVARNODE></NOTNODE>
        <BLOCKNODE><FCALLNODE>error<ARRAYNODE><STRNODE>(<DSTRNODE>"Can't POST Picture </STRNODE><EVSTRNODE>#{<DVARNODE>num</DVARNODE>}</EVSTRNODE><STRNODE>: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE>}</EVSTRNODE>"</DSTRNODE>, <DVARNODE>name</DVARNODE>)</ARRAYNODE></FCALLNODE>
        <RETURNNODE>return</RETURNNODE></BLOCKNODE>
      end</IFNODE>
      <FCALLNODE>sleep <ARRAYNODE><FIXNUMNODE>2</FIXNUMNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE>
    
    # grab the collection to gather the MLE ids
    <LOCALASGNNODE>entries = <CALLNODE><CONSTNODE>Feed</CONSTNODE>.read<ARRAYNODE>(<CALLNODE><LOCALVARNODE>coll</LOCALVARNODE>.href</CALLNODE>, <STRNODE>'Pictures from multi-post'</STRNODE>, <SELFNODE>self</SELFNODE>, <TRUENODE>true</TRUENODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>ids = <CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>.map <ITERNODE>{ |<DASGNNODE>e</DASGNNODE>| <CALLNODE><DVARNODE>e</DVARNODE>.child_content<ARRAYNODE>(<STRNODE>'id)'</STRNODE>)</ARRAYNODE></CALLNODE>}</ITERNODE></CALLNODE></LOCALASGNNODE>
    
    # let's update one of them; have to fetch it first to get the ETag
    <LOCALASGNNODE>two_media = <CALLNODE><CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>[<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>].content_src</CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>two_resp = <FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>two_media</LOCALVARNODE>, <STRNODE>'Fetch image to get ETag'</STRNODE>, <STRNODE>'image/jpeg'</STRNODE>, <TRUENODE>true</TRUENODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>etag = <CALLNODE><LOCALVARNODE>two_resp</LOCALVARNODE>.header <ARRAYNODE><STRNODE>'etag'</STRNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
        
    <LOCALASGNNODE>putter = <CALLNODE><CONSTNODE>Putter</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>two_media</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><LOCALVARNODE>putter</LOCALVARNODE>.set_header<ARRAYNODE>(<STRNODE>'If-Match'</STRNODE>, <LOCALVARNODE>etag</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
    
    <LOCALASGNNODE>name = <STRNODE>'Updating one of three pix with PUT'</STRNODE></LOCALASGNNODE>
    <IFNODE>if <CALLNODE><LOCALVARNODE>putter</LOCALVARNODE>.put<ARRAYNODE>(<STRNODE>'image/jpeg'</STRNODE>, <LOCALVARNODE>data</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
      <FCALLNODE>good <ARRAYNODE><STRNODE>"Update one of newly posted pictures went OK."</STRNODE></ARRAYNODE></FCALLNODE>
    else  
      <BLOCKNODE><FCALLNODE>save_dialog<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>putter</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <FCALLNODE>error<ARRAYNODE><STRNODE>(<DSTRNODE>"Can't update picture at </STRNODE><EVSTRNODE>#{<LOCALVARNODE>two_media</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>
    
    # now the order should have changed
    <LOCALASGNNODE>wanted = <ARRAYNODE>[ <CALLNODE><LOCALVARNODE>ids</LOCALVARNODE>[<ARRAYNODE><FIXNUMNODE>2</FIXNUMNODE></ARRAYNODE></CALLNODE>], <CALLNODE><LOCALVARNODE>ids</LOCALVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE>], <CALLNODE><LOCALVARNODE>ids</LOCALVARNODE>[<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>] ]</ARRAYNODE></LOCALASGNNODE>
    <LOCALASGNNODE>entries = <CALLNODE><CONSTNODE>Feed</CONSTNODE>.read<ARRAYNODE>(<CALLNODE><LOCALVARNODE>coll</LOCALVARNODE>.href</CALLNODE>, <STRNODE>'MLEs post-update'</STRNODE>, <SELFNODE>self</SELFNODE>, <TRUENODE>true</TRUENODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>.each <ITERNODE>do |<DASGNNODE>from_feed</DASGNNODE>|
      <BLOCKNODE><DASGNNODE>want = <CALLNODE><LOCALVARNODE>wanted</LOCALVARNODE>.pop</CALLNODE></DASGNNODE>
      <IFNODE>unless <CALLNODE><CALLNODE><DVARNODE>from_feed</DVARNODE>.child_content<ARRAYNODE>(<STRNODE>'id'</STRNODE>)</ARRAYNODE></CALLNODE>.eql?<ARRAYNODE>(<DVARNODE>want</DVARNODE>)</ARRAYNODE></CALLNODE>
        <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Updating bits failed to re-order link entries in media collection."</STRNODE></ARRAYNODE></FCALLNODE>
        <RETURNNODE>return</RETURNNODE></BLOCKNODE>
      end</IFNODE>
      
      # next to godliness
      <DASGNNODE>link = <CALLNODE><DVARNODE>from_feed</DVARNODE>.link<ARRAYNODE>(<STRNODE>'edit'</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>      
      <CALLNODE><CALLNODE><CONSTNODE>Deleter</CONSTNODE>.new<ARRAYNODE>(<DVARNODE>link</DVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE>.delete</CALLNODE>
      
      <IFNODE><BREAKNODE>break</BREAKNODE> if <CALLNODE><LOCALVARNODE>wanted</LOCALVARNODE>.empty?</CALLNODE></IFNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE>
    <FCALLNODE>good <ARRAYNODE><STRNODE>"Entries correctly ordered after update of multi-post."</STRNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>

  end</DEFNNODE>
  
  <DEFNNODE>def <ARGUMENTNODE>test_sorting</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>coll</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    
    <BLOCKNODE><FCALLNODE>info <ARRAYNODE><STRNODE>"TESTING: Collection re-ordering after PUT."</STRNODE></ARRAYNODE></FCALLNODE>
    
    # We'll post three mini entries to the collection
    <LOCALASGNNODE>mini = <CALLNODE><CONSTNODE>Samples</CONSTNODE>.mini_entry</CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>poster = <CALLNODE><CONSTNODE>Poster</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>coll</LOCALVARNODE>.href</CALLNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><ARRAYNODE>[<STRNODE>'One'</STRNODE>, <STRNODE>'Two'</STRNODE>, <STRNODE>'Three'</STRNODE>]</ARRAYNODE>.each <ITERNODE>do |<DASGNNODE>num</DASGNNODE>|
      <BLOCKNODE><DASGNNODE>text = <CALLNODE><LOCALVARNODE>mini</LOCALVARNODE>.gsub<ARRAYNODE>(<STRNODE>'Mini-1'</STRNODE>,<STRNODE> <DSTRNODE>"Mini </STRNODE><EVSTRNODE>#{<DVARNODE>num</DVARNODE>}</EVSTRNODE>"</DSTRNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
      <DASGNNODE>name =<STRNODE> <DSTRNODE>"Posting Mini </STRNODE><EVSTRNODE>#{<DVARNODE>num</DVARNODE>}</EVSTRNODE>"</DSTRNODE></DASGNNODE>
      <DASGNNODE>worked = <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.post<ARRAYNODE>(<COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomMediaType</COLON2NODE>, <DVARNODE>text</DVARNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
      <FCALLNODE>save_dialog<ARRAYNODE>(<DVARNODE>name</DVARNODE>, <LOCALVARNODE>poster</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <IFNODE>if <NOTNODE>!<DVARNODE>worked</DVARNODE></NOTNODE>
        <BLOCKNODE><FCALLNODE>error<ARRAYNODE><STRNODE>(<DSTRNODE>"Can't POST Mini </STRNODE><EVSTRNODE>#{<DVARNODE>name</DVARNODE>}</EVSTRNODE><STRNODE>: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE>}</EVSTRNODE>"</DSTRNODE>, <DVARNODE>name</DVARNODE>)</ARRAYNODE></FCALLNODE>
        <RETURNNODE>return</RETURNNODE></BLOCKNODE>
      end</IFNODE>
      <FCALLNODE>sleep <ARRAYNODE><FIXNUMNODE>2</FIXNUMNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE>

    # now let's grab the collection &amp; check the order
    <LOCALASGNNODE>wanted = <ARRAYNODE>[<STRNODE>'Mini One'</STRNODE>, <STRNODE>'Mini Two'</STRNODE>, <STRNODE>'Mini Three'</STRNODE>]</ARRAYNODE></LOCALASGNNODE>
    <LOCALASGNNODE>two = <NILNODE>nil</NILNODE></LOCALASGNNODE>
    <LOCALASGNNODE>entries = <CALLNODE><CONSTNODE>Feed</CONSTNODE>.read<ARRAYNODE>(<CALLNODE><LOCALVARNODE>coll</LOCALVARNODE>.href</CALLNODE>, <STRNODE>'Entries with multi-post'</STRNODE>, <SELFNODE>self</SELFNODE>, <TRUENODE>true</TRUENODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>.each <ITERNODE>do |<DASGNNODE>from_feed</DASGNNODE>|
      <BLOCKNODE><DASGNNODE>want = <CALLNODE><LOCALVARNODE>wanted</LOCALVARNODE>.pop</CALLNODE></DASGNNODE>
      <IFNODE>unless <CALLNODE><CALLNODE><DVARNODE>from_feed</DVARNODE>.child_content<ARRAYNODE>(<STRNODE>'title'</STRNODE>)</ARRAYNODE></CALLNODE>.index<ARRAYNODE>(<DVARNODE>want</DVARNODE>)</ARRAYNODE></CALLNODE>
        <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Entries feed out of order after multi-post."</STRNODE></ARRAYNODE></FCALLNODE>
        <RETURNNODE>return</RETURNNODE></BLOCKNODE>
      end</IFNODE>
      <IFNODE><LOCALASGNNODE>two = <DVARNODE>from_feed</DVARNODE></LOCALASGNNODE> if <CALLNODE><DVARNODE>want</DVARNODE> == <ARRAYNODE><STRNODE>'Mini Two'</STRNODE></ARRAYNODE></CALLNODE></IFNODE>
      <IFNODE><BREAKNODE>break</BREAKNODE> if <CALLNODE><LOCALVARNODE>wanted</LOCALVARNODE>.empty?</CALLNODE></IFNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE>
    <FCALLNODE>good <ARRAYNODE><STRNODE>"Entries correctly ordered after multi-post."</STRNODE></ARRAYNODE></FCALLNODE>
    
    # let's update one of them; have to fetch it first to get the ETag
    <LOCALASGNNODE>link = <CALLNODE><LOCALVARNODE>two</LOCALVARNODE>.link<ARRAYNODE>(<STRNODE>'edit'</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>two_resp = <FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>link</LOCALVARNODE>, <STRNODE>'fetch two'</STRNODE>, <COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomMediaType</COLON2NODE>, <FALSENODE>false</FALSENODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>etag = <CALLNODE><LOCALVARNODE>two_resp</LOCALVARNODE>.header <ARRAYNODE><STRNODE>'etag'</STRNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
        
    <LOCALASGNNODE>putter = <CALLNODE><CONSTNODE>Putter</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>link</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><LOCALVARNODE>putter</LOCALVARNODE>.set_header<ARRAYNODE>(<STRNODE>'If-Match'</STRNODE>, <LOCALVARNODE>etag</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
    
    <LOCALASGNNODE>name = <STRNODE>'Updating mini-entry with PUT'</STRNODE></LOCALASGNNODE>
    <IFNODE>unless <CALLNODE><LOCALVARNODE>putter</LOCALVARNODE>.put<ARRAYNODE>(<COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomMediaType</COLON2NODE>, <CALLNODE><LOCALVARNODE>mini</LOCALVARNODE>.gsub<ARRAYNODE>(<STRNODE>'Mini-1'</STRNODE>, <STRNODE>'Mini-4'</STRNODE>)</ARRAYNODE></CALLNODE>)</ARRAYNODE></CALLNODE>
      <BLOCKNODE><FCALLNODE>save_dialog<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>putter</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <FCALLNODE>error<ARRAYNODE><STRNODE>(<DSTRNODE>"Can't update mini-entry at </STRNODE><EVSTRNODE>#{<LOCALVARNODE>link</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>
    
    # now the order should have changed
    <LOCALASGNNODE>wanted = <ARRAYNODE>[<STRNODE>'Mini One'</STRNODE>, <STRNODE>'Mini Three'</STRNODE>, <STRNODE>'Mini-4'</STRNODE>]</ARRAYNODE></LOCALASGNNODE>
    <LOCALASGNNODE>entries = <CALLNODE><CONSTNODE>Feed</CONSTNODE>.read<ARRAYNODE>(<CALLNODE><LOCALVARNODE>coll</LOCALVARNODE>.href</CALLNODE>, <STRNODE>'Entries post-update'</STRNODE>, <SELFNODE>self</SELFNODE>, <TRUENODE>true</TRUENODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>.each <ITERNODE>do |<DASGNNODE>from_feed</DASGNNODE>|
      <BLOCKNODE><DASGNNODE>want = <CALLNODE><LOCALVARNODE>wanted</LOCALVARNODE>.pop</CALLNODE></DASGNNODE>
      <IFNODE>unless <CALLNODE><CALLNODE><DVARNODE>from_feed</DVARNODE>.child_content<ARRAYNODE>(<STRNODE>'title'</STRNODE>)</ARRAYNODE></CALLNODE>.index<ARRAYNODE>(<DVARNODE>want</DVARNODE>)</ARRAYNODE></CALLNODE>
        <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Entries feed out of order after update of multi-post."</STRNODE></ARRAYNODE></FCALLNODE>
        <RETURNNODE>return</RETURNNODE></BLOCKNODE>
      end</IFNODE>
      
      # next to godliness
      <LOCALASGNNODE>link = <CALLNODE><DVARNODE>from_feed</DVARNODE>.link<ARRAYNODE>(<STRNODE>'edit'</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>      
      <CALLNODE><CALLNODE><CONSTNODE>Deleter</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>link</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE>.delete</CALLNODE>
      
      <IFNODE><BREAKNODE>break</BREAKNODE> if <CALLNODE><LOCALVARNODE>wanted</LOCALVARNODE>.empty?</CALLNODE></IFNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE>
    <FCALLNODE>good <ARRAYNODE><STRNODE>"Entries correctly ordered after update of multi-post."</STRNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
    
    
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>test_entry_posts</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>entry_collection</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    
    <BLOCKNODE><LOCALASGNNODE>collection_uri = <CALLNODE><LOCALVARNODE>entry_collection</LOCALVARNODE>.href</CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>entries = <CALLNODE><CONSTNODE>Feed</CONSTNODE>.read<ARRAYNODE>(<LOCALVARNODE>collection_uri</LOCALVARNODE>, <STRNODE>'Entry collection'</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    
    # * List the current entries, remember which IDs we've seen
    <FCALLNODE>info <ARRAYNODE><STRNODE>"TESTING: Entry-posting basics."</STRNODE></ARRAYNODE></FCALLNODE>
    <LOCALASGNNODE>ids = <ZARRAYNODE>[]</ZARRAYNODE></LOCALASGNNODE>
    <IFNODE>unless <CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>.empty?</CALLNODE>
      <BLOCKNODE><FCALLNODE>start_list <ARRAYNODE><STRNODE>"Now in the Entries feed"</STRNODE></ARRAYNODE></FCALLNODE>
      <CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>.each <ITERNODE>do |<DASGNNODE>entry</DASGNNODE>|
        <BLOCKNODE><FCALLNODE>list_item <ARRAYNODE><CALLNODE><DVARNODE>entry</DVARNODE>.summarize</CALLNODE></ARRAYNODE></FCALLNODE>
        <CALLNODE><LOCALVARNODE>ids</LOCALVARNODE> &lt;&lt; <ARRAYNODE><CALLNODE><DVARNODE>entry</DVARNODE>.child_content<ARRAYNODE>(<STRNODE>'id'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
      end</ITERNODE></CALLNODE>   
      <VCALLNODE>end_list</VCALLNODE></BLOCKNODE>
    end</IFNODE> 
    
    # Setting up to post a new entry
    <LOCALASGNNODE>poster = <CALLNODE><CONSTNODE>Poster</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>collection_uri</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>if <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE>
      <BLOCKNODE><FCALLNODE>error<ARRAYNODE><STRNODE>(<CALLNODE><DSTRNODE>"Unacceptable URI for '</STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>entry_collection</LOCALVARNODE>.title</CALLNODE>}</EVSTRNODE><STRNODE>' collection: </STRNODE>"</DSTRNODE> +
          <ARRAYNODE><CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    <LOCALASGNNODE>my_entry = <CALLNODE><CONSTNODE>Entry</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><CONSTNODE>Samples</CONSTNODE>.basic_entry</CALLNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>

    # ask it to use this in the URI
    <LOCALASGNNODE>slug_num = <FCALLNODE>rand<ARRAYNODE>(<FIXNUMNODE>100000</FIXNUMNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>slug =<STRNODE> <DSTRNODE>"ape-</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug_num</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>slug_re = %r<STRNODE>{<DREGEXPNODE>ape.?</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug_num</LOCALVARNODE>}</EVSTRNODE></DREGEXPNODE></LOCALASGNNODE>}
    <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.set_header<ARRAYNODE>(<STRNODE>'Slug'</STRNODE>, <LOCALVARNODE>slug</LOCALVARNODE>)</ARRAYNODE></CALLNODE>

    # add some categories to the entry, and remember which
    <INSTASGNNODE>@cats = <CALLNODE><CONSTNODE>Categories</CONSTNODE>.add_cats<ARRAYNODE>(<LOCALVARNODE>my_entry</LOCALVARNODE>, <LOCALVARNODE>entry_collection</LOCALVARNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE>

    # * OK, post it
    <LOCALASGNNODE>worked = <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.post<ARRAYNODE>(<COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomMediaType</COLON2NODE>, <CALLNODE><LOCALVARNODE>my_entry</LOCALVARNODE>.to_s</CALLNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>name = <STRNODE>'Posting new entry'</STRNODE></LOCALASGNNODE>
    <FCALLNODE>save_dialog<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>poster</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    <IFNODE>if <NOTNODE>!<LOCALVARNODE>worked</LOCALVARNODE></NOTNODE>
      <BLOCKNODE><FCALLNODE>error<ARRAYNODE><STRNODE>(<DSTRNODE>"Can't POST new entry: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE>}</EVSTRNODE>"</DSTRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    <LOCALASGNNODE>location = <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.header<ARRAYNODE>(<STRNODE>'Location'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>unless <LOCALVARNODE>location</LOCALVARNODE>
      <BLOCKNODE><FCALLNODE>error<ARRAYNODE>(<STRNODE>"No Location header upon POST creation"</STRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>
    <FCALLNODE>good<ARRAYNODE>(<CALLNODE><STRNODE>"Posting of new entry to the Entries collection "</STRNODE> +
       <STRNODE> <ARRAYNODE><DSTRNODE>"reported success, Location: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>location</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></CALLNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>

    <FCALLNODE>info <ARRAYNODE><STRNODE>"Examining the new entry as returned in the POST response"</STRNODE></ARRAYNODE></FCALLNODE>
    <IFNODE><FCALLNODE>check_new_entry<ARRAYNODE>(<LOCALVARNODE>my_entry</LOCALVARNODE>, <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.entry</CALLNODE>, <STRNODE>"Returned entry"</STRNODE>)</ARRAYNODE></FCALLNODE> if <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.entry</CALLNODE></IFNODE>

    # * See if the Location uri can be retrieved, and check its consistency
    <LOCALASGNNODE>name = <STRNODE>"Retrieval of newly created entry"</STRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>new_entry = <FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>location</LOCALVARNODE>, <LOCALVARNODE>name</LOCALVARNODE>, <COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomMediaType</COLON2NODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <IFNODE><RETURNNODE>return</RETURNNODE> unless <LOCALVARNODE>new_entry</LOCALVARNODE></IFNODE>

    # Grab its etag
    <LOCALASGNNODE>etag = <CALLNODE><LOCALVARNODE>new_entry</LOCALVARNODE>.header <ARRAYNODE><STRNODE>'etag'</STRNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>

    <FCALLNODE>info <ARRAYNODE><STRNODE>"Examining the new entry as retrieved using Location header in POST response:"</STRNODE></ARRAYNODE></FCALLNODE>

    <BEGINNODE>begin
      <RESCUENODE><LOCALASGNNODE>new_entry = <CALLNODE><CONSTNODE>Entry</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>new_entry</LOCALVARNODE>.body</CALLNODE>, <LOCALVARNODE>location</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <RESCUEBODYNODE>rescue <ARRAYNODE><COLON2NODE><CONSTNODE>REXML</CONSTNODE>::ParseException</COLON2NODE></ARRAYNODE>
      <BLOCKNODE><LOCALASGNNODE>prob = <CALLNODE><CALLNODE><GLOBALVARNODE>$!</GLOBALVARNODE>.to_s</CALLNODE>.gsub<ARRAYNODE>(/<REGEXPNODE>\n</REGEXPNODE>/, <STRNODE>'&lt;br/&gt;'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
      <FCALLNODE>error<STRNODE> <ARRAYNODE><DSTRNODE>"New entry is not well-formed: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>prob</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</RESCUEBODYNODE></RESCUENODE></BEGINNODE>

    # * See if the slug was used
    <LOCALASGNNODE>slug_used = <FALSENODE>false</FALSENODE></LOCALASGNNODE>
    <CALLNODE><CALLNODE><LOCALVARNODE>new_entry</LOCALVARNODE>.alt_links</CALLNODE>.each <ITERNODE>do |<DASGNNODE>a</DASGNNODE>|
      <BLOCKNODE><DASGNNODE>href = <CALLNODE><CALLNODE><DVARNODE>a</DVARNODE>.attributes</CALLNODE>[<ARRAYNODE><STRNODE>'href'</STRNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
      <IFNODE>if <ANDNODE><DVARNODE>href</DVARNODE> &amp;&amp; <CALLNODE><DVARNODE>href</DVARNODE>.index<ARRAYNODE>(<LOCALVARNODE>slug_re</LOCALVARNODE>)</ARRAYNODE></CALLNODE></ANDNODE>
        <LOCALASGNNODE>slug_used = <TRUENODE>true</TRUENODE></LOCALASGNNODE>
      end</IFNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE>
    <IFNODE>if <LOCALVARNODE>slug_used</LOCALVARNODE>
      <FCALLNODE>good<STRNODE> <ARRAYNODE><DSTRNODE>"Client-provided slug '</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug</LOCALVARNODE>}</EVSTRNODE><STRNODE>' was used in server-generated URI.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
    else
      <FCALLNODE>warning<STRNODE> <ARRAYNODE><DSTRNODE>"Client-provided slug '</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug</LOCALVARNODE>}</EVSTRNODE><STRNODE>' not used in server-generated URI.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>

    <FCALLNODE>check_new_entry<ARRAYNODE>(<LOCALVARNODE>my_entry</LOCALVARNODE>, <LOCALVARNODE>new_entry</LOCALVARNODE>, <STRNODE>"Retrieved entry"</STRNODE>)</ARRAYNODE></FCALLNODE>

    <LOCALASGNNODE>entry_id = <CALLNODE><LOCALVARNODE>new_entry</LOCALVARNODE>.child_content<ARRAYNODE>(<STRNODE>'id'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>

    # * fetch the feed again and check that version
    <LOCALASGNNODE>from_feed = <FCALLNODE>find_entry<ARRAYNODE>(<LOCALVARNODE>collection_uri</LOCALVARNODE>, <STRNODE>"entry collection"</STRNODE>, <LOCALVARNODE>entry_id</LOCALVARNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <IFNODE>if <CALLNODE><CALLNODE><LOCALVARNODE>from_feed</LOCALVARNODE>.class</CALLNODE> == <ARRAYNODE><CONSTNODE>String</CONSTNODE></ARRAYNODE></CALLNODE>
      <BLOCKNODE><FCALLNODE>good<STRNODE> <ARRAYNODE><DSTRNODE>"About to check </STRNODE><EVSTRNODE>#{<LOCALVARNODE>collection_uri</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      <CALLNODE><CONSTNODE>Feed</CONSTNODE>.read<ARRAYNODE>(<LOCALVARNODE>collection_uri</LOCALVARNODE>, <STRNODE>"Can't find entry in collection"</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE>
      <FCALLNODE>error <ARRAYNODE><STRNODE>"New entry didn't show up in the collections feed."</STRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    <FCALLNODE>info <ARRAYNODE><STRNODE>"Examining the new entry as it appears in the collection feed:"</STRNODE></ARRAYNODE></FCALLNODE>

    # * Check the entry from the feed
    <FCALLNODE>check_new_entry<ARRAYNODE>(<LOCALVARNODE>my_entry</LOCALVARNODE>, <LOCALVARNODE>from_feed</LOCALVARNODE>, <STRNODE>"Entry from collection feed"</STRNODE>)</ARRAYNODE></FCALLNODE>

    <LOCALASGNNODE>edit_uri = <CALLNODE><LOCALVARNODE>new_entry</LOCALVARNODE>.link<ARRAYNODE>(<STRNODE>'edit'</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>if <NOTNODE>!<LOCALVARNODE>edit_uri</LOCALVARNODE></NOTNODE>
      <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Entry from Location header has no edit link."</STRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    # * Update the entry, see if the update took
    <LOCALASGNNODE>name = <STRNODE>'In-place update with put'</STRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>putter = <CALLNODE><CONSTNODE>Putter</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>edit_uri</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>

    # Conditional PUT if an etag
    <IFNODE><CALLNODE><LOCALVARNODE>putter</LOCALVARNODE>.set_header<ARRAYNODE>(<STRNODE>'If-Match'</STRNODE>, <LOCALVARNODE>etag</LOCALVARNODE>)</ARRAYNODE></CALLNODE> if <LOCALVARNODE>etag</LOCALVARNODE></IFNODE>

    <LOCALASGNNODE>new_title = <STRNODE>"Let's all do the Ape!"</STRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>new_text = <CALLNODE><CONSTNODE>Samples</CONSTNODE>.retitled_entry<ARRAYNODE>(<LOCALVARNODE>new_title</LOCALVARNODE>, <LOCALVARNODE>entry_id</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>response = <CALLNODE><LOCALVARNODE>putter</LOCALVARNODE>.put<ARRAYNODE>(<COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomMediaType</COLON2NODE>, <LOCALVARNODE>new_text</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <FCALLNODE>save_dialog<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>putter</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>

    <IFNODE>if <LOCALVARNODE>response</LOCALVARNODE>
      <BLOCKNODE><FCALLNODE>good<ARRAYNODE>(<STRNODE>"Update of new entry reported success."</STRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <LOCALASGNNODE>from_feed = <FCALLNODE>find_entry<ARRAYNODE>(<LOCALVARNODE>collection_uri</LOCALVARNODE>, <STRNODE>"entry collection"</STRNODE>, <LOCALVARNODE>entry_id</LOCALVARNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
      <IFNODE>if <CALLNODE><CALLNODE><LOCALVARNODE>from_feed</LOCALVARNODE>.class</CALLNODE> == <ARRAYNODE><CONSTNODE>String</CONSTNODE></ARRAYNODE></CALLNODE>
        <BLOCKNODE><FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>collection_uri</LOCALVARNODE>, <STRNODE>"Check collection after lost update"</STRNODE>, <NILNODE>nil</NILNODE>, <TRUENODE>true</TRUENODE>)</ARRAYNODE></FCALLNODE>
        <FCALLNODE>error<STRNODE> <ARRAYNODE><DSTRNODE>"Updated entry ID </STRNODE><EVSTRNODE>#{<LOCALVARNODE>entry_id</LOCALVARNODE>}</EVSTRNODE><STRNODE> not found in entries collection.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
        <RETURNNODE>return</RETURNNODE></BLOCKNODE>
      end</IFNODE>
      <IFNODE>if <CALLNODE><CALLNODE><LOCALVARNODE>from_feed</LOCALVARNODE>.child_content<ARRAYNODE>(<STRNODE>'title'</STRNODE>)</ARRAYNODE></CALLNODE> == <ARRAYNODE><LOCALVARNODE>new_title</LOCALVARNODE></ARRAYNODE></CALLNODE>
        <FCALLNODE>good <ARRAYNODE><STRNODE>"Update reflected in new entry."</STRNODE></ARRAYNODE></FCALLNODE>
      else
        <FCALLNODE>warning <ARRAYNODE><STRNODE>"PUT apparently not reflected in the entry."</STRNODE></ARRAYNODE></FCALLNODE>
      end</IFNODE></BLOCKNODE>
    else
      <FCALLNODE>warning<ARRAYNODE><STRNODE>(<DSTRNODE>"Can't update new entry with PUT: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>putter</LOCALVARNODE>.last_error</CALLNODE>}</EVSTRNODE>"</DSTRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    end</IFNODE>

    # the edit-uri might have changed
    <LOCALASGNNODE>edit_uri = <CALLNODE><LOCALVARNODE>from_feed</LOCALVARNODE>.link<ARRAYNODE>(<STRNODE>'edit'</STRNODE>, <SELFNODE>self</SELFNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>if <NOTNODE>!<LOCALVARNODE>edit_uri</LOCALVARNODE></NOTNODE>
      <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Entry in feed has no edit link."</STRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    <LOCALASGNNODE>name = <STRNODE>'New Entry deletion'</STRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>deleter = <CALLNODE><CONSTNODE>Deleter</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>edit_uri</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>

    <LOCALASGNNODE>worked = <CALLNODE><LOCALVARNODE>deleter</LOCALVARNODE>.delete</CALLNODE></LOCALASGNNODE>
    <FCALLNODE>save_dialog<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>deleter</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    <IFNODE>if <LOCALVARNODE>worked</LOCALVARNODE>
      <FCALLNODE>good<ARRAYNODE>(<STRNODE>"Entry deletion reported success."</STRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    else
      <BLOCKNODE><FCALLNODE>error<ARRAYNODE>(<CALLNODE><STRNODE>"Couldn't delete the entry that was posted: "</STRNODE> + <ARRAYNODE><CALLNODE><LOCALVARNODE>deleter</LOCALVARNODE>.last_error</CALLNODE></ARRAYNODE></CALLNODE>,
        <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    # See if it's gone from the feed
    <LOCALASGNNODE>still_there = <FCALLNODE>find_entry<ARRAYNODE>(<LOCALVARNODE>collection_uri</LOCALVARNODE>, <STRNODE>"entry collection"</STRNODE>, <LOCALVARNODE>entry_id</LOCALVARNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <IFNODE>if <NOTNODE><CALLNODE><CALLNODE><LOCALVARNODE>still_there</LOCALVARNODE>.class</CALLNODE> != <ARRAYNODE><CONSTNODE>String</CONSTNODE></ARRAYNODE></CALLNODE></NOTNODE>
      <FCALLNODE>error <ARRAYNODE><STRNODE>"Entry is still in collection post-deletion."</STRNODE></ARRAYNODE></FCALLNODE>
    else
      <FCALLNODE>good <ARRAYNODE><STRNODE>"Entry not found in feed after deletion."</STRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE></BLOCKNODE>

  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>test_media_posts</ARGUMENTNODE> <ARGSNODE><LISTNODE><ARGUMENTNODE>media_collection</ARGUMENTNODE></LISTNODE></ARGSNODE>
    
    <BLOCKNODE><FCALLNODE>info <ARRAYNODE><STRNODE>"TESTING: Posting to media collection."</STRNODE></ARRAYNODE></FCALLNODE>
    
    # * Post a picture to the media collection
    #
    <LOCALASGNNODE>poster = <CALLNODE><CONSTNODE>Poster</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>media_collection</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>if <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE>
      <BLOCKNODE><FCALLNODE>error<ARRAYNODE><STRNODE>(<CALLNODE><DSTRNODE>"Unacceptable URI for '</STRNODE><EVSTRNODE>#{<CALLNODE><VCALLNODE>media_coll</VCALLNODE>.title</CALLNODE>}</EVSTRNODE><STRNODE>' collection: </STRNODE>"</DSTRNODE> +
          <ARRAYNODE><CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE></ARRAYNODE></CALLNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    <LOCALASGNNODE>name = <STRNODE>'Post image to media collection'</STRNODE></LOCALASGNNODE>

    # ask it to use this in the URI
    <LOCALASGNNODE>slug_num = <FCALLNODE>rand<ARRAYNODE>(<FIXNUMNODE>100000</FIXNUMNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>slug =<STRNODE> <DSTRNODE>"apix-</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug_num</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>slug_re = %r<STRNODE>{<DREGEXPNODE>apix.?</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug_num</LOCALVARNODE>}</EVSTRNODE></DREGEXPNODE></LOCALASGNNODE>}
    <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.set_header<ARRAYNODE>(<STRNODE>'Slug'</STRNODE>, <LOCALVARNODE>slug</LOCALVARNODE>)</ARRAYNODE></CALLNODE>

    <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.set_header<ARRAYNODE>(<STRNODE>'Slug'</STRNODE>, <LOCALVARNODE>slug</LOCALVARNODE>)</ARRAYNODE></CALLNODE>
    <LOCALASGNNODE>worked = <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.post<ARRAYNODE>(<STRNODE>'image/jpeg'</STRNODE>, <CALLNODE><CONSTNODE>Samples</CONSTNODE>.picture</CALLNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <FCALLNODE>save_dialog<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>poster</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    <IFNODE>if <NOTNODE>!<LOCALVARNODE>worked</LOCALVARNODE></NOTNODE>
      <BLOCKNODE><FCALLNODE>error<ARRAYNODE><STRNODE>(<DSTRNODE>"Can't POST picture to media collection: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.last_error</CALLNODE>}</EVSTRNODE>"</DSTRNODE>,
        <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    <FCALLNODE>good<ARRAYNODE>(<CALLNODE><STRNODE>"Post of image file reported success, media link location: "</STRNODE> +
        <ARRAYNODE><DSTRNODE>"<EVSTRNODE>#{<CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.header<ARRAYNODE>(<STRNODE>'Location'</STRNODE>)</ARRAYNODE></CALLNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></CALLNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    
    # * Retrieve the media link entry
    <LOCALASGNNODE>mle_uri = <CALLNODE><LOCALVARNODE>poster</LOCALVARNODE>.header<ARRAYNODE>(<STRNODE>'Location'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
        
    <LOCALASGNNODE>media_link_entry = <FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>mle_uri</LOCALVARNODE>, <STRNODE>'Retrieval of media link entry'</STRNODE>, <COLON2NODE><CONSTNODE>Names</CONSTNODE>::AtomMediaType</COLON2NODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <IFNODE><RETURNNODE>return</RETURNNODE> unless <LOCALVARNODE>media_link_entry</LOCALVARNODE></IFNODE>

    <IFNODE>if <CALLNODE><LOCALVARNODE>media_link_entry</LOCALVARNODE>.last_error</CALLNODE>
      <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Can't proceed with media-post testing."</STRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    # * See if the &lt;content src= is there and usable
    <BEGINNODE>begin
      <RESCUENODE><LOCALASGNNODE>media_link_entry = <CALLNODE><CONSTNODE>Entry</CONSTNODE>.new<ARRAYNODE>(<CALLNODE><LOCALVARNODE>media_link_entry</LOCALVARNODE>.body</CALLNODE>, <LOCALVARNODE>mle_uri</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <RESCUEBODYNODE>rescue <ARRAYNODE><COLON2NODE><CONSTNODE>REXML</CONSTNODE>::ParseException</COLON2NODE></ARRAYNODE>
      <BLOCKNODE><LOCALASGNNODE>prob = <CALLNODE><CALLNODE><GLOBALVARNODE>$!</GLOBALVARNODE>.to_s</CALLNODE>.gsub<ARRAYNODE>(/<REGEXPNODE>\n</REGEXPNODE>/, <STRNODE>'&lt;br/&gt;'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
      <FCALLNODE>error<STRNODE> <ARRAYNODE><DSTRNODE>"Media link entry is not well-formed: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>prob</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</RESCUEBODYNODE></RESCUENODE></BEGINNODE>
    <LOCALASGNNODE>content_src = <CALLNODE><LOCALVARNODE>media_link_entry</LOCALVARNODE>.content_src</CALLNODE></LOCALASGNNODE>
    <IFNODE>if (<ORNODE><NOTNODE>!<LOCALVARNODE>content_src</LOCALVARNODE></NOTNODE>) || (<CALLNODE><LOCALVARNODE>content_src</LOCALVARNODE> == <ARRAYNODE><STRNODE>""</STRNODE></ARRAYNODE></CALLNODE></ORNODE>)
      <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Media link entry has no content@src pointer to media resource."</STRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    # see if slug was used in media URI
    <IFNODE>if <CALLNODE><LOCALVARNODE>content_src</LOCALVARNODE> =~ <ARRAYNODE><LOCALVARNODE>slug_re</LOCALVARNODE></ARRAYNODE></CALLNODE>
      <FCALLNODE>good<STRNODE> <ARRAYNODE><DSTRNODE>"Client-provided slug '</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug</LOCALVARNODE>}</EVSTRNODE><STRNODE>' was used in Media Resource URI.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
    else
      <FCALLNODE>warning<STRNODE> <ARRAYNODE><DSTRNODE>"Client-provided slug '</STRNODE><EVSTRNODE>#{<LOCALVARNODE>slug</LOCALVARNODE>}</EVSTRNODE><STRNODE>' not used in Media Resource URI.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>
    
    <LOCALASGNNODE>media_link_id = <CALLNODE><LOCALVARNODE>media_link_entry</LOCALVARNODE>.child_content<ARRAYNODE>(<STRNODE>'id'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>

    <LOCALASGNNODE>name = <STRNODE>'Retrieval of media resource'</STRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>picture = <FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>content_src</LOCALVARNODE>, <LOCALVARNODE>name</LOCALVARNODE>, <STRNODE>'image/jpeg'</STRNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <IFNODE><RETURNNODE>return</RETURNNODE> unless <LOCALVARNODE>picture</LOCALVARNODE></IFNODE>

    <IFNODE>if <CALLNODE><CALLNODE><LOCALVARNODE>picture</LOCALVARNODE>.body</CALLNODE> == <ARRAYNODE><CALLNODE><CONSTNODE>Samples</CONSTNODE>.picture</CALLNODE></ARRAYNODE></CALLNODE>
      <FCALLNODE>good <ARRAYNODE><STRNODE>"Media resource was apparently stored and retrieved properly."</STRNODE></ARRAYNODE></FCALLNODE>
    else
      <FCALLNODE>warning <ARRAYNODE><STRNODE>"Media resource differs from posted picture"</STRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>

    # * Delete the media link entry
    <LOCALASGNNODE>edit_uri = <CALLNODE><LOCALVARNODE>media_link_entry</LOCALVARNODE>.link<ARRAYNODE>(<STRNODE>'edit'</STRNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>if <NOTNODE>!<LOCALVARNODE>edit_uri</LOCALVARNODE></NOTNODE>
      <BLOCKNODE><FCALLNODE>error <ARRAYNODE><STRNODE>"Media link entry has no edit link."</STRNODE></ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    <LOCALASGNNODE>name = <STRNODE>'Deletion of media link entry'</STRNODE></LOCALASGNNODE>
    <LOCALASGNNODE>deleter = <CALLNODE><CONSTNODE>Deleter</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>edit_uri</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>worked = <CALLNODE><LOCALVARNODE>deleter</LOCALVARNODE>.delete</CALLNODE></LOCALASGNNODE>
    <FCALLNODE>save_dialog<ARRAYNODE>(<LOCALVARNODE>name</LOCALVARNODE>, <LOCALVARNODE>deleter</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    <IFNODE>if <LOCALVARNODE>worked</LOCALVARNODE>
      <FCALLNODE>good<ARRAYNODE>(<STRNODE>"Media link entry deletion reported success."</STRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
    else
      <BLOCKNODE><FCALLNODE>error<ARRAYNODE>(<STRNODE>"Couldn't delete media link entry."</STRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <RETURNNODE>return</RETURNNODE></BLOCKNODE>
    end</IFNODE>

    # * media link entry still in feed?
    <LOCALASGNNODE>still_there = <FCALLNODE>find_entry<ARRAYNODE>(<LOCALVARNODE>media_collection</LOCALVARNODE>, <STRNODE>"media collection"</STRNODE>, <LOCALVARNODE>media_link_id</LOCALVARNODE>)</ARRAYNODE></FCALLNODE></LOCALASGNNODE>
    <IFNODE>if <NOTNODE><CALLNODE><CALLNODE><LOCALVARNODE>still_there</LOCALVARNODE>.class</CALLNODE> != <ARRAYNODE><CONSTNODE>String</CONSTNODE></ARRAYNODE></CALLNODE></NOTNODE>
      <FCALLNODE>error <ARRAYNODE><STRNODE>"Media link entry is still in collection post-deletion."</STRNODE></ARRAYNODE></FCALLNODE>
    else
      <FCALLNODE>good <ARRAYNODE><STRNODE>"Media link entry no longer in feed."</STRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>
    
    # is the resource there any more?
    <LOCALASGNNODE>name = <STRNODE>'Check Media Resource deletion'</STRNODE></LOCALASGNNODE>
    <IFNODE>if <FCALLNODE>check_resource<ARRAYNODE>(<LOCALVARNODE>content_src</LOCALVARNODE>, <LOCALVARNODE>name</LOCALVARNODE>, <STRNODE>'image/jpeg'</STRNODE>, <FALSENODE>false</FALSENODE>)</ARRAYNODE></FCALLNODE>
      <FCALLNODE>error <ARRAYNODE><STRNODE>"Media resource still there after media link entry deletion."</STRNODE></ARRAYNODE></FCALLNODE>
    else
      <FCALLNODE>good <ARRAYNODE><STRNODE>"Media resource no longer fetchable."</STRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE></BLOCKNODE>
    
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>check_new_entry</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>as_posted</ARGUMENTNODE>, <ARGUMENTNODE>new_entry</ARGUMENTNODE>, <ARGUMENTNODE>desc</ARGUMENTNODE></LISTNODE>)</ARGSNODE>

    <BLOCKNODE><IFNODE>if <FCALLNODE>compare_entries<ARRAYNODE>(<LOCALVARNODE>as_posted</LOCALVARNODE>, <LOCALVARNODE>new_entry</LOCALVARNODE>, <STRNODE>"entry as posted"</STRNODE>, <LOCALVARNODE>desc</LOCALVARNODE>)</ARRAYNODE></FCALLNODE>
      <FCALLNODE>good <ARRAYNODE><DSTRNODE>"<EVSTRNODE>#{<LOCALVARNODE>desc</LOCALVARNODE>}</EVSTRNODE><STRNODE> is consistent with posted entry.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>

    # * See if the categories we sent made it in
    <LOCALASGNNODE>cat_probs = <FALSENODE>false</FALSENODE></LOCALASGNNODE>
    <CALLNODE><INSTVARNODE>@cats</INSTVARNODE>.each <ITERNODE>do |<DASGNNODE>cat</DASGNNODE>|
      <IFNODE>if <NOTNODE>!<CALLNODE><LOCALVARNODE>new_entry</LOCALVARNODE>.has_cat<ARRAYNODE>(<DVARNODE>cat</DVARNODE>)</ARRAYNODE></CALLNODE></NOTNODE>
        <BLOCKNODE><LOCALASGNNODE>cat_probs = <TRUENODE>true</TRUENODE></LOCALASGNNODE>
        <FCALLNODE>warning<STRNODE> <ARRAYNODE><DSTRNODE>"Provided category not in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>desc</LOCALVARNODE>}</EVSTRNODE><STRNODE>: </STRNODE><EVSTRNODE>#{<DVARNODE>cat</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
      end</IFNODE>
    end</ITERNODE></CALLNODE>
    <IFNODE><FCALLNODE>good<STRNODE> <ARRAYNODE><DSTRNODE>"Provided categories included in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>desc</LOCALVARNODE>}</EVSTRNODE><STRNODE>.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE> unless <LOCALVARNODE>cat_probs</LOCALVARNODE></IFNODE>

    # * See if the dc:subject survived
    <LOCALASGNNODE>dc_subject = <CALLNODE><LOCALVARNODE>new_entry</LOCALVARNODE>.child_content<ARRAYNODE>(<CALLNODE><CONSTNODE>Samples</CONSTNODE>.foreign_child</CALLNODE>, <CALLNODE><CONSTNODE>Samples</CONSTNODE>.foreign_namespace</CALLNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>if <LOCALVARNODE>dc_subject</LOCALVARNODE>
      <IFNODE>if <CALLNODE><LOCALVARNODE>dc_subject</LOCALVARNODE> == <ARRAYNODE><CALLNODE><CONSTNODE>Samples</CONSTNODE>.foreign_child_content</CALLNODE></ARRAYNODE></CALLNODE>
        <FCALLNODE>good<STRNODE> <ARRAYNODE><DSTRNODE>"Server preserved foreign markup in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>desc</LOCALVARNODE>}</EVSTRNODE><STRNODE>.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      else
        <FCALLNODE>warning<STRNODE> <ARRAYNODE><DSTRNODE>"Server altered content of foreign markup in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>desc</LOCALVARNODE>}</EVSTRNODE><STRNODE>.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      end</IFNODE>
    else
      <FCALLNODE>warning<STRNODE> <ARRAYNODE><DSTRNODE>"Server discarded foreign markup in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>desc</LOCALVARNODE>}</EVSTRNODE><STRNODE>.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE></BLOCKNODE>
  end</DEFNNODE>

  #
  # End of tests; support functions from here down
  #

  # Fetch a feed and look up an entry by ID in it
  <DEFNNODE>def <ARGUMENTNODE>find_entry</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>feed_uri</ARGUMENTNODE>, <ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>id</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>report=<FALSENODE>false</FALSENODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>entries = <CALLNODE><CONSTNODE>Feed</CONSTNODE>.read<ARRAYNODE>(<LOCALVARNODE>feed_uri</LOCALVARNODE>, <LOCALVARNODE>name</LOCALVARNODE>, <SELFNODE>self</SELFNODE>, <LOCALVARNODE>report</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><LOCALVARNODE>entries</LOCALVARNODE>.each <ITERNODE>do |<DASGNNODE>from_feed</DASGNNODE>|
      <IFNODE><RETURNNODE>return <DVARNODE>from_feed</DVARNODE></RETURNNODE> if <CALLNODE><LOCALVARNODE>id</LOCALVARNODE> == <ARRAYNODE><CALLNODE><DVARNODE>from_feed</DVARNODE>.child_content<ARRAYNODE>(<STRNODE>'id'</STRNODE>)</ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE></IFNODE>
    end</ITERNODE></CALLNODE>

    <RETURNNODE>return<STRNODE> <DSTRNODE>"Couldn't find id </STRNODE><EVSTRNODE>#{<LOCALVARNODE>id</LOCALVARNODE>}</EVSTRNODE><STRNODE> in feed </STRNODE><EVSTRNODE>#{<LOCALVARNODE>feed_uri</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></RETURNNODE></BLOCKNODE>
  end</DEFNNODE>

  # remember the dialogue that the get/put/post/delete actor recorded
  <DEFNNODE>def <ARGUMENTNODE>save_dialog</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>actor</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <IFNODE><ATTRASSIGNNODE><INSTVARNODE>@dialogs</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>name</LOCALVARNODE>] = <CALLNODE><LOCALVARNODE>actor</LOCALVARNODE>.crumbs</CALLNODE></ARRAYNODE></ATTRASSIGNNODE> if <INSTVARNODE>@dialogs</INSTVARNODE></IFNODE>
  end</DEFNNODE>

  # Get a resource, optionally check its content-type
  <DEFNNODE>def <ARGUMENTNODE>check_resource</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>uri</ARGUMENTNODE>, <ARGUMENTNODE>name</ARGUMENTNODE>, <ARGUMENTNODE>content_type</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>report=<TRUENODE>true</TRUENODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>resource = <CALLNODE><CONSTNODE>Getter</CONSTNODE>.new<ARRAYNODE>(<LOCALVARNODE>uri</LOCALVARNODE>, <INSTVARNODE>@authent</INSTVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>

    # * Check the URI
    <IFNODE>if <CALLNODE><LOCALVARNODE>resource</LOCALVARNODE>.last_error</CALLNODE>
      <BLOCKNODE><IFNODE><FCALLNODE>error<ARRAYNODE><STRNODE>(<CALLNODE><DSTRNODE>"Unacceptable </STRNODE><EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE><STRNODE> URI: </STRNODE>"</DSTRNODE> + <ARRAYNODE><CALLNODE><LOCALVARNODE>resource</LOCALVARNODE>.last_error</CALLNODE></ARRAYNODE></CALLNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE> if <LOCALVARNODE>report</LOCALVARNODE></IFNODE>
      <RETURNNODE>return <NILNODE>nil</NILNODE></RETURNNODE></BLOCKNODE>
    end</IFNODE>

    # * Get it, make sure it has the right content-type
    <LOCALASGNNODE>worked = <CALLNODE><LOCALVARNODE>resource</LOCALVARNODE>.get<ARRAYNODE>(<LOCALVARNODE>content_type</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE><ATTRASSIGNNODE><INSTVARNODE>@dialogs</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>name</LOCALVARNODE>] = <CALLNODE><LOCALVARNODE>resource</LOCALVARNODE>.crumbs</CALLNODE></ARRAYNODE></ATTRASSIGNNODE> if <INSTVARNODE>@dialogs</INSTVARNODE></IFNODE>

    <IFNODE>if <NOTNODE>!<LOCALVARNODE>worked</LOCALVARNODE></NOTNODE>
      # oops, couldn't even get get it
      <BLOCKNODE><IFNODE><FCALLNODE>error<ARRAYNODE>(<CALLNODE><DSTRNODE>"<EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE><STRNODE> failed: </STRNODE>"</DSTRNODE> + <ARRAYNODE><CALLNODE><LOCALVARNODE>resource</LOCALVARNODE>.last_error</CALLNODE></ARRAYNODE></CALLNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE> if <LOCALVARNODE>report</LOCALVARNODE></IFNODE>
      <RETURNNODE>return <NILNODE>nil</NILNODE></RETURNNODE></BLOCKNODE>

    elsif<IFNODE> <CALLNODE><LOCALVARNODE>resource</LOCALVARNODE>.last_error</CALLNODE>
      # oops, media-type problem
      <IFNODE><FCALLNODE>error<ARRAYNODE>(<DSTRNODE>"<EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE><STRNODE>: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>resource</LOCALVARNODE>.last_error</CALLNODE>}</EVSTRNODE>"</DSTRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE> if <LOCALVARNODE>report</LOCALVARNODE></IFNODE>

    else
      # resource fetched and is of right type
      <IFNODE><FCALLNODE>good<ARRAYNODE>(<DSTRNODE>"<EVSTRNODE>#{<LOCALVARNODE>name</LOCALVARNODE>}</EVSTRNODE><STRNODE>: it exists and is served properly.</STRNODE>"</DSTRNODE>, <LOCALVARNODE>name</LOCALVARNODE>)</ARRAYNODE></FCALLNODE> if <LOCALVARNODE>report</LOCALVARNODE></IFNODE>
    end</IFNODE></IFNODE>

    <RETURNNODE>return <LOCALVARNODE>resource</LOCALVARNODE></RETURNNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>header</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>uri</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <INSTASGNNODE>@header =<STRNODE> <DSTRNODE>"APP Service doc: </STRNODE><EVSTRNODE>#{<LOCALVARNODE>uri</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></INSTASGNNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>footer</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <INSTASGNNODE>@footer = <LOCALVARNODE>message</LOCALVARNODE></INSTASGNNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>show_crumbs</ARGUMENTNODE> <ARGSNODE><LISTNODE><ARGUMENTNODE>key</ARGUMENTNODE></LISTNODE></ARGSNODE>
    <CALLNODE><CALLNODE><INSTVARNODE>@dialogs</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>key</LOCALVARNODE></ARRAYNODE></CALLNODE>].each <ITERNODE>do |<DASGNNODE>d</DASGNNODE>|
      <FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"D: </STRNODE><EVSTRNODE>#{<DVARNODE>d</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
    end</ITERNODE></CALLNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>warning</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>crumb_key=<NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <BLOCKNODE><IFNODE>if <INSTVARNODE>@dialogs</INSTVARNODE>
      <BLOCKNODE><IFNODE><FCALLNODE>step<STRNODE> <ARRAYNODE><DSTRNODE>"D</STRNODE><EVSTRNODE>#{<LOCALVARNODE>crumb_key</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE> if <LOCALVARNODE>crumb_key</LOCALVARNODE></IFNODE>
      <IFNODE><FCALLNODE>show_crumbs<ARRAYNODE>(<LOCALVARNODE>crumb_key</LOCALVARNODE>)</ARRAYNODE></FCALLNODE> if <ANDNODE><LOCALVARNODE>crumb_key</LOCALVARNODE> &amp;&amp; <CLASSVARNODE>@@debugging</CLASSVARNODE></ANDNODE></IFNODE></BLOCKNODE>
    end</IFNODE>
    <FCALLNODE>step <ARRAYNODE><CALLNODE><STRNODE>"W"</STRNODE> + <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>error</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>crumb_key=<NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <BLOCKNODE><IFNODE>if <INSTVARNODE>@dialogs</INSTVARNODE>
      <BLOCKNODE><IFNODE><FCALLNODE>step<STRNODE> <ARRAYNODE><DSTRNODE>"D</STRNODE><EVSTRNODE>#{<LOCALVARNODE>crumb_key</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE> if <LOCALVARNODE>crumb_key</LOCALVARNODE></IFNODE>
      <IFNODE><FCALLNODE>show_crumbs<ARRAYNODE>(<LOCALVARNODE>crumb_key</LOCALVARNODE>)</ARRAYNODE></FCALLNODE> if <ANDNODE><LOCALVARNODE>crumb_key</LOCALVARNODE> &amp;&amp; <CLASSVARNODE>@@debugging</CLASSVARNODE></ANDNODE></IFNODE></BLOCKNODE>
    end</IFNODE>
    <FCALLNODE>step <ARRAYNODE><CALLNODE><STRNODE>"E"</STRNODE> + <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>good</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>, <LOCALASGNNODE>crumb_key=<NILNODE>nil</NILNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <BLOCKNODE><IFNODE>if <INSTVARNODE>@dialogs</INSTVARNODE>
      <BLOCKNODE><IFNODE><FCALLNODE>step<STRNODE> <ARRAYNODE><DSTRNODE>"D</STRNODE><EVSTRNODE>#{<LOCALVARNODE>crumb_key</LOCALVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE> if <LOCALVARNODE>crumb_key</LOCALVARNODE></IFNODE>
      <IFNODE><FCALLNODE>show_crumbs<ARRAYNODE>(<LOCALVARNODE>crumb_key</LOCALVARNODE>)</ARRAYNODE></FCALLNODE> if <ANDNODE><LOCALVARNODE>crumb_key</LOCALVARNODE> &amp;&amp; <CLASSVARNODE>@@debugging</CLASSVARNODE></ANDNODE></IFNODE></BLOCKNODE>
    end</IFNODE>
    <FCALLNODE>step <ARRAYNODE><CALLNODE><STRNODE>"G"</STRNODE> + <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>info</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <FCALLNODE>step <ARRAYNODE><CALLNODE><STRNODE>"I"</STRNODE> + <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>step</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><IFNODE><FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"PROGRESS: </STRNODE><EVSTRNODE>#{<CALLNODE><LOCALVARNODE>message</LOCALVARNODE>[<ARRAYNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE>..-<FIXNUMNODE>1</FIXNUMNODE></DOTNODE></ARRAYNODE></CALLNODE>]}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE> if <CLASSVARNODE>@@debugging</CLASSVARNODE></IFNODE>
    <CALLNODE><INSTVARNODE>@steps</INSTVARNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>start_list</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <FCALLNODE>step <ARRAYNODE><ARRAYNODE>[ <CALLNODE><LOCALVARNODE>message</LOCALVARNODE> + <ARRAYNODE><STRNODE>":"</STRNODE></ARRAYNODE></CALLNODE> ]</ARRAYNODE></ARRAYNODE></FCALLNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>list_item</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>message</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <CALLNODE><CALLNODE><INSTVARNODE>@steps</INSTVARNODE>[-<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>] &lt;&lt; <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>end_list</ARGUMENTNODE><ARGSNODE/>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>line</ARGUMENTNODE><ARGSNODE/>
    <BLOCKNODE><FCALLNODE>printf <ARRAYNODE><STRNODE>"%2d. "</STRNODE>, <INSTVARNODE>@lnum</INSTVARNODE></ARRAYNODE></FCALLNODE>
    <INSTASGNNODE><CALLNODE><INSTVARNODE>@lnum</INSTVARNODE> += <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></INSTASGNNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>report</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>output=<CONSTNODE>STDOUT</CONSTNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <IFNODE>if <CALLNODE><INSTVARNODE>@output</INSTVARNODE> == <ARRAYNODE><STRNODE>'text'</STRNODE></ARRAYNODE></CALLNODE>
      <FCALLNODE>report_text <ARRAYNODE><LOCALVARNODE>output</LOCALVARNODE></ARRAYNODE></FCALLNODE>
    else
      <FCALLNODE>report_html <ARRAYNODE><LOCALVARNODE>output</LOCALVARNODE></ARRAYNODE></FCALLNODE>
    end</IFNODE>
  end</DEFNNODE>



  <DEFNNODE>def <ARGUMENTNODE>report_html</ARGUMENTNODE><ARGSNODE>(<LOCALASGNNODE>output=<CONSTNODE>STDOUT</CONSTNODE></LOCALASGNNODE><BLOCKNODE/>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>dialog = <NILNODE>nil</NILNODE></LOCALASGNNODE>

    <IFNODE>if <CALLNODE><LOCALVARNODE>output</LOCALVARNODE> == <ARRAYNODE><CONSTNODE>STDOUT</CONSTNODE></ARRAYNODE></CALLNODE>
      <BLOCKNODE><CALLNODE><LOCALVARNODE>output</LOCALVARNODE>.puts <ARRAYNODE><STRNODE>"Status: 200 OK\r"</STRNODE></ARRAYNODE></CALLNODE>
      <CALLNODE><LOCALVARNODE>output</LOCALVARNODE>.puts <ARRAYNODE><STRNODE>"Content-type: text/html; charset=utf-8\r"</STRNODE></ARRAYNODE></CALLNODE>
      <CALLNODE><LOCALVARNODE>output</LOCALVARNODE>.puts <ARRAYNODE><STRNODE>"\r"</STRNODE></ARRAYNODE></CALLNODE>
      <CALLNODE><LOCALVARNODE>output</LOCALVARNODE>.puts <ARRAYNODE><STRNODE>"&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.1//EN' 'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd'&gt;"</STRNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
    end</IFNODE>

    <INSTASGNNODE>@w = <CALLNODE><COLON2NODE><CONSTNODE>Builder</CONSTNODE>::XmlMarkup</COLON2NODE>.new<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:target</SYMBOLNODE> =&gt; <LOCALVARNODE>output</LOCALVARNODE></ARRAYNODE>)</ARRAYNODE></CALLNODE></INSTASGNNODE><HASHNODE/>
    <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.html <ITERNODE>do
      <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.head <ITERNODE>do
        <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.title <ITERNODE>{ <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>'Atom Protocol Exerciser Report'</STRNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE>
        <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE>
        <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.link<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:rel</SYMBOLNODE> =&gt; <STRNODE>'stylesheet'</STRNODE>, <SYMBOLNODE>:type</SYMBOLNODE> =&gt; <STRNODE>'text/css'</STRNODE>,<SYMBOLNODE>:href</SYMBOLNODE> =&gt; <STRNODE>'/ape/ape.css'</STRNODE></ARRAYNODE> )</ARRAYNODE></CALLNODE></BLOCKNODE><HASHNODE/>
      end</ITERNODE></CALLNODE>
      <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE>
      <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.body <ITERNODE>do
        <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.h2 <ITERNODE>{ <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>'The Ape says:'</STRNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE>
        <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE>
        <IFNODE>if <INSTVARNODE>@header</INSTVARNODE>
          <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.p <ITERNODE>{ <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><INSTVARNODE>@header</INSTVARNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
        end</IFNODE>
        <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.ol <ITERNODE>do
          <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@steps</INSTVARNODE>.each <ITERNODE>do |<DASGNNODE>step</DASGNNODE>|
            <IFNODE>if <CALLNODE><DVARNODE>step</DVARNODE>.kind_of? <ARRAYNODE><CONSTNODE>Array</CONSTNODE></ARRAYNODE></CALLNODE>
              # it's a list; no dialog applies
              <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.li <ITERNODE>do
                <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.p <ITERNODE>do
                  <BLOCKNODE><FCALLNODE>write_mark <ARRAYNODE><SYMBOLNODE>:info</SYMBOLNODE></ARRAYNODE></FCALLNODE>
                  <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text!<STRNODE> <ARRAYNODE><DSTRNODE>" </STRNODE><EVSTRNODE>#{<CALLNODE><DVARNODE>step</DVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE>]}</EVSTRNODE><STRNODE>\n</STRNODE>"</DSTRNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
                end</ITERNODE></CALLNODE>
                <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.ul <ITERNODE>do
                  <CALLNODE><CALLNODE><DVARNODE>step</DVARNODE>[<ARRAYNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE> .. -<FIXNUMNODE>1</FIXNUMNODE></DOTNODE></ARRAYNODE></CALLNODE>].each <ITERNODE>{ |<DASGNNODE>li</DASGNNODE>| <FCALLNODE>report_li<ARRAYNODE>(<NILNODE>nil</NILNODE>, <NILNODE>nil</NILNODE>, <DVARNODE>li</DVARNODE>)</ARRAYNODE></FCALLNODE> }</ITERNODE></CALLNODE>
                end</ITERNODE></CALLNODE>
                <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
              end</ITERNODE></CALLNODE>
            else
              <BLOCKNODE><DASGNNODE>body = <CALLNODE><DVARNODE>step</DVARNODE>[<ARRAYNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE> .. -<FIXNUMNODE>1</FIXNUMNODE></DOTNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
              <DASGNNODE>opcode = <CALLNODE><DVARNODE>step</DVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE>,<FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
              <IFNODE>if <CALLNODE><DVARNODE>opcode</DVARNODE> == <ARRAYNODE><STRNODE>"D"</STRNODE></ARRAYNODE></CALLNODE>
                <LOCALASGNNODE>dialog = <DVARNODE>body</DVARNODE></LOCALASGNNODE>
              else
                <BLOCKNODE><CASENODE>case <DVARNODE>opcode</DVARNODE>
                <ARRAYNODE><WHENNODE>when <STRNODE>"W"</STRNODE> then <FCALLNODE>report_li<ARRAYNODE>(<LOCALVARNODE>dialog</LOCALVARNODE>, <SYMBOLNODE>:question</SYMBOLNODE>, <DVARNODE>body</DVARNODE>)</ARRAYNODE></FCALLNODE></WHENNODE>
                <WHENNODE>when <STRNODE>"E"</STRNODE> then <FCALLNODE>report_li<ARRAYNODE>(<LOCALVARNODE>dialog</LOCALVARNODE>, <SYMBOLNODE>:exclamation</SYMBOLNODE>, <DVARNODE>body</DVARNODE>)</ARRAYNODE></FCALLNODE></WHENNODE>
                <WHENNODE>when <STRNODE>"G"</STRNODE> then <FCALLNODE>report_li<ARRAYNODE>(<LOCALVARNODE>dialog</LOCALVARNODE>, <SYMBOLNODE>:check</SYMBOLNODE>, <DVARNODE>body</DVARNODE>)</ARRAYNODE></FCALLNODE></WHENNODE>
                <WHENNODE>when <STRNODE>"I"</STRNODE> then <FCALLNODE>report_li<ARRAYNODE>(<LOCALVARNODE>dialog</LOCALVARNODE>, <SYMBOLNODE>:info</SYMBOLNODE>, <DVARNODE>body</DVARNODE>)</ARRAYNODE></FCALLNODE></WHENNODE></ARRAYNODE>
                else
                  <BLOCKNODE><VCALLNODE>line</VCALLNODE>
                  <FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"HUH? </STRNODE><EVSTRNODE>#{<DVARNODE>step</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
                end</CASENODE>
                <LOCALASGNNODE>dialog = <NILNODE>nil</NILNODE></LOCALASGNNODE></BLOCKNODE>
              end</IFNODE></BLOCKNODE>
            end</IFNODE>
          end</ITERNODE></CALLNODE></BLOCKNODE>
        end</ITERNODE></CALLNODE>

        <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE>
        <IFNODE>if <INSTVARNODE>@footer</INSTVARNODE> then <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.p <ITERNODE>{ <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><INSTVARNODE>@footer</INSTVARNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE> end</IFNODE>
        <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE>

        <IFNODE>if <INSTVARNODE>@dialogs</INSTVARNODE>
          <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.h2 <ITERNODE>{ <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>'Recorded client/server dialogs'</STRNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@diarefs</INSTVARNODE>.each <ITERNODE>do <MULTIPLEASGNNODE>|<ARRAYNODE><DASGNNODE>k</DASGNNODE>, <DASGNNODE>v</DASGNNODE></ARRAYNODE>|</MULTIPLEASGNNODE>
            <BLOCKNODE><LOCALASGNNODE>dialog = <CALLNODE><INSTVARNODE>@dialogs</INSTVARNODE>[<ARRAYNODE><DVARNODE>k</DVARNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>]
            <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.h3<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:id</SYMBOLNODE> =&gt;<STRNODE> <DSTRNODE>"dia-</STRNODE><EVSTRNODE>#{<DVARNODE>v</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>do
              <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><DVARNODE>k</DVARNODE></ARRAYNODE></CALLNODE>
            end</ITERNODE></CALLNODE>
            <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.div<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <STRNODE>'dialog'</STRNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>do

              <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.div<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <STRNODE>'dialab'</STRNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>do
                <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\nTo server:\n"</STRNODE></ARRAYNODE></CALLNODE>
                <CALLNODE><CALLNODE><LOCALVARNODE>dialog</LOCALVARNODE>.grep<ARRAYNODE>(/<REGEXPNODE>^&gt;</REGEXPNODE>/)</ARRAYNODE></CALLNODE>.each <ITERNODE>{ |<DASGNNODE>crumb</DASGNNODE>| <FCALLNODE>show_message<ARRAYNODE>(<DVARNODE>crumb</DVARNODE>, <SYMBOLNODE>:to</SYMBOLNODE>)</ARRAYNODE></FCALLNODE> }</ITERNODE></CALLNODE></BLOCKNODE>
              end</ITERNODE></CALLNODE>
              <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.div<ARRAYNODE>( <ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <STRNODE>'dialab'</STRNODE></ARRAYNODE> )</ARRAYNODE><HASHNODE/> <ITERNODE>do
                <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\nFrom Server:\n"</STRNODE></ARRAYNODE></CALLNODE>
                <CALLNODE><CALLNODE><LOCALVARNODE>dialog</LOCALVARNODE>.grep<ARRAYNODE>(/<REGEXPNODE>^&lt;</REGEXPNODE>/)</ARRAYNODE></CALLNODE>.each <ITERNODE>{ |<DASGNNODE>crumb</DASGNNODE>| <FCALLNODE>show_message<ARRAYNODE>(<DVARNODE>crumb</DVARNODE>, <SYMBOLNODE>:from</SYMBOLNODE>)</ARRAYNODE></FCALLNODE> }</ITERNODE></CALLNODE></BLOCKNODE>
              end</ITERNODE></CALLNODE></BLOCKNODE>
            end</ITERNODE></CALLNODE></BLOCKNODE>
          end</ITERNODE></CALLNODE></BLOCKNODE>
        end</IFNODE></BLOCKNODE>
      end</ITERNODE></CALLNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>report_li</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>dialog</ARGUMENTNODE>, <ARGUMENTNODE>marker</ARGUMENTNODE>, <ARGUMENTNODE>text</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.li <ITERNODE>do
      <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.p <ITERNODE>do
        <BLOCKNODE><IFNODE>if <LOCALVARNODE>marker</LOCALVARNODE>
          <BLOCKNODE><FCALLNODE>write_mark <ARRAYNODE><LOCALVARNODE>marker</LOCALVARNODE></ARRAYNODE></FCALLNODE>
          <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>' '</STRNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
        end</IFNODE>
        # preserve line-breaks in output
        <DASGNNODE>lines = <CALLNODE><LOCALVARNODE>text</LOCALVARNODE>.split<ARRAYNODE>(<STRNODE>"\n"</STRNODE>)</ARRAYNODE></CALLNODE></DASGNNODE>
        <CALLNODE><CALLNODE><DVARNODE>lines</DVARNODE>[<ARRAYNODE><DOTNODE><FIXNUMNODE>0</FIXNUMNODE> .. -<FIXNUMNODE>2</FIXNUMNODE></DOTNODE></ARRAYNODE></CALLNODE>].each <ITERNODE>do |<DASGNNODE>line</DASGNNODE>|
          <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><DVARNODE>line</DVARNODE></ARRAYNODE></CALLNODE>
          <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.br</CALLNODE></BLOCKNODE>
        end</ITERNODE></CALLNODE>
        <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><CALLNODE><DVARNODE>lines</DVARNODE>[-<ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></ARRAYNODE></CALLNODE>]

        <IFNODE>if <LOCALVARNODE>dialog</LOCALVARNODE>
          <BLOCKNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.a<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <STRNODE>'diaref'</STRNODE>, <SYMBOLNODE>:href</SYMBOLNODE> =&gt;<STRNODE> <DSTRNODE>"#dia-</STRNODE><EVSTRNODE>#{<INSTVARNODE>@dianum</INSTVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>do
            <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>' [Dialog]'</STRNODE></ARRAYNODE></CALLNODE>
          end</ITERNODE></CALLNODE>
          <ATTRASSIGNNODE><INSTVARNODE>@diarefs</INSTVARNODE>[<ARRAYNODE><LOCALVARNODE>dialog</LOCALVARNODE>] = <INSTVARNODE>@dianum</INSTVARNODE></ARRAYNODE></ATTRASSIGNNODE>
          <INSTASGNNODE><CALLNODE><INSTVARNODE>@dianum</INSTVARNODE> += <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></INSTASGNNODE></BLOCKNODE>
        end</IFNODE></BLOCKNODE>
      end</ITERNODE></CALLNODE>
    end</ITERNODE></CALLNODE>
    <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>"\n"</STRNODE></ARRAYNODE></CALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>show_message</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>crumb</ARGUMENTNODE>, <ARGUMENTNODE>tf</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>message = <CALLNODE><LOCALVARNODE>crumb</LOCALVARNODE>[<ARRAYNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE> .. -<FIXNUMNODE>1</FIXNUMNODE></DOTNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>]
    <CALLNODE><LOCALVARNODE>message</LOCALVARNODE>.gsub!<ARRAYNODE>(/<REGEXPNODE>^\s*"</REGEXPNODE>/, <STRNODE>''</STRNODE>)</ARRAYNODE></CALLNODE>
    <CALLNODE><LOCALVARNODE>message</LOCALVARNODE>.gsub!<ARRAYNODE>(/<REGEXPNODE>"\s*$</REGEXPNODE>/, <STRNODE>''</STRNODE>)</ARRAYNODE></CALLNODE>
    <CALLNODE><LOCALVARNODE>message</LOCALVARNODE>.gsub!<ARRAYNODE>(/<REGEXPNODE>\\"</REGEXPNODE>/, <STRNODE>'"'</STRNODE>)</ARRAYNODE></CALLNODE>
    <LOCALASGNNODE>message = <CALLNODE><CONSTNODE>Escaper</CONSTNODE>.escape <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <CALLNODE><LOCALVARNODE>message</LOCALVARNODE>.gsub!<ARRAYNODE>(/<REGEXPNODE>\\n</REGEXPNODE>/, <STRNODE>"\n&lt;br/&gt;"</STRNODE>)</ARRAYNODE></CALLNODE>
    <CALLNODE><LOCALVARNODE>message</LOCALVARNODE>.gsub!<ARRAYNODE>(/<REGEXPNODE>\\t</REGEXPNODE>/, <STRNODE>'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</STRNODE>)</ARRAYNODE></CALLNODE>
    <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.div<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <LOCALVARNODE>tf</LOCALVARNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>{ <CALLNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.target!</CALLNODE> &lt;&lt; <ARRAYNODE><LOCALVARNODE>message</LOCALVARNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>report_text</ARGUMENTNODE><ARGSNODE/>
    <BLOCKNODE><IFNODE><FCALLNODE>puts <ARRAYNODE><INSTVARNODE>@header</INSTVARNODE></ARRAYNODE></FCALLNODE> if <INSTVARNODE>@header</INSTVARNODE></IFNODE>
    <CALLNODE><INSTVARNODE>@steps</INSTVARNODE>.each <ITERNODE>do |<DASGNNODE>step</DASGNNODE>|
      <BLOCKNODE><IFNODE>if <CALLNODE><CALLNODE><DVARNODE>step</DVARNODE>.class</CALLNODE> == <ARRAYNODE><CONSTNODE>Crumbs</CONSTNODE></ARRAYNODE></CALLNODE>
        <BLOCKNODE><FCALLNODE>puts <ARRAYNODE><STRNODE>"   Dialog:"</STRNODE></ARRAYNODE></FCALLNODE>
        <CALLNODE><DVARNODE>step</DVARNODE>.each <ITERNODE>{ |<DASGNNODE>crumb</DASGNNODE>| <FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"     </STRNODE><EVSTRNODE>#{<DVARNODE>crumb</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE> }</ITERNODE></CALLNODE></BLOCKNODE>
      else
        <BLOCKNODE><DASGNNODE>body = <CALLNODE><DVARNODE>step</DVARNODE>[<ARRAYNODE><DOTNODE><FIXNUMNODE>1</FIXNUMNODE> .. -<FIXNUMNODE>1</FIXNUMNODE></DOTNODE></ARRAYNODE></CALLNODE></DASGNNODE>]
        <CASENODE>case <CALLNODE><DVARNODE>step</DVARNODE>[<ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE>,<FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE>]
        <ARRAYNODE><WHENNODE>when <STRNODE>"W"</STRNODE>
          <BLOCKNODE><VCALLNODE>line</VCALLNODE>
          <FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"WARNING: </STRNODE><EVSTRNODE>#{<DVARNODE>body</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE></BLOCKNODE></WHENNODE>
        <WHENNODE>when <STRNODE>"E"</STRNODE>
          <BLOCKNODE><VCALLNODE>line</VCALLNODE>
          <FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"ERROR: </STRNODE><EVSTRNODE>#{<DVARNODE>body</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE></BLOCKNODE></WHENNODE>
        <WHENNODE>when <STRNODE>"G"</STRNODE>
          <BLOCKNODE><VCALLNODE>line</VCALLNODE>
          <FCALLNODE>puts <ARRAYNODE><DVARNODE>body</DVARNODE></ARRAYNODE></FCALLNODE></BLOCKNODE></WHENNODE>
        <WHENNODE>when <STRNODE>"L"</STRNODE>
          <BLOCKNODE><VCALLNODE>line</VCALLNODE>
          <FCALLNODE>puts <ARRAYNODE><DVARNODE>body</DVARNODE></ARRAYNODE></FCALLNODE></BLOCKNODE></WHENNODE>
        <WHENNODE>when</WHENNODE> <STRNODE>"e"</STRNODE>
          # no-op
        <WHENNODE>when <STRNODE>"I"</STRNODE>
          <FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"     </STRNODE><EVSTRNODE>#{<DVARNODE>body</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE></WHENNODE>
        <WHENNODE>when</WHENNODE></ARRAYNODE> <STRNODE>"D"</STRNODE>
          # later, dude
        else
          <BLOCKNODE><VCALLNODE>line</VCALLNODE>
          <FCALLNODE>puts<STRNODE> <ARRAYNODE><DSTRNODE>"HUH? </STRNODE><EVSTRNODE>#{<DVARNODE>body</DVARNODE>}</EVSTRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
        end</CASENODE></BLOCKNODE>
      end</IFNODE>
      <IFNODE><FCALLNODE>puts <ARRAYNODE><INSTVARNODE>@footer</INSTVARNODE></ARRAYNODE></FCALLNODE> if <INSTVARNODE>@footer</INSTVARNODE></IFNODE></BLOCKNODE>
    end</ITERNODE></CALLNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>compare_entries</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>e1</ARGUMENTNODE>, <ARGUMENTNODE>e2</ARGUMENTNODE>, <ARGUMENTNODE>e1Name</ARGUMENTNODE>, <ARGUMENTNODE>e2Name</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>problems = <FIXNUMNODE>0</FIXNUMNODE></LOCALASGNNODE>
    <CALLNODE><ARRAYNODE>[ <STRNODE>'title'</STRNODE>, <STRNODE>'summary'</STRNODE>, <STRNODE>'content'</STRNODE> ]</ARRAYNODE>.each <ITERNODE>do |<DASGNNODE>field</DASGNNODE>|
      <IFNODE><LOCALASGNNODE><CALLNODE><LOCALVARNODE>problems</LOCALVARNODE> += <ARRAYNODE><FIXNUMNODE>1</FIXNUMNODE></ARRAYNODE></CALLNODE></LOCALASGNNODE> if <FCALLNODE>compare1<ARRAYNODE>(<LOCALVARNODE>e1</LOCALVARNODE>, <LOCALVARNODE>e2</LOCALVARNODE>, <LOCALVARNODE>e1Name</LOCALVARNODE>, <LOCALVARNODE>e2Name</LOCALVARNODE>, <DVARNODE>field</DVARNODE>)</ARRAYNODE></FCALLNODE></IFNODE>
    end</ITERNODE></CALLNODE>
    <RETURNNODE>return <CALLNODE><LOCALVARNODE>problems</LOCALVARNODE> == <ARRAYNODE><FIXNUMNODE>0</FIXNUMNODE></ARRAYNODE></CALLNODE></RETURNNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>compare1</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>e1</ARGUMENTNODE>, <ARGUMENTNODE>e2</ARGUMENTNODE>, <ARGUMENTNODE>e1Name</ARGUMENTNODE>, <ARGUMENTNODE>e2Name</ARGUMENTNODE>, <ARGUMENTNODE>field</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <BLOCKNODE><LOCALASGNNODE>c1 = <CALLNODE><LOCALVARNODE>e1</LOCALVARNODE>.child_content<ARRAYNODE>(<LOCALVARNODE>field</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <LOCALASGNNODE>c2 = <CALLNODE><LOCALVARNODE>e2</LOCALVARNODE>.child_content<ARRAYNODE>(<LOCALVARNODE>field</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
    <IFNODE>if <NOTNODE><CALLNODE><LOCALVARNODE>c1</LOCALVARNODE> != <ARRAYNODE><LOCALVARNODE>c2</LOCALVARNODE></ARRAYNODE></CALLNODE></NOTNODE>
      <BLOCKNODE><LOCALASGNNODE>problem = <TRUENODE>true</TRUENODE></LOCALASGNNODE>
      <IFNODE>if <CALLNODE><LOCALVARNODE>c1</LOCALVARNODE> == <ARRAYNODE><NILNODE>nil</NILNODE></ARRAYNODE></CALLNODE>
        <FCALLNODE>warning<STRNODE> <ARRAYNODE><DSTRNODE>"'</STRNODE><EVSTRNODE>#{<LOCALVARNODE>field</LOCALVARNODE>}</EVSTRNODE><STRNODE>' absent in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>e1Name</LOCALVARNODE>}</EVSTRNODE><STRNODE>.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      elsif<IFNODE> <CALLNODE><LOCALVARNODE>c2</LOCALVARNODE> == <ARRAYNODE><NILNODE>nil</NILNODE></ARRAYNODE></CALLNODE>
        <FCALLNODE>warning<STRNODE> <ARRAYNODE><DSTRNODE>"'</STRNODE><EVSTRNODE>#{<LOCALVARNODE>field</LOCALVARNODE>}</EVSTRNODE><STRNODE>' absent in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>e2Name</LOCALVARNODE>}</EVSTRNODE><STRNODE>.</STRNODE>"</DSTRNODE></ARRAYNODE></FCALLNODE>
      else
        <BLOCKNODE><LOCALASGNNODE>t1 = <CALLNODE><LOCALVARNODE>e1</LOCALVARNODE>.child_type<ARRAYNODE>(<LOCALVARNODE>field</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
        <LOCALASGNNODE>t2 = <CALLNODE><LOCALVARNODE>e2</LOCALVARNODE>.child_type<ARRAYNODE>(<LOCALVARNODE>field</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
        <IFNODE>if <NOTNODE><CALLNODE><LOCALVARNODE>t1</LOCALVARNODE> != <ARRAYNODE><LOCALVARNODE>t2</LOCALVARNODE></ARRAYNODE></CALLNODE></NOTNODE>
          <FCALLNODE>warning<STRNODE> <ARRAYNODE><CALLNODE><DSTRNODE>"'</STRNODE><EVSTRNODE>#{<LOCALVARNODE>field</LOCALVARNODE>}</EVSTRNODE><STRNODE>' has type='</STRNODE><EVSTRNODE>#{<LOCALVARNODE>t1</LOCALVARNODE>}</EVSTRNODE><STRNODE>' </STRNODE>"</DSTRNODE> +
           <STRNODE> <ARRAYNODE><DSTRNODE>"in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>e1Name</LOCALVARNODE>}</EVSTRNODE><STRNODE>, type='</STRNODE><EVSTRNODE>#{<LOCALVARNODE>t2</LOCALVARNODE>}</EVSTRNODE><STRNODE>' in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>e2Name</LOCALVARNODE>}</EVSTRNODE><STRNODE>.</STRNODE>"</DSTRNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE>
        else
          <BLOCKNODE><LOCALASGNNODE>c1 = <CALLNODE><CONSTNODE>Escaper</CONSTNODE>.escape<ARRAYNODE>(<LOCALVARNODE>c1</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
          <LOCALASGNNODE>c2 = <CALLNODE><CONSTNODE>Escaper</CONSTNODE>.escape<ARRAYNODE>(<LOCALVARNODE>c2</LOCALVARNODE>)</ARRAYNODE></CALLNODE></LOCALASGNNODE>
          <FCALLNODE>warning<STRNODE> <ARRAYNODE><CALLNODE><DSTRNODE>"'</STRNODE><EVSTRNODE>#{<LOCALVARNODE>field</LOCALVARNODE>}</EVSTRNODE><STRNODE>' in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>e1Name</LOCALVARNODE>}</EVSTRNODE><STRNODE> [</STRNODE><EVSTRNODE>#{<LOCALVARNODE>c1</LOCALVARNODE>}</EVSTRNODE><STRNODE>] </STRNODE>"</DSTRNODE> +
           <STRNODE> <ARRAYNODE><DSTRNODE>"differs from that in </STRNODE><EVSTRNODE>#{<LOCALVARNODE>e2Name</LOCALVARNODE>}</EVSTRNODE><STRNODE> [</STRNODE><EVSTRNODE>#{<LOCALVARNODE>c2</LOCALVARNODE>}</EVSTRNODE><STRNODE>].</STRNODE>"</DSTRNODE></ARRAYNODE></CALLNODE></ARRAYNODE></FCALLNODE></BLOCKNODE>
        end</IFNODE></BLOCKNODE>
      end</IFNODE></IFNODE></BLOCKNODE>
    end</IFNODE>
    <RETURNNODE>return <LOCALVARNODE>problem</LOCALVARNODE></RETURNNODE></BLOCKNODE>
  end</DEFNNODE>

  <DEFNNODE>def <ARGUMENTNODE>write_mark</ARGUMENTNODE><ARGSNODE>(<LISTNODE><ARGUMENTNODE>mark</ARGUMENTNODE></LISTNODE>)</ARGSNODE>
    <CASENODE>case <LOCALVARNODE>mark</LOCALVARNODE>
    <ARRAYNODE><WHENNODE>when <SYMBOLNODE>:check</SYMBOLNODE>
      <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.span<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <STRNODE>'good'</STRNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>{ <CALLNODE><CALLNODE><INSTVARNODE>@w</INSTVARNODE>.target</CALLNODE> &lt;&lt; <ARRAYNODE><STRNODE>'&amp;#x2713;'</STRNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></WHENNODE>
    <WHENNODE>when <SYMBOLNODE>:question</SYMBOLNODE>
      <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.span<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <STRNODE>'warning'</STRNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>{ <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>'?'</STRNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></WHENNODE>
    <WHENNODE>when <SYMBOLNODE>:exclamation</SYMBOLNODE>
      <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.span<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:class</SYMBOLNODE> =&gt; <STRNODE>'error'</STRNODE></ARRAYNODE>)</ARRAYNODE><HASHNODE/> <ITERNODE>{ <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.text! <ARRAYNODE><STRNODE>'!'</STRNODE></ARRAYNODE></CALLNODE> }</ITERNODE></CALLNODE></WHENNODE>
    <WHENNODE>when <SYMBOLNODE>:info</SYMBOLNODE>
      <CALLNODE><INSTVARNODE>@w</INSTVARNODE>.img<ARRAYNODE>(<ARRAYNODE><SYMBOLNODE>:align</SYMBOLNODE> =&gt; <STRNODE>'top'</STRNODE>, <SYMBOLNODE>:src</SYMBOLNODE> =&gt; <STRNODE>'/ape/info.png'</STRNODE></ARRAYNODE>)</ARRAYNODE></CALLNODE></WHENNODE></ARRAYNODE><HASHNODE/>
    end</CASENODE>
  end</DEFNNODE></BLOCKNODE>

end</CLASSNODE></BLOCKNODE>

